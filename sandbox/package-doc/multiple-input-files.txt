==================================
 Support for Multiple Input Files
==================================

:Author: Lea Wiemann <LeWiemann@gmail.com>
:Date: $Date$
:Revision: $Revision$
:Copyright: This document has been placed in the public domain.

We would like to support documents whose source text comes from
multiple files.  For instance, the Docutils documentation tree could
be considered a large document; parsing all files into one single
document tree would enable us to do cross-linking between parts of the
documentation (our current way to cross-link between files is to link
to HTML files and fragments, which is a hack).

Note that this issue is separate from output to multiple files; after
implementing support for multiple files, all we will be able to do is
to generate a huge single output file.

This is a collection of notes and semi-random thoughts (many of which
are credit to David, from IM conversations).  Feel free to add yours!

* The "include" directive is not usable for this because we want to
  have independent parsing contexts (for instance, section title
  adornment should not have to be consistent across input files).

* So create a "subdocument" directive (syntax: ".. subdocument::
  file.txt").  This directive causes the referenced file to be parsed
  and its document tree to be inserted in place.

  - The sub-document must have a document title.  (This document title
    will become a section title.)
    
  - The subdocument directive should be treated like a section; that
    is, no elements except for more sections or transitions may
    follow.
    
  - In order to facilitate assembling a large number of hierarchical
    files into a large document, the subdocument directive should
    allow specifying any number of files, like this::

        .. subdocument::

           chapter1.txt
               chapter1-section1.txt
               chapter1-section2.txt
           chapter2.txt
               chapter2-section1.txt
               ...

    Specifying an indented file (like chapter1-section1.txt) is
    equivalent to inserting ".. subdocument:: chapter1-section1.txt"
    at the end of chapter1.txt.

    Lists of files should be required to be directive content, not
    parameters, because file lists as parameters would be prone to
    uncaught user errors.  In this example, the indentation of
    "chapter1-section1.txt" would be stripped by the directive parser,
    which is contrary to what the user expects::

        .. subdocument:: chapter1.txt
               chapter1-section1.txt

  - Implementation-wise: Insert a pending node, which will be resolved
    by a very early transform.  That transform parses the sub-document
    and inserts the document tree.

* What do we do with docinfos in subdocuments?

  - Allow for section infos by generalizing the existing docinfo node.

  - Add an option to either strip or leave docinfos.  Perhaps
    specifiable as an option to the "subdocument" directive, and/or on
    a per-input-file basis (how?), and/or as a command line option.
    (Applied in which order?)

  - Should there also be a way to have per-section section infos in
    reStructuredText files, as opposed to just file-wide docinfos?  If
    not, the only way to get section infos in a document is to use
    sub-documents (which might be fine).

  - For a first implementation, just go the easy route and strip all
    docinfos in sub-documents.

* In order to facilitate multi-file output that parallels the input
  file structure, add "source" attributes to section nodes for
  sections that come from different input files.

* Allow multiple top-level sections in sub-documents.  (No reason not
  to; the implementation doesn't get much harder.)  Sub-documents can
  therefore contain either a lone document title (and optionally a
  docinfo), or multiple top-level sections.  Only support per-document
  docinfos -- if a sub-document contains multiple top-level sections,
  don't touch field lists at all.

* Restriction: Do not allow sub-documents without a top-level section,
  or with body elements in front of the first section.  IOW, the
  sub-document may only contain PreBibliographic elements, sections,
  and transitions.  The PreBibliographic elements in front of the
  first section get moved into the section.

  David says this restriction is bad and we probably shouldn't have it
  -- for instance you might want to have an introductory paragraph in
  front of the first section of the first sub-document; Lea doesn't
  mind the restriction and says you could use the "include" directive.
  Since having the restriction makes the implementation somewhat
  easier, we agreed on having this restriction, waiting until the
  first user presents a good use case to remove it, and calling it a
  YAGNI until then.

* Silently drop header and footer in sub-documents.  (Document this in
  directives.txt though.)
