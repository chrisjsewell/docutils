#! /bin/bash
# $Id$
#
# This script is installed as a cron job to automatically update the
# Docutils web site whenever the SVN files change.  Any .html document
# with a corresponding .txt file is regenerated whenever the .txt
# changes.
#
# Options:
#   -f    Provide feedback at start and end of program run.
#   -p    Run from the project directory.
#   -t    Run the script in trace mode ("set -o xtrace").
#   -u    Regenerate .html unconditionally.
#   -v    Run verbosely.
#
# Prerequisites:
#
# - Checked out trunk at $snapshotdir.
# - Checked out main tree at $lib.

# exit on error
set -e

# be nice
renice 15 $$ > /dev/null

# make all newly created files group writeable
umask 002

projdir=/home/groups/docutils/htdocs/aux
project=docutils
dest=/home/groups/docutils/htdocs
snapshotdir=$projdir/snapshots
pylib=$projdir/lib/python
lib=$pylib/$project

feedback=0
trace=0
unconditional=0
verbose=0

while getopts fptuv opt
do
    case $opt in
        f)  feedback=1;;
        p)  export PYTHONPATH=$pylib:$lib:$lib/extras;;
        t)  trace=1;;
        u)  unconditional=1;;
        v)  verbose=1;;
        \?) exit 2;;
    esac
done
shift `expr $OPTIND - 1`

if [ $feedback -eq 1 ] ; then
    echo 'Starting docutils-update run...'
fi

if [ $trace -eq 1 -o $verbose -eq 1 ] ; then
    set -o xtrace
fi

# update library area
cd $lib
svn up --quiet

# -------------------- Snapshots: --------------------

# gather the materials
cd $snapshotdir
svn up --quiet

# Ensure proper directory permissions are set.  Use $dest, because
# $snapshotdir is currently a subdirectory of $dest.  Changing
# permissions of files is probably not necessary because files can be
# deleted and re-created.  Do not change permissions of aux directory
# (but change them for all subdirectories).
#find $dest -type f -print0 | xargs -0 chmod ug+rw 2> /dev/null || true
find $dest -name aux -o -type d -print0 | xargs -0 chmod ug+rwxs 2> /dev/null || true

# ensure executable bits are set
chmod +x $project/*.py 2> /dev/null || true
chmod +x $project/tools/*.py 2> /dev/null || true
chmod +x $project/test/alltests.py 2> /dev/null || true
find $project/test -name 'test_*.py' -print0 | xargs -0 chmod +x 2> /dev/null || true

# create the snapshots
exclude='--exclude=.svn'
tar -cz $exclude -f $project-snapshot.tgz $project
tar -cz $exclude -f $project-sandbox-snapshot.tgz sandbox
tar -cz $exclude -f $project-web-snapshot.tgz web
( cd sandbox/gschwant ;
  tar -cz $exclude -f ../../docfactory-snapshot.tgz docfactory )

# plant the snapshots
mv -f *snapshot.tgz $dest

# -------------------- htdocs: --------------------

cd $snapshotdir

function copy_to_dest() {
    find "$@" -type d -name .svn -prune -o -type f -print0 | \
        xargs -0 cp --update --parents --target-directory=$dest
}

# update htdocs
copy_to_dest sandbox
(cd $project; copy_to_dest *)
(cd web; copy_to_dest * .[^.]*)

# update HTML docs
cd $dest/tools

if [ $trace -eq 0 ] ; then
    set +o xtrace
fi

for htmlfile in `find .. -name '*.html'` ; do
    dir=`dirname $htmlfile`
    base=`basename $htmlfile .html`
    txtfile=$dir/$base.txt
    if [ -e $txtfile ] ; then
        if [ $unconditional -eq 1 -o $txtfile -nt $htmlfile ] ; then
            if [ "${base:0:4}" == "pep-" ] ; then
                echo "$txtfile (PEP)"
                python $lib/tools/pep.py --config=$dir/docutils.conf $txtfile $htmlfile
            else
                echo $txtfile
                python $lib/tools/rst2html.py --config=$dir/docutils.conf $txtfile $htmlfile
            fi
        fi
    fi
done

if [ $feedback -eq 1 ] ; then
    echo '...docutils-update done.'
fi

# Local Variables:
# indent-tabs-mode: nil
# End:
