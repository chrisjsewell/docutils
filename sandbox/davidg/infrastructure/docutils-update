#! /bin/sh
# $Id$
#
# This script is installed as a cron job to automatically update the
# Docutils web site whenever the CVS files change.  Any .html document
# with a corresponding .txt file is regenerated whenever the .txt
# changes.
#
# Options:
#   -e    Access CVS as current user ("ext" instead of "pserver"; requires
#         authentication).
#   -p    Run from the project directory.
#   -t    Run the script in trace mode ("set -o xtrace").
#   -u    Regenerate .html unconditionally.

# exit on error
set -e

projdir=/home/groups/d/do/docutils
project=docutils
dest=$projdir/htdocs
snapshotdir=$projdir/snapshots
pylib=$projdir/lib/python
lib=$pylib/$project
root=

export CVS_RSH=ssh
export CVSROOT=:pserver:anonymous@cvs1:/cvsroot/$project

trace=0
unconditional=0

while getopts eptu opt
do
    case $opt in
        e)  root="-d:ext:${USER}@cvs1:/cvsroot/docutils" ;;
        p)  export PYTHONPATH=$pylib:$lib:$lib/extras;;
        t)  trace=1;;
        u)  unconditional=1;;
        \?) exit 2;;
    esac
done
shift `expr $OPTIND - 1`

if [ $trace -eq 1 ] ; then
    set -o xtrace
fi

# update library area
cd $lib
cvs -Q -z3 $root update 2>&1 > /dev/null

# gather the materials
cd $snapshotdir
cvs -Q -z3 $root update -rHEAD $project sandbox web

# ensure executable bits are set
chmod +x $project/*.py
chmod +x $project/tools/*.py
chmod +x $project/test/alltests.py
find $project/test -name 'test_*.py' | xargs chmod +x

# create the snapshots
exclude='--exclude=CVS --exclude=.cvsignore'
tar -cz $exclude -f $project-snapshot.tgz $project
tar -cz $exclude -f $project-sandbox-snapshot.tgz sandbox
tar -cz $exclude -f $project-web-snapshot.tgz web
( cd sandbox/gschwant ;
  tar -cz $exclude -f ../../docfactory-snapshot.tgz docfactory )

# plant the snapshots
mv -f *snapshot.tgz $dest

# update htdocs
cd $project
cp -ruf . $dest
cd ..
cp -ruf sandbox $dest
cd web
cp -ruf . $dest

cd

# update HTML docs
cd $dest/tools
for htmlfile in `find .. -name '*.html'` ; do
    dir=`dirname $htmlfile`
    base=`basename $htmlfile .html`
    txtfile=$dir/$base.txt
    if [ -e $txtfile ] ; then
        if [ $unconditional -eq 1 -o $txtfile -nt $htmlfile ] ; then
            if [ "${base:0:4}" == "pep-" ] ; then
                echo "$txtfile (PEP)"
                # pep2html.py fails on SourceForge; can't import cgi
                # (cgi imports urllib which imports socket which imports 
                # _socket; libssl.so.2 doesn't exist on SF):
                ~/bin/python $lib/tools/pep.py --config=$dir/docutils.conf $txtfile $htmlfile
            else
                echo $txtfile
                ~/bin/python $lib/tools/rst2html.py --config=$dir/docutils.conf $txtfile $htmlfile
            fi
        fi
    fi
done

# Local Variables:
# indent-tabs-mode: nil
