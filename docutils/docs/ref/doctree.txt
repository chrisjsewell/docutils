==================================
 Docutils Document Tree Structure
==================================
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:Revision: $Revision$
:Date: $Date$

This document describes the internal data structure representing
document trees in Docutils.  The data structure is defined by the
hierarchy of classes in the ``docutils.nodes`` module.  It is also
formally described by the `Docutils Generic DTD`_ XML document type
definition, docutils.dtd_, which is the definitive source for element
hierarchy details.

Below is a simplified diagram of the hierarchy of element types in the
Docutils document tree structure.  An element may contain any other
elements immediately below it in the diagram.  Text in square brackets
are notes.  Element types in parentheses indicate recursive or
one-to-many relationships; sections may contain (sub)sections, tables
contain further body elements, etc. ::

  +--------------------------------------------------------------------+
  | document  [may begin with a title, subtitle, docinfo]              |
  |                             +--------------------------------------+
  |                             | sections  [each begins with a title] |
  +-----------------------------+-------------------------+------------+
  | [body elements:]                                      | (sections) |
  |         | - literal | - lists  |       | - hyperlink  +------------+
  |         |   blocks  | - tables |       |   targets    |
  | para-   | - doctest | - block  | foot- | - sub. defs  |
  | graphs  |   blocks  |   quotes | notes | - comments   |
  +---------+-----------+----------+-------+--------------+
  | [text]+ | [text]    | (body elements)  | [text]       |
  | (inline +-----------+------------------+--------------+
  | markup) |
  +---------+


-------------------
 Element Hierarchy
-------------------

A class hierarchy has been implemented in nodes.py where the position
of the element (the level at which it can occur) is significant.
E.G., Root, Structural, Body, Inline classes etc.  Certain
transformations will be easier because we can use isinstance() on
them.

The elements making up Docutils document trees can be categorized into
the following groups:

- _`Root element`: document_

- _`Title elements`: title_, subtitle_

- _`Bibliographic elements`: docinfo_, author_, authors_,
  organization_, contact_, version_, revision_, status_, date_,
  copyright_

- _`Structural elements`: document_, section_, topic_, transition_

- _`Body elements`:

  - _`General body elements`: paragraph_, literal_block_,
    block_quote_, doctest_block_, table_, figure_, image_, footnote_

  - _`Lists`: bullet_list_, enumerated_list_, definition_list_,
    field_list_, option_list_

  - _`Admonitions`: note_, tip_, warning_, error_, caution_, danger_,
    important_

  - _`Special body elements`: target_, substitution_definition_,
    comment_, system_warning_

- _`Inline elements`: emphasis_, strong_, interpreted_, literal_,
  reference_, target_, footnote_reference_, substitution_reference_,
  image_, problematic_


``Node``
========


``Text``
========


``Element``
===========


``TextElement``
===============


-------------------
 Element Reference
-------------------

``document``
============
description

contents

External attributes
-------------------
`Common external attributes`_.


Internal attributes
-------------------
- `Common internal attributes`_.
- ``explicittargets``
- ``implicittargets``
- ``externaltargets``
- ``indirecttargets``
- ``refnames``
- ``anonymoustargets``
- ``anonymousrefs``
- ``autofootnotes``
- ``autofootnoterefs``
- ``reporter``


---------------------
 Attribute Reference
---------------------

External Attributes
===================

Through the `%basic.atts;`_ parameter entity, all elements share the
following _`common external attributes`: id_, name_, dupname_,
source_.


``anonymous``
-------------
The ``anonymous`` attribute


``auto``
--------
The ``auto`` attribute


``dupname``
-----------
The ``dupname`` attribute


``id``
------
The ``id`` attribute


``name``
--------
The ``name`` attribute


``refid``
---------
The ``refid`` attribute


``refname``
-----------
The ``refname`` attribute


``refuri``
----------
The ``refuri`` attribute


``source``
----------
The ``source`` attribute


``xml:space``
-------------
The ``xml:space`` attribute


Internal Attributes
===================

All element objects share the following _`common internal attributes`:
rawsource_, children_, attributes_, tagname_.


------------------------
 DTD Parameter Entities
------------------------

``%basic.atts;``
================
The ``%basic.atts;`` parameter entity lists attributes common to all
elements.  See `Common Attributes`_.


``%body.elements;``
===================
The ``%body.elements;`` parameter entity


``%inline.elements;``
====================
The ``%inline.elements;`` parameter entity


``%reference.atts;``
====================
The ``%reference.atts;`` parameter entity


``%structure.model;``
=====================
The ``%structure.model;`` parameter entity


``%text.model;``
================
The ``%text.model;`` parameter entity


--------------------------------
 Appendix: Miscellaneous Topics
--------------------------------

Representation of Horizontal Rules
==================================

Having added the "horizontal rule" construct to the reStructuredText_
spec, a decision had to be made as to how to reflect the construct in
the implementation of the document tree.  Given this source::

    Document
    ========

    Paragraph

    --------

    Paragraph

The horizontal rule indicates a "transition" (in prose terms) or the
start of a new "division".  Before implementation, the parsed document
tree would be::

    <document>
        <section name="document">
            <title>
                Document
            <paragraph>
                Paragraph
            --------               <--- error here
            <paragraph>
                Paragraph

There are several possibilities for the implementation.  Solution 3
was chosen.

1. Implement horizontal rules as "divisions" or segments.  A
   "division" is a title-less, non-hierarchical section.  The first
   try at an implementation looked like this::

       <document>
           <section name="document">
               <title>
                   Document
               <paragraph>
                   Paragraph
               <division>
                   <paragraph>
                       Paragraph

   But the two paragraphs are really at the same level; they shouldn't
   appear to be at different levels.  There's really an invisible
   "first division".  The horizontal rule splits the document body
   into two segments, which should be treated uniformly.

2. Treating "divisions" uniformly brings us to the second
   possibility::

       <document>
           <section name="document">
               <title>
                   Document
               <division>
                   <paragraph>
                       Paragraph
               <division>
                   <paragraph>
                       Paragraph

   With this change, documents and sections will directly contain
   divisions and sections, but not body elements.  Only divisions will
   directly contain body elements.  Even without a horizontal rule
   anywhere, the body elements of a document or section would be
   contained within a division element.  This makes the document tree
   deeper.  This is similar to the way HTML treats document contents:
   grouped within a <BODY> element.

3. Implement them as "transitions", empty elements::

       <document>
           <section name="document">
               <title>
                   Document
               <paragraph>
                   Paragraph
               <transition>
               <paragraph>
                   Paragraph

   A transition would be a "point element", not containing anything,
   only identifying a point within the document structure.  This keeps
   the document tree flatter, but the idea of a "point element" like
   "transition" smells bad.  A transition isn't a thing itself, it's
   the space between two divisions.

   This solution has been chosen for incorporation into the document
   tree.


.. _Docutils Generic DTD:
.. _docutils.dtd: http://docutils.sourceforge.net/spec/docutils.dtd
.. _reStructuredText:
    http://docutils.sourceforge.net/spec/rst/reStructuredText.html


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:
