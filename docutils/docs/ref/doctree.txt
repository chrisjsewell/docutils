============================
 The Docutils Document Tree
============================

A Guide to the Docutils DTD
***************************

:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:Revision: $Revision$
:Date: $Date$
:Copyright: This document has been placed in the public domain.


.. contents:: :depth: 1


This document describes the XML data structure of Docutils_ documents:
the relationships and semantics of elements and attributes.  The
Docutils document structure is formally defined by the `Docutils
Generic DTD`_ XML document type definition, docutils.dtd_, which is
the definitive source for details of element structural relationships.

This document does not discuss implementation details.  Those can be
found in internal documentation (docstrings) for the
``docutils.nodes`` module, where the document tree data structure is
implemented in a class library.

The reader is assumed to have some familiarity with XML or SGML, and
an understanding of the data structure meaning of "tree".  For a list
of introductory articles, see `Introducing the Extensible Markup
Language (XML)`_.

The reStructuredText_ markup is used for illustrative examples
throughout this document.  For a gentle introduction, see `A
ReStructuredText Primer`_.  For complete technical details, see the
`reStructuredText Markup Specification`_.


.. _Docutils: http://docutils.sourceforge.net/
.. _Docutils Generic DTD:
.. _Docutils DTD:
.. _docutils.dtd: docutils.dtd
.. _Introducing the Extensible Markup Language (XML):
   http://xml.coverpages.org/xmlIntro.html
.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _A ReStructuredText Primer: ../docs/rst/quickstart.html
.. _reStructuredText Markup Specification: rst/reStructuredText.html


-------------------
 Element Hierarchy
-------------------

.. contents:: :local:

Below is a simplified diagram of the hierarchy of elements in the
Docutils document tree structure.  An element may contain any other
elements immediately below it in the diagram.  Notes are written in
square brackets.  Element types in parentheses indicate recursive or
one-to-many relationships; sections may contain (sub)sections, tables
contain further body elements, etc. ::

  +--------------------------------------------------------------------+
  | document  [may begin with a title, subtitle, docinfo, decoration]  |
  |                             +--------------------------------------+
  |                             | sections  [each begins with a title] |
  +-----------------------------+-------------------------+------------+
  | [body elements:]                                      | (sections) |
  |         | - literal | - lists  |       | - hyperlink  +------------+
  |         |   blocks  | - tables |       |   targets    |
  | para-   | - doctest | - block  | foot- | - sub. defs  |
  | graphs  |   blocks  |   quotes | notes | - comments   |
  +---------+-----------+----------+-------+--------------+
  | [text]+ | [text]    | (body elements)  | [text]       |
  | (inline +-----------+------------------+--------------+
  | markup) |
  +---------+

The Docutils document model uses a simple, recursive model for section
structure.  A document_ node may contain body elements and section_
elements.  Sections in turn may contain body elements and sections.
The level (depth) of a section element is determined from its physical
nesting level; unlike other document models (``<h1>`` in HTML_,
``<sect1>`` in DocBook_, ``<div1>`` in XMLSpec_) the level is not
incorporated into the element name.

The Docutils document model uses strict element content models.  Every
element has a unique structure and semantics, but elements may be
classified into general categories (below).  Only elements which are
meant to directly contain text data have a mixed content model, where
text data and inline elements may be intermixed.  This is unlike the
much looser HTML_ document model, where paragraphs and text data may
occur at the same level.


Structural Elements
===================

Structural elements may only contain child elements; they do not
directly contain text data.  Structural elements may contain body
elements or further structural elements.  Structural elements can only
be child elements of other structural elements.

Category members: document_, section_, topic_


Structural Subelements
----------------------

Structural subelements are child elements of structural elements, but
contain no further structure of their own (except for text and inline
elements).

Category members: title_, subtitle_, docinfo_, decoration_,
transition_


Bibliographic Elements
``````````````````````

The docinfo_ element is an optional child of document_.  It groups
bibliographic elements together.

Category members: address_, author_, authors_, contact_, copyright_,
date_, field_, organization_, revision_, status_, version_


Decorative Elements
```````````````````

The decoration_ element is also an optional child of document_.  It
groups together elements used to generate page headers and footers.

Category members: footer_, header_


Body Elements
=============

Body elements are contained within structural elements and compound
body elements.  There are two subcategories of body elements: simple
and compound.

Category members:  attention_, block_quote_, bullet_list_, caution_,
citation_, comment_, danger_, definition_list_, doctest_block_,
enumerated_list_, error_, field_list_, figure_, footnote_, hint_,
image_, important_, line_block_, literal_block_, note_, option_list_,
paragraph_, pending_, raw_, substitution_definition_,
system_message_, table_, target_, tip_, warning_


Simple Body Elements
--------------------

Simple body elements directly are empty or contain text data.  Those
that contain text data may also contain inline elements.  Such
elements therefore have a "mixed content model".

Category members: comment_, doctest_block_, image_, line_block_,
literal_block_, paragraph_, pending_, raw_, substitution_definition_,
target_


Compound Body Elements
----------------------

Compound body elements contain local substructure (body subelements)
and further body elements.  They do not directly contain text data.

Category members: attention_, block_quote_, bullet_list_, caution_,
citation_, danger_, definition_list_, enumerated_list_, error_,
field_list_, figure_, footnote_, hint_, important_, note_,
option_list_, system_message_, table_, tip_, warning_


Body Subelements
````````````````

Compound body elements contain specific subelements (e.g. bullet_list_
contains list_item_).  Subelements may themselves be compound elements
(containing further child elements, like field_) or simple data
elements (containing text data, like field_name_).  These subelements
always occur within specific parent elements, never at the body
element level (beside paragraphs, etc.).

Category members (simple): caption_, classifier_, colspec_,
field_argument_, field_name_, label_, option_argument_,
option_string_, term_

Category members (compound): definition_, definition_list_item_,
description_, entry_, field_, field_body_, legend_, list_item_,
option_, option_group_, option_list_item_, row_, tbody_, tgroup_,
thead_


Inline Elements
===============

Inline elements directly contain text data, and may also contain
further inline elements.  Inline elements are contained within simple
body elements.  Most inline elements have a "mixed content model".

Category members: citation_reference_, emphasis_, footnote_reference_,
generated_, image_, interpreted_, literal_, problematic_, reference_,
strong_, substitution_reference_, target_, raw_


.. _HTML: http://www.w3.org/MarkUp/
.. _DocBook: http://docbook.org/tdg/en/html/docbook.html
.. _XMLSpec: http://www.w3.org/XML/1998/06/xmlspec-report.htm


-------------------
 Element Reference
-------------------

.. contents:: :local:
              :depth: 1

Each element in the DTD (document type definition) is described in its
own section below.  Each section contains an introduction plus the
following subsections:

* Details (of element relationships and semantics):

  - Category: One or more references to the element categories in
    `Element Hierarchy`_ above.  Some elements belong to more than one
    category.

  - Parents: A list of elements which may contain the element.

  - Children: A list of elements which may occur within the element.

  - Analogies: Describes analogous elements in well-known document
    models such as HTML_ or DocBook_.  Lists similarities and
    differences.

  - Processing: Lists formatting or rendering recommendations for the
    element.

* Content Model:

  The formal XML content model from the `Docutils DTD`_, followed by:

  - Attributes: Describes (or refers to descriptions of) the possible
    values and semantics of each attribute.

  - Parameter Entities: Lists the parameter entities which directly or
    indirectly include the element.

* Examples: reStructuredText examples are shown along with
  fragments of the document trees resulting from parsing.
  _`Pseudo-XML` is used for the results of parsing and processing.
  Pseudo-XML is a representation of XML where nesting is indicated by
  indentation and end-tags are not shown.  Some of the precision of
  real XML is given up in exchange for easier readability.  For
  example, the following are equivalent:

  - Real XML::

        <document>
        <section id="a-title" name="a title">
        <title>A Title</title>
        <paragraph>A paragraph.</paragraph>
        </section>
        </document>

  - Pseudo-XML::

        <document>
            <section id="a-title" name="a title">
                <title>
                    A Title
                <paragraph>
                    A paragraph.

--------------------

Many of the element reference sections below are marked "_`to be
completed`".  Please help complete this document by contributing to
its writing.


``address``
===========

The ``address`` element holds the surface mailing address information
for the author (individual or group) of the document, or a third-party
contact address.  Its structure is identical to that of the
line_block_ element: whitespace is significant, especially newlines.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    The following elements may contain ``address``: docinfo_, authors_

Children
    ``address`` elements contain text data plus `inline elements`_.

Analogies
    ``address`` is analogous to the DocBook "address" element.

Processing
    As with the line_block_ element, newlines and other whitespace is
    significant and must be preserved.  However, a monospaced typeface
    need not be used.

    See also docinfo_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``address`` element contains the `common attributes`_ (id_,
    name_, dupname_, source_, and class_), plus `xml:space`_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``address``.
   


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Address: 123 Example Ave.
              Example, EX

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <address>
                123 Example Ave.
                Example, EX

See docinfo_ for a more complete example, including processing
context.


``attention``
=============

`To be completed`_.


``author``
==========

The ``author`` element holds the name of the author of the document.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    The following elements may contain ``author``: docinfo_, authors_

Children
    ``author`` elements may contain text data plus `inline elements`_.

Analogies
    ``author`` is analogous to the DocBook "author" element.

Processing
    See docinfo_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``author`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``author``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Author: J. Random Hacker

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <author>
                J. Random Hacker

See docinfo_ for a more complete example, including processing
context.


``authors``
===========

The ``authors`` element is a container for author information for
documents with multiple authors.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    Only the docinfo_ element contains ``authors``.

Children
    ``authors`` elements may contain the following elements: author_,
    organization_, address_, contact_

Analogies
    ``authors`` is analogous to the DocBook "authors" element.

Processing
    See docinfo_.


Content Model
-------------

.. parsed-literal::

    ((author_, organization_?, address_?, contact_?)+)

Attributes
    The ``authors`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``authors``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Authors: J. Random Hacker; Jane Doe

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <authors>
                <author>
                    J. Random Hacker
                <author>
                    Jane Doe

In reStructuredText, multiple author's names are separated with
semicolons (";") or commas (","); semicolons take precedence.  There
is currently no way to represent the author's organization, address,
or contact in a reStructuredText "Authors" field.

See docinfo_ for a more complete example, including processing
context.


``block_quote``
===============

`To be completed`_.


``bullet_list``
===============

`To be completed`_.


``caption``
===========

`To be completed`_.


``caution``
===========

`To be completed`_.


``citation``
============

`To be completed`_.


``citation_reference``
======================

`To be completed`_.


``classifier``
==============

`To be completed`_.


``colspec``
===========

`To be completed`_.


``comment``
===========

`To be completed`_.


``contact``
===========

The ``contact`` element holds contact information for the author
(individual or group) of the document, or a third-party contact.  It
is typically used for an email or web address.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    The following elements may contain ``contact``: docinfo_, authors_

Children
    ``contact`` elements may contain text data plus `inline
    elements`_.

Analogies
    ``contact`` is analogous to the DocBook "email" element.  The HTML
    "address" element serves a similar purpose.

Processing
    See docinfo_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``contact`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``contact``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Contact: jrh@example.com

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <contact>
                <reference refuri="mailto:jrh@example.com">
                    jrh@example.com

See docinfo_ for a more complete example, including processing
context.


``copyright``
=============

The ``copyright`` element contains the document's copyright statement.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    Only the docinfo_ element contains ``copyright``.

Children
    ``copyright`` elements may contain text data plus `inline
    elements`_.

Analogies
    ``copyright`` is analogous to the DocBook "copyright" element.

Processing
    See docinfo_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``copyright`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``copyright``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Copyright: This document has been placed in the public domain.

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <copyright>
                This document has been placed in the public domain.

See docinfo_ for a more complete example, including processing
context.


``danger``
==========

`To be completed`_.


``date``
========

The ``date`` element contains the date of publication, release, or
last modification of the document.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    Only the docinfo_ element contains ``date``.

Children
    ``date`` elements may contain text data plus `inline elements`_.

Analogies
    ``date`` is analogous to the DocBook "date" element.

Processing
    Often used with the RCS/CVS keyword "Date".  See docinfo_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``date`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``date``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Date: 2002-08-20

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <date>
                2002-08-20

See docinfo_ for a more complete example, including processing
context.


``decoration``
==============

The ``decoration`` element is a container for header_ and footer_
elements and potential future extensions.  These elements are used for
page navigation, notes, time/datestamp, etc.  Currently only the
footer_ element is implemented, populated with processing information
(datestamp, a link to Docutils_, etc.).


Details
-------

Category
    `Structural Subelements`_

Parents
    Only the document_ element contains ``decoration``.

Children
    ``decoration`` elements may contain `decorative elements`_.

Analogies
    There are no direct analogies to ``decoration`` in HTML or DocBook.
    Equivalents are typically constructed from primitives and/or
    generated by the processing system.

Processing
    See the individual `decorative elements`_.

Content Model
-------------

.. parsed-literal::

    (header_?, footer_?)

Although the content model doesn't specifically require contents, no
empty ``decoration`` elements are ever created.

Attributes
    The ``decoration`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.


Examples
--------

reStructuredText source::

    A paragraph.

Complete pseudo-XML_ result after parsing and applying transforms,
assuming that the datestamp command-line option or configuration
setting has been supplied::

    <document>
        <decoration>
            <footer>
                <paragraph>
                    Generated on: 2002-08-20.
        <paragraph>
            A paragraph.


``definition``
==============

`To be completed`_.


``definition_list``
===================

`To be completed`_.


``definition_list_item``
========================

`To be completed`_.


``description``
===============

`To be completed`_.


``docinfo``
===========

The ``docinfo`` element is a container for document bibliographic
data, or meta-data (data about the document).  It corresponds to the
front matter of a book, such as the title page and copyright page.


Details
-------

Category
    `Structural Subelements`_

Parents
    Only the document_ element contains ``docinfo``.

Children
    ``docinfo`` elements contain `bibliographic elements`_.

Analogies
    ``docinfo`` is analogous to DocBook "info" elements ("bookinfo"
    etc.).  There are no directly analogous HTML elements; the "meta"
    element carries some of the same information, albeit invisibly.

Processing
    The ``docinfo`` element may be rendered as a two-column table or
    in other styles.  It may even be invisible or omitted from the
    processed output.  Meta-data may be extracted from ``docinfo``
    children; for example, HTML ``<meta>`` tags may be constructed.

    When Docutils_ transforms a reStructuredText_ field_list_ into a
    ``docinfo`` element (see the examples below), RCS/CVS keywords are
    normally stripped from simple (one paragraph) field bodies.  For
    complete details, please see `RCS Keywords`_ in the
    `reStructuredText Markup Specification`_.

    .. _RCS Keywords: rst/reStructuredText.html#rcs-keywords


Content Model
-------------

.. parsed-literal::

    (`%bibliographic.elements;`_)+

Attributes
    The ``docinfo`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.


Examples
--------

Docinfo is represented in reStructuredText by a field_list_ in a
bibliographic context: the first non-comment element of a document_,
after any document title_/subtitle_.  The field list is transformed
into a ``docinfo`` element and its children by a transform.  Source::

    Docinfo Example
    ===============

    :Author: J. Random Hacker
    :Contact: jrh@example.com
    :Date: 2002-08-18
    :Status: Work In Progress
    :Version: 1
    :Filename: $RCSfile$
    :Copyright: This document has been placed in the public domain.

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="docinfo-example" name="docinfo example">
        <title>
            Docinfo Example
        <docinfo>
            <author>
                J. Random Hacker
            <contact>
                <reference refuri="mailto:jrh@example.com">
                    jrh@example.com
            <date>
                2002-08-18
            <status>
                Work In Progress
            <version>
                1
            <field>
                <field_name>
                    Filename
                <field_body>
                    <paragraph>
                        doctree.txt
            <copyright>
                This document has been placed in the public domain.

Note that "Filename" is a non-standard ``docinfo`` field, so becomes a
generic ``field`` element.  Also note that the "RCSfile" keyword
syntax has been stripped from the "Filename" data.

See field_list_ for an example in a non-bibliographic context.  Also
see the individual examples for the various `bibliographic elements`_.


``doctest_block``
=================

`To be completed`_.


``document``
============

The ``document`` element is the root (topmost) element of the Docutils
document tree.  ``document`` is the direct or indirect ancestor of
every other element in the tree.  It encloses the entire document
tree.  It is the starting point for a document.


Details
-------

Category
    `Structural Elements`_

Parents
    The ``document`` element has no parents.

Children
    ``document`` elements may contain `structural subelements`_,
    `structural elements`_, and `body elements`_.

Analogies
    ``document`` is analogous to the HTML "html" element and to
    several DocBook elements such as "book".


Content Model
-------------

.. parsed-literal::

    ((title_,
      subtitle_?)?,
     docinfo_?,
     decoration_?,
     `%structure.model;`_)

Depending on the source of the data and the stage of processing, the
"document" may not initially contain a "title".  A document title is
not directly representable in reStructuredText_.  Instead, a lone
top-level section may have its title promoted to become the document
title_, and similarly for a lone second-level (sub)section's title to
become the document subtitle_.  The "docinfo_" may be transformed from
an initial field_list_, and "decoration_" is usually constructed
programmatically.

See the `%structure.model;`_ parameter entity for details of the body
of a ``document``.

Attributes
    The ``document`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.


Examples
--------

reStructuredText source::

    A Title
    =======

    A paragraph.

Complete pseudo-XML_ result from simple parsing::

    <document>
        <section id="a-title" name="a title">
            <title>
                A Title
            <paragraph>
                A paragraph.

After applying transforms, the section title is promoted to become the
document title::

    <document id="a-title" name="a title">
        <title>
            A Title
        <paragraph>
            A paragraph.


``emphasis``
============

`To be completed`_.


``entry``
=========

`To be completed`_.


``enumerated_list``
===================

`To be completed`_.


``error``
=========

`To be completed`_.


``field``
=========

`To be completed`_.


``field_argument``
==================

`To be completed`_.


``field_body``
==============

`To be completed`_.


``field_list``
==============

`To be completed`_.


``field_name``
==============

`To be completed`_.


``figure``
==========

`To be completed`_.


``footer``
==========

The ``footer`` element is a container element whose contents are meant
to appear at the bottom of a web page, or repeated at the bottom of
every printed page.  Currently the ``footer`` element may contain
processing information (datestamp, a link to Docutils_, etc.).


Details
-------

Category
    `Decorative Elements`_

Parents
    Only the decoration_ element contains ``footer``.

Children
    ``footer`` elements may contain `body elements`_.

Analogies
    There are no direct analogies to ``footer`` in HTML or DocBook.
    Equivalents are typically constructed from primitives and/or
    generated by the processing system.


Content Model
-------------

.. parsed-literal::

    (`%body.elements;`_)+

Attributes
    The ``footer`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.


Examples
--------

reStructuredText source::

    A paragraph.

Complete pseudo-XML_ result after parsing and applying transforms,
assuming that the datestamp command-line option or configuration
setting has been supplied::

    <document>
        <decoration>
            <footer>
                <paragraph>
                    Generated on: 2002-08-20.
        <paragraph>
            A paragraph.


``footnote``
============

`To be completed`_.


``footnote_reference``
======================

`To be completed`_.


``generated``
=============

`To be completed`_.


``header``
==========

The ``header`` element is a container element whose contents are meant
to appear at the top of a web page, or at the top of every printed
page.  Docutils does not yet make use of the ``header`` element.


Details
-------

Category
    `Decorative Elements`_

Parents
    Only the decoration_ element contains ``header``.

Children
    ``header`` elements may contain `body elements`_.

Analogies
    There are no direct analogies to ``header`` in HTML or DocBook.
    Equivalents are typically constructed from primitives and/or
    generated by the processing system.


Content Model
-------------

.. parsed-literal::

    (`%body.elements;`_)+

Attributes
    The ``header`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.


Examples
--------

None.


``hint``
========

`To be completed`_.


``image``
=========

`To be completed`_.


``important``
=============

`To be completed`_.


``interpreted``
===============

`To be completed`_.


``label``
=========

`To be completed`_.


``legend``
==========

`To be completed`_.


``line_block``
==============

`To be completed`_.


``list_item``
=============

`To be completed`_.


``literal``
===========

`To be completed`_.


``literal_block``
=================

`To be completed`_.


``note``
========

`To be completed`_.


``option``
==========

`To be completed`_.


``option_argument``
===================

`To be completed`_.


``option_group``
================

`To be completed`_.


``option_list``
===============

`To be completed`_.


``option_list_item``
====================

`To be completed`_.


``option_string``
=================

`To be completed`_.


``organization``
================

The ``organization`` element contains the name of document author's
organization, or the organization responsible for the document.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    Only the docinfo_ element contains ``organization``.

Children
    ``organization`` elements may contain text data plus `inline
    elements`_.

Analogies
    ``organization`` is analogous to the DocBook "orgname",
    "corpname", or "publishername" elements.

Processing
    See docinfo_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``organization`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``organization``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Organization: Humankind

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <organization>
                Humankind

See docinfo_ for a more complete example, including processing
context.


``paragraph``
=============

`To be completed`_.


``pending``
===========

`To be completed`_.


``problematic``
===============

`To be completed`_.


``raw``
=======

`To be completed`_.


``reference``
=============

`To be completed`_.


``revision``
============

The ``revision`` element contains the revision number of the document.
It can be used alone or in conjunction with version_.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    Only the docinfo_ element contains ``revision``.

Children
    ``revision`` elements may contain text data plus `inline
    elements`_.

Analogies
    ``revision`` is analogous to but simpler than the DocBook
    "revision" element.  It closely matches the DocBook "revnumber"
    element, but in a simpler context.

Processing
    Often used with the RCS/CVS keyword "Revision".  See docinfo_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``revision`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``revision``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Version: 1
    :Revision: b

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <version>
                1
            <revision>
                b

See docinfo_ for a more complete example, including processing
context.


``row``
=======

`To be completed`_.


``section``
===========

The ``section`` element is the main unit of hierarchy for Docutils
documents.  Docutils ``section`` elements are a recursive structure; a
``section`` may contain other ``section`` elements, without limit.
Paragraphs and other body elements may occur before a ``section``, but
not after it.


Details
-------

Category
    `Structural Elements`_

Parents
    The following elements may contain ``section``: document_,
    section_

Children
    ``section`` elements begin with a title_, and may contain `body
    elements`_, and transition_ and topic_ elements.

Analogies
    ``section`` is analogous to HTML "div" elements and to DocBook
    recursive "section" elements.


Content Model
-------------

.. parsed-literal::

    (title_,
     `%structure.model;`_)

See the `%structure.model;`_ parameter entity for details of the body
of a ``section``.

Attributes
    The ``section`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%section.elements;`_ parameter entity directly includes
    ``section``.  The `%structure.model;`_ parameter entity indirectly
    includes ``section``.


Examples
--------

reStructuredText source::

    Title 1
    =======
    Paragraph 1.
    
    Title 2
    -------
    Paragraph 2.
    
    Title 3
    =======
    Paragraph 3.
    
    Title 4
    -------
    Paragraph 4.

Complete pseudo-XML_ result after parsing::

    <document>
        <section id="title-1" name="title 1">
            <title>
                Title 1
            <paragraph>
                Paragraph 1.
            <section id="title-2" name="title 2">
                <title>
                    Title 2
                <paragraph>
                    Paragraph 2.
        <section id="title-3" name="title 3">
            <title>
                Title 3
            <paragraph>
                Paragraph 3.
            <section id="title-4" name="title 4">
                <title>
                    Title 4
                <paragraph>
                    Paragraph 4.


``status``
==========

The ``status`` element contains a status statement for the document,
such as "Draft", "Final", "Work In Progress", etc.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    Only the docinfo_ element contains ``status``.

Children
    ``status`` elements may contain text data plus `inline elements`_.

Analogies
    ``status`` is analogous to the DocBook "status" element.

Processing
    See docinfo_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``status`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``status``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Status: Work In Progress

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <status>
                Work In Progress

See docinfo_ for a more complete example, including processing
context.


``strong``
==========

`To be completed`_.


``substitution_definition``
===========================

`To be completed`_.


``substitution_reference``
==========================

`To be completed`_.


``subtitle``
============

The ``subtitle`` element stores the subtitle of a document_.


Details
-------

Category
    `Structural Subelements`_

Parents
    Only the document_ element contains ``subtitle``.

Children
    ``subtitle`` elements may contain text data plus `inline
    elements`_.

Analogies
    ``subtitle`` is analogous to HTML header elements ("h2" etc.) and
    to the DocBook "subtitle" element.

Processing
    A document's subtitle is usually rendered smaller than its title_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``subtitle`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.


Examples
--------

reStructuredText source::

    =======
     Title
    =======
    ----------
     Subtitle
    ----------

    A paragraph.

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="title" name="title">
        <title>
            Title
        <subtitle id="subtitle" name="subtitle">
            Subtitle
        <paragraph>
            A paragraph.

Note how two section levels have collapsed, promoting their titles to
become the document's title and subtitle.  Since there is only one
structural element (document), the subsection's ``id`` and ``name``
attributes are stored in the ``subtitle`` element.


``system_message``
==================

`To be completed`_.


``table``
=========

`To be completed`_.


``target``
==========

`To be completed`_.


``tbody``
=========

`To be completed`_.


``term``
========

`To be completed`_.


``tgroup``
==========

`To be completed`_.


``thead``
=========

`To be completed`_.


``tip``
=======

`To be completed`_.


``title``
=========

The ``title`` element stores the title of a document_, section_, or
topic_.


Details
-------

Category
    `Structural Subelements`_

Parents
    The following elements may contain ``title``: document_, section_,
    topic_

Children
    ``title`` elements may contain text data plus `inline elements`_.

Analogies
    ``title`` is analogous to HTML "title" and header ("h1" etc.)
    elements, and to the DocBook "title" element.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``title`` element contains the `common attributes`_ (id_,
    name_, dupname_, source_, and class_), plus refid_ and auto_.

    ``refid`` is used as a backlink to a table of contents entry.

    ``auto`` is used to indicate (with value "1") that the ``title``
    has been numbered automatically.


Examples
--------

reStructuredText source::

    A Title
    =======

    A paragraph.

Pseudo-XML_ fragment from simple parsing::

    <section id="a-title" name="a title">
        <title>
            A Title
        <paragraph>
            A paragraph.


``topic``
=========

`To be completed`_.


``transition``
==============

`To be completed`_.


``version``
===========

The ``version`` element contains the version number of the document.
It can be used alone or in conjunction with revision_.


Details
-------

Category
    `Bibliographic Elements`_

Parents
    Only the docinfo_ element contains ``version``.

Children
    ``version`` elements may contain text data plus `inline
    elements`_.

Analogies
    ``version`` may be considered analogous to the DocBook "revision",
    "revnumber", or "biblioid" elements.

Processing
    Sometimes used with the RCS/CVS keyword "Revision".  See docinfo_
    and revision_.


Content Model
-------------

.. parsed-literal::

    `%text.model;`_

Attributes
    The ``version`` element contains only the `common attributes`_:
    id_, name_, dupname_, source_, and class_.

Parameter Entities
    The `%bibliographic.elements;`_ parameter entity directly includes
    ``version``.


Examples
--------

reStructuredText source::

    Document Title
    ==============

    :Version: 1.1

Complete pseudo-XML_ result after parsing and applying transforms::

    <document id="document-title" name="document title">
        <title>
            Document Title
        <docinfo>
            <version>
                1.1

See docinfo_ for a more complete example, including processing
context.


``warning``
===========

`To be completed`_.


---------------------
 Attribute Reference
---------------------

.. contents:: :local:
              :depth: 1

_`Common Attributes`: Through the `%basic.atts;`_ parameter entity,
all elements contain the following attributes: id_, name_, dupname_,
source_, and class_.

.. _attribute type:

Attribute types:

``CDATA``
    Character data.  ``CDATA`` attributes may contain arbitrary text.

``ID``
    Like a ``NMTOKEN``, but it must begin with a letter (a "name
    production").  Identical ``ID`` values must not appear more than
    once in a document; i.e., ID values must uniquely identify their
    elements.

``IDREF``
    A reference to an ``ID`` value (a name production) of another
    element.

``IDREFS``
    One or more space-separated ``ID`` references (name productions).

``NMTOKEN``
    A "name token".  One or more of letters, digits, ".", "-", and
    "_".

``NMTOKENS``
    One or more space-separated ``NMTOKEN`` names.

``%yesorno;``
    No if zero ("0"), yes if any other value.  This is a parameter
    entity which resolves to a ``NMTOKEN`` attribute type.

``%number;``
    This emphasizes that the attribute value must be a number.  This
    is a parameter entity which resolves to a ``NMTOKEN`` attribute
    type.


``anonymous``
=============

`Attribute type`_: ``%yesorno;``.  Default value: none (implies no).

The ``anonymous`` attribute is used for unnamed hyperlinks in the
target_ and reference_ elements.


``auto``
========

`Attribute type`_: ``CDATA``.  Default value: none.

The ``auto`` attribute is used to indicate an automatically-numbered
footnote_, footnote_reference_ or title_.


``backrefs``
============

`Attribute type`_: ``IDREFS``.  Default value: none.

The ``backrefs`` attribute contains a space-separated list of id_
references, used for backlinks from footnote_, citation_, and
system_message_ elements.


``class``
=========

`Attribute type`_: ``NMTOKENS``.  Default value: none.

The ``class`` attribute contains one or more names used to classify an
element.  It can be used to carry context forward between a Docutils
Reader and Writer, when a custom structure is reduced to a
standardized document tree.  ``class`` is one of the `common
attributes`_, shared by all Docutils elements.


``dupname``
===========

`Attribute type`_: ``NMTOKENS``.  Default value: none.

The ``dupname`` attribute contains the name of an element when there
has been a naming conflict.  The contents of the ``dupname`` attribute
would have been transferred from the `name`_ attribute.  An element
may have at most one of the ``name`` or ``dupname`` attributes, but
not both.  ``dupname`` is one of the `common attributes`_, shared by
all Docutils elements.


``id``
======

`Attribute type`_: ``ID``.  Default value: none.

The ``id`` attribute contains a unique identifier key.  ``id`` is one
of the `common attributes`_, shared by all Docutils elements.


``name``
========

`Attribute type`_: ``NMTOKENS``.  Default value: none.

The ``name`` attribute contains the name of an element, typically
originating from the element's title or content.  ``name`` must be
unique; if there are name conflicts (two or more elements want to the
same name), the contents will be transferred to the `dupname`_
attribute on the duplicate elements.  An element may have at most one
of the ``name`` or ``dupname`` attributes, but not both.  ``name`` is
one of the `common attributes`_, shared by all Docutils elements.


``refid``
=========

`Attribute type`_: ``IDREF``.  Default value: none.

The ``refid`` attribute contains references to `id`_ attributes in
other elements.  It is used by the target_, reference_,
footnote_reference_, citation_reference_, title_ and problematic_
elements.


``refname``
===========

`Attribute type`_: ``NMTOKENS``.  Default value: none.

The ``refname`` attribute contains an internal reference to the
`name`_ attribute of another element.  On a `target`_ element,
``refname`` indicates an indirect target which may resolve to either
an internal or external reference.  ``refname`` is used by the
target_, reference_, footnote_reference_, citation_reference_, and
substitution_reference_ elements.


``refuri``
==========

`Attribute type`_: ``CDATA``.  Default value: none.

The ``refuri`` attribute contains an external reference to a URI/URL.
It is used by the target_, reference_, footnote_reference_, and
citation_reference_ elements.


``source``
==========

`Attribute type`_: ``CDATA``.  Default value: none.

The ``source`` attribute is used to store the path or URL to the
source text that was used to produce the document tree.  It is one of
the `common attributes`_, shared by all Docutils elements.


``xml:space``
=============

`Attribute type`_: one of "default" or "preserve".  Default value:
"preserve" (fixed).

The ``xml:space`` attribute is a standard XML attribute for
whitespace-preserving elements.  It is used by the literal_block_,
line_block_, doctest_block_, comment_, and raw_ elements.  It is a
fixed attribute, meant to communicate to an XML parser that the
element contains significant whitespace.  The attribute value should
not be set in a document instance.


--------------------
 Parameter Entities
--------------------

.. contents:: :local:
              :depth: 1

Parameter entities are used to simplify the DTD (to share definitions
and reduce duplication) and to allow the DTD to be customized by
wrapper DTDs (external client DTDs that use or import the Docutils
DTD).  Parameter entities may be overridden by wrapper DTDs, replacing
the definitions below with custom definitions.  Parameter entities
whose names begin with "additional" are meant to allow easy extension
by wrapper DTDs.


``%anonymous.att;``
===================

The ``%anonymous.att;`` parameter entity contains the anonymous_
attribute, used for unnamed hyperlinks.

Entity definition:

.. parsed-literal::

    anonymous_ %yesorno; #IMPLIED


``%auto.att;``
==============

The ``%auto.att;`` parameter entity contains the auto_ attribute, used
to indicate an automatically-numbered footnote or title.

Entity definition:

.. parsed-literal::

    auto_     CDATA     #IMPLIED


``%backrefs.att;``
==================

The ``%backrefs.att;`` parameter entity contains the backrefs_
attribute, a space-separated list of id references, for backlinks.

Entity definition:

.. parsed-literal::

    backrefs_  IDREFS    #IMPLIED


``%basic.atts;``
================

The ``%basic.atts;`` parameter entity lists attributes common to all
elements.  See `Common Attributes`_.

Entity definition:

.. parsed-literal::

    id_       ID        #IMPLIED
    name_     NMTOKENS  #IMPLIED
    dupname_  NMTOKENS  #IMPLIED
    source_   CDATA     #IMPLIED
    class_    NMTOKENS  #IMPLIED
    %additional.basic.atts;

The ``%additional.basic.atts;`` parameter entity can be used by
wrapper DTDs to extend ``%basic.atts;``.


``%bibliographic.elements;``
============================

The ``%bibliographic.elements;`` parameter entity contains an OR-list of all
`bibliographic elements`_.

Entity definition:

.. parsed-literal::

    author_ | authors_ | organization_ | contact_ | address_
    | version_ | revision_ | status_ | date_ | copyright_
    | field_
    %additional.bibliographic.elements;

The ``%additional.bibliographic.elements;`` parameter entity can be used by
wrapper DTDs to extend ``%bibliographic.elements;``.


``%body.elements;``
===================

The ``%body.elements;`` parameter entity contains an OR-list of all
`body elements`_.  ``%body.elements;`` is itself contained within the
`%structure.model;`_ parameter entity.

Entity definition:

.. parsed-literal::

    paragraph_ | literal_block_ | doctest_block_ | line_block_
    | block_quote_ | table_ | figure_ | image_ | footnote_ | citation_
    | bullet_list_ | enumerated_list_ | definition_list_ | field_list_
    | option_list_
    | attention_ | caution_ | danger_ | error_ | hint_ | important_
    | note_ | tip_ | warning_
    | target_ | substitution_definition_ | comment_ | pending_
    | system_message_ | raw_
    %additional.body.elements;

The ``%additional.body.elements;`` parameter entity can be used by
wrapper DTDs to extend ``%body.elements;``.


``%fixedspace.att;``
====================

The ``%fixedspace.att;`` parameter entity contains the `xml:space`_
attribute, a standard XML attribute for whitespace-preserving
elements.

Entity definition:

.. parsed-literal::

    `xml:space`_ (default | preserve) #FIXED 'preserve'


``%inline.elements;``
=====================

The ``%inline.elements;`` parameter entity contains an OR-list of all
`inline elements`_.

Entity definition:

.. parsed-literal::

    emphasis_ | strong_ | interpreted_ | literal_
    | reference_ | footnote_reference_ | citation_reference_
    | substitution_reference_ | problematic_ | generated_
    | target_ | image_ | raw_
    %additional.inline.elements;

The ``%additional.inline.elements;`` parameter entity can be used by
wrapper DTDs to extend ``%inline.elements;``.


``%reference.atts;``
====================

The ``%reference.atts;`` parameter entity groups together the refuri_,
refid_, and refname_ attributes.

Entity definition:

.. parsed-literal::

    `%refuri.att;`_
    `%refid.att;`_
    `%refname.att;`_
    %additional.reference.atts;

The ``%additional.reference.atts;`` parameter entity can be used by
wrapper DTDs to extend ``%additional.reference.atts;``.


``%refid.att;``
================

The ``%refid.att;`` parameter entity contains the refid_ attribute, an
internal reference to the `id`_ attribute of another element.

Entity definition:

.. parsed-literal::

    refid_   CDATA     #IMPLIED


``%refname.att;``
=================

The ``%refname.att;`` parameter entity contains the refname_
attribute, an internal reference to the `name`_ attribute of another
element.  On a `target`_ element, ``refname`` indicates an indirect
target which may resolve to either an internal or external
reference.

Entity definition:

.. parsed-literal::

    refname_  NMTOKENS  #IMPLIED


``%refuri.att;``
================

The ``%refuri.att;`` parameter entity contains the refuri_ attribute,
an external reference to a URI/URL.

Entity definition:

.. parsed-literal::

    refuri_   CDATA     #IMPLIED


``%section.elements;``
======================

The ``%section.elements;`` parameter entity contains an OR-list of all
section_-equivalent elements.  ``%section.elements;`` is itself
contained within the `%structure.model;`_ parameter entity.

Entity definition:

.. parsed-literal::

    section_
    %additional.section.elements;

The ``%additional.section.elements;`` parameter entity can be used
by wrapper DTDs to extend ``%section.elements;``.


``%structure.model;``
=====================

The ``%structure.model;`` parameter entity is used by document_ and
section_ elements.  It encapsulates the hierarchical structure of a
document and of its constituent parts.  See the discussion of the
`element hierarchy`_ above.

Entity definition:

.. parsed-literal::

    ( ( (`%body.elements;`_ | topic_)+,
        (transition_, (`%body.elements;`_ | topic_)+ )*,
        (`%section.elements;`_)* )
    | (`%section.elements;`_)+ )

Each document_ or section_ contains either:

- multiple body elements and/or topics, optionally interspersed with
  transitions (but transitions cannot occur at the beginning or end,
  nor may there be two transitions in a row), followed by zero or more
  sections; or

- one or more sections (whose contents are recursively the same as this
  model).


``%text.model;``
================

The ``%text.model;`` parameter entity is used by many elements to
represent text data mixed with `inline elements`_.

Entity definition:

.. parsed-literal::

    (#PCDATA | `%inline.elements;`_)*


----------------------
 Miscellaneous Topics
----------------------

Representation of Horizontal Rules
==================================

Having added the "horizontal rule" construct to the `reStructuredText
Markup Specification`_, a decision had to be made as to how to reflect
the construct in the implementation of the document tree.  Given this
source::

    Document
    ========

    Paragraph 1

    --------

    Paragraph 2

The horizontal rule indicates a "transition" (in prose terms) or the
start of a new "division".  Before implementation, the parsed document
tree would be::

    <document>
        <section name="document">
            <title>
                Document
            <paragraph>
                Paragraph 1
            --------               <--- error here
            <paragraph>
                Paragraph 2

There are several possibilities for the implementation:

1. Implement horizontal rules as "divisions" or segments.  A
   "division" is a title-less, non-hierarchical section.  The first
   try at an implementation looked like this::

       <document>
           <section name="document">
               <title>
                   Document
               <paragraph>
                   Paragraph 1
               <division>
                   <paragraph>
                       Paragraph 2

   But the two paragraphs are really at the same level; they shouldn't
   appear to be at different levels.  There's really an invisible
   "first division".  The horizontal rule splits the document body
   into two segments, which should be treated uniformly.

2. Treating "divisions" uniformly brings us to the second
   possibility::

       <document>
           <section name="document">
               <title>
                   Document
               <division>
                   <paragraph>
                       Paragraph 1
               <division>
                   <paragraph>
                       Paragraph 2

   With this change, documents and sections will directly contain
   divisions and sections, but not body elements.  Only divisions will
   directly contain body elements.  Even without a horizontal rule
   anywhere, the body elements of a document or section would be
   contained within a division element.  This makes the document tree
   deeper.  This is similar to the way HTML_ treats document contents:
   grouped within a ``<body>`` element.

3. Implement them as "transitions", empty elements::

       <document>
           <section name="document">
               <title>
                   Document
               <paragraph>
                   Paragraph 1
               <transition>
               <paragraph>
                   Paragraph 2

   A transition would be a "point element", not containing anything,
   only identifying a point within the document structure.  This keeps
   the document tree flatter, but the idea of a "point element" like
   "transition" smells bad.  A transition isn't a thing itself, it's
   the space between two divisions.  However, transitions are a
   practical solution.

Solution 3 was chosen for incorporation into the document tree model.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:
