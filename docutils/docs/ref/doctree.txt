============================
 The Docutils Document Tree
============================
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:Revision: $Revision$
:Date: $Date$

.. contents:: :depth: 1

This document describes the XML data structure of Docutils documents,
the relationships and semantics of elements.  The Docutils document
structure is formally defined by the `Docutils Generic DTD`_ XML
document type definition, docutils.dtd_, which is the definitive
source for details of element structural relationships.

The data structure is implemented by the class library in the
``docutils.nodes`` module.  This document does not discuss
implementation details; they can be found in documentation for the
``docutils.nodes`` module (docstrings).

The reader is assumed to have some familiarity with XML or SGML, and
an understanding the data structure meaning of "tree".  For a list of
introductory articles, see `Introducing the Extensible Markup Language
(XML)`_.

.. _Docutils Generic DTD:
.. _docutils.dtd: http://docutils.sourceforge.net/spec/docutils.dtd
.. _Introducing the Extensible Markup Language (XML):
   http://xml.coverpages.org/xmlIntro.html

-------------------
 Element Hierarchy
-------------------

Below is a simplified diagram of the hierarchy of elements in the
Docutils document tree structure.  An element may contain any other
elements immediately below it in the diagram.  Text in square brackets
are notes.  Element types in parentheses indicate recursive or
one-to-many relationships; sections may contain (sub)sections, tables
contain further body elements, etc. ::

  +--------------------------------------------------------------------+
  | document  [may begin with a title, subtitle, docinfo, decoration]  |
  |                             +--------------------------------------+
  |                             | sections  [each begins with a title] |
  +-----------------------------+-------------------------+------------+
  | [body elements:]                                      | (sections) |
  |         | - literal | - lists  |       | - hyperlink  +------------+
  |         |   blocks  | - tables |       |   targets    |
  | para-   | - doctest | - block  | foot- | - sub. defs  |
  | graphs  |   blocks  |   quotes | notes | - comments   |
  +---------+-----------+----------+-------+--------------+
  | [text]+ | [text]    | (body elements)  | [text]       |
  | (inline +-----------+------------------+--------------+
  | markup) |
  +---------+

The Docutils document model uses a simple, recursive model for section
structure.  A document_ node may contain body elements and section_
elements.  Sections in turn may contain body elements and sections.
The level (depth) of a section element is determined from its physical
nesting level; unlike other document models (``<h1>`` in HTML_,
``<sect1>`` in DocBook_, ``<div1>`` in XMLSpec_) the level is not
incorporated into the element name.

The Docutils document model uses strict element content models.  Every
element has a unique structure and semantics, but elements may be
classified into general categories:

* _`Structural elements` (document_, section_, and topic_) may only
  contain child elements; they do not directly contain text data.
  Child elements of structural elements may be body elements or other
  structural elements.  Structural elements can only be child elements
  of other structural elements.

* _`Body elements` are contained within structural elements and
  compound body elements.  There are two subcategories of body
  elements:

  - _`Compound body elements` (like table_ and bullet_list_) contain
    local substructure and further body elements.  They do not
    directly contain text data.

  - _`Simple body elements` (like paragraph_ and literal_block)
    directly contain text data, and may also contain inline elements.
    Some simple body elements have a "mixed content model".

* _`Inline elements` (like emphasis_ and reference_) directly contain
  text data, and may also contain inline elements.  Inline elements
  are contained within simple body elements.  Inline elements have a
  "mixed content model".

Only elements which are meant to directly contain text data have a
mixed content model, where text data and elements may be intermixed.
This is unlike the HTML_ document model, where paragraphs and text
data may occur at the same level.

.. _HTML: http://www.w3.org/MarkUp/
.. _DocBook: http://docbook.org/tdg/en/html/docbook.html
.. _XMLSpec: http://www.w3.org/XML/1998/06/xmlspec-report.htm


-------------------
 Element Reference
-------------------

.. contents::
   :local:
   :depth: 1

Each element in the document tree model is described in its own
section below.  Each section contains the following subsections:

* Description: The semantics of the element.

  - Parents: A list of elements which may contain the element.

  - Children: A list of elements which may occur within the element.

  - Analogies: Describes analogous elements in well-known document
    models such as HTML_ or DocBook_.  Lists similarities and
    differences.

  - Processing Expectations: Lists formatting or rendering
    expectations for the element.

* Content Model: the content model of the element from the `Docutils
  DTD`_.

  - Attributes: Describes the possible values and semantics of each
    attribute.  Common attributes are described via references.

  - Parameter Entities: Lists the parameter entities in which the
    element described appears.

* Example: Where possible, a reStructuredText example is shown along
  with a fragment of the document tree resulting from parsing.  


``document``
============

Description
-----------

The ``document`` element is the root (topmost) element of the Docutils
document tree.  ``document`` is the direct or indirect ancestor of
every other element in the tree.


Content Model
-------------

.. parsed-literal::

    ((title_,
      subtitle_?)?, 
     docinfo_?, 
     decoration_?, 
     `%structure.model;`_)


Attributes
``````````

`Common external attributes`_.


Example
-------


---------------------
 Attribute Reference
---------------------

.. contents::
   :local:
   :depth: 1

Through the `%basic.atts;`_ parameter entity, all elements share the
following _`common external attributes`: id_, name_, dupname_,
source_, class_.


``anonymous``
=============

The ``anonymous`` attribute


``auto``
========

The ``auto`` attribute


``class``
=========

The ``class`` attribute


``dupname``
===========

The ``dupname`` attribute


``id``
======

The ``id`` attribute


``name``
========

The ``name`` attribute


``refid``
=========

The ``refid`` attribute


``refname``
===========

The ``refname`` attribute


``refuri``
==========

The ``refuri`` attribute


``source``
==========

The ``source`` attribute


``xml:space``
=============

The ``xml:space`` attribute


------------------------
 DTD Parameter Entities
------------------------

.. contents::
   :local:
   :depth: 1


``%basic.atts;``
================

The ``%basic.atts;`` parameter entity lists attributes common to all
elements.  See `Common Attributes`_.


``%body.elements;``
===================

The ``%body.elements;`` parameter entity


``%inline.elements;``
=====================

The ``%inline.elements;`` parameter entity


``%reference.atts;``
====================

The ``%reference.atts;`` parameter entity


``%structure.model;``
=====================

The ``%structure.model;`` parameter entity


``%text.model;``
================

The ``%text.model;`` parameter entity


----------------------
 Miscellaneous Topics
----------------------

.. contents::
   :local:
   :depth: 1


Representation of Horizontal Rules
==================================

Having added the "horizontal rule" construct to the reStructuredText_
spec, a decision had to be made as to how to reflect the construct in
the implementation of the document tree.  Given this source::

    Document
    ========

    Paragraph 1

    --------

    Paragraph 2

The horizontal rule indicates a "transition" (in prose terms) or the
start of a new "division".  Before implementation, the parsed document
tree would be::

    <document>
        <section name="document">
            <title>
                Document
            <paragraph>
                Paragraph 1
            --------               <--- error here
            <paragraph>
                Paragraph 2

There are several possibilities for the implementation:

1. Implement horizontal rules as "divisions" or segments.  A
   "division" is a title-less, non-hierarchical section.  The first
   try at an implementation looked like this::

       <document>
           <section name="document">
               <title>
                   Document
               <paragraph>
                   Paragraph 1
               <division>
                   <paragraph>
                       Paragraph 2

   But the two paragraphs are really at the same level; they shouldn't
   appear to be at different levels.  There's really an invisible
   "first division".  The horizontal rule splits the document body
   into two segments, which should be treated uniformly.

2. Treating "divisions" uniformly brings us to the second
   possibility::

       <document>
           <section name="document">
               <title>
                   Document
               <division>
                   <paragraph>
                       Paragraph 1
               <division>
                   <paragraph>
                       Paragraph 2

   With this change, documents and sections will directly contain
   divisions and sections, but not body elements.  Only divisions will
   directly contain body elements.  Even without a horizontal rule
   anywhere, the body elements of a document or section would be
   contained within a division element.  This makes the document tree
   deeper.  This is similar to the way HTML_ treats document contents:
   grouped within a ``<body>`` element.

3. Implement them as "transitions", empty elements::

       <document>
           <section name="document">
               <title>
                   Document
               <paragraph>
                   Paragraph 1
               <transition>
               <paragraph>
                   Paragraph 2

   A transition would be a "point element", not containing anything,
   only identifying a point within the document structure.  This keeps
   the document tree flatter, but the idea of a "point element" like
   "transition" smells bad.  A transition isn't a thing itself, it's
   the space between two divisions.  However, transitions are a
   practical solution.

Solution 3 was chosen for incorporation into the document tree model.

.. _reStructuredText:
    http://docutils.sourceforge.net/spec/rst/reStructuredText.html


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:
