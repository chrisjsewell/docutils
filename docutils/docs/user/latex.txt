================================
 Generating LaTeX with Docutils
================================

:Author: Engelbert Gruber, Guenter Milde
:Contact: docutils-users@lists.sourceforge.net
:Revision: $Revision$
:Date: $Date$
:Copyright: This document has been placed in the public domain.

.. contents::

Introduction
============

Producing LaTeX code from reST input can be done in at least two ways:

treat LaTeX as a document format (like HTML):
   Transform the internal markup into corresponding LaTeX markup.
   For example, a section title would be written with the LaTeX section
   command: ``\section{this section title}``.

   This keeps the document structure and semantic markup produing a readable
   LaTeX file, but may require hacking around bugs/features in LaTeX.

   If you prefer this approach, try ``rst2latex.py``.

treat LaTeX as a page description format (like Postscript):
   Use LaTeX as a typesetting system to produce the desired output
   without bothering with the usual LaTeX idioms for representing
   document structure information.
   This will work around Docutils-incompatible features and bugs in LaTeX
   but it produces a hard to read LaTeX file.

   ``rst2newlatex.py`` adds a lot of LaTeX macros and uses LaTeX as a
   typesetter without caring about producing readable LaTeX files.

This documents describes the `latex2e` writer called by the front end
``rst2latex.py``.

PDF generation
==============

In many cases, LaTeX code is not the desired end-format of the document.
LaTeX offers four ways to generate PDF documents from the LaTeX source:

pdflatex
  Generates a PDF document directly from the LaTeX file. As always one
  might need to call it twice (thrice) to get internal references correct.

latex dvipdfm
  Use ``latex`` to generate a DVI file and ``dvipdfm`` to produce a PDF
  file. If you will take this approach, add ``dvipdfm`` to the
  ``--documentoptions``.

latex dvips ps2pdf
  Produce a DVI file with ``latex``, postscript with ``dvips`` and PDF with
  ``ps2pdf``.

xetex
  The `XeTeX`_ engine works with input files in UTF-8 encoding and system
  fonts. It is currently not supported by Docutils.

The Rubber_ wrapper for LaTeX and friends can be used to automatically run
all programs the required number of times and delete "spurious" files.

.. _Rubber: http://iml.univ-mrs.fr/~beffara/soft/rubber/


Specialities of the LaTeX format
================================

Length units
------------

LaTeX knows about all the `length units`_ supported by Docutils plus the
following less common units:

:pt: typewriter's (or LaTeX) point (1 pt = 1/72.27 in)
:dd: didôt (1 dd = 1238/1157 pt)
:cc: cîcero (1 cc = 12 dd)
:sp: scaled point (1sp = 1/65536pt)

.. attention:: Different definitions of the unit "pt"!

   * In Docutils (as well as CSS) the unit symbol "pt" denotes the
     `Postscript point` or `DTP point`.

   * LaTeX uses "pt" for the `LaTeX point`, which is unknown to Docutils and
     0.3 % smaller.

   * The `DTP point` is available in LaTeX as "bp" (big point):

       1 pt = 1/72.25 in < 1 bp  = 1/72 in

   Lengths specified in the document with unit "pt" will be written with
   unit "bp" to the LaTeX source.

   In `raw LaTeX`_ and `custom style sheets`_, the `DTP point` must be
   specified as "bp", while "pt" is interpreted as `LaTeX point`.

.. _length units: ../ref/rst/restructuredtext.html#length-units

For more on lengths in LaTeX, see e.g.
http://www.giss.nasa.gov/tools/latex/ltx-86.html.

default length unit
```````````````````

The default length unit (added to length specifications without unit) is the
"DTP point" ("bp" in LaTeX notification).

size of a pixel (length unit ``px``)
````````````````````````````````````

The length unit ``px`` is a "relative length" whose "real" value depends on
the "resolution" of the output device (usually specified in "dots per inch"
(DPI):

  :CSS:      px: pixels, relative to the viewing device:

	     Pixel units are relative to the resolution of the viewing
	     device, i.e., most often a computer display. If the pixel
	     density of the output device is very different from that of a
	     typical computer display, the user agent should rescale pixel
	     values. It is recommended that the pixel unit refer to the
	     whole number of device pixels that best approximates the
	     reference pixel. It is recommended that the reference pixel be
	     the visual angle of one pixel on a device with a pixel density
	     of 96dpi and a distance from the reader of an arm's length. For
	     a nominal arm's length of 28 inches, the visual angle is
	     therefore about 0.0213 degrees.

             For reading at arm's length, 1px thus corresponds to about 0.26
	     mm (1/96 inch). When printed on a laser printer, meant for
	     reading at a little less than arm's length (55 cm, 21 inches),
	     1px is about 0.20 mm. On a 300 dots-per-inch (dpi) printer,
	     that may be rounded up to 3 dots (0.25 mm); on a 600 dpi
	     printer, it can be rounded to 5 dots.

	     -- http://www.w3.org/TR/CSS2/syndata.html#length-units

  :browsers: use the actual screen resolution (or what they think it is)
             (usually between 72 DPI and 100 DPI).

  :pdftex:   Generally, the resolution of the output device (printer,
	     screen (for PDF-viewer) is not known.

  	     Defaults to a resolution of 72 DPI, i.e. 1 px = 1/72 in.

The latex writer keeps length values with unit px as relative, the
"resolution" can be configured in a stylesheet or

Example:
  Set a resolution of 92 DPI::

       \pdfpxdimen=1in % 1 DPI
       \divide\pdfpxdimen by 92 % 92 DPI

images
------

Images__ are included in LaTeX with the help of the `graphicx` package. The
supported file formats depend on the used driver (latex, pdftex, xetex) and
output format (DVI, PS, PDF).
For details see the grfguide_.

__ ../ref/rst/directives.html#images
.. _grfguide:
   http://dante.ctan.org/CTAN/macros/latex/required/graphics/grfguide.pdf


Docutils special LaTeX macros
-----------------------------

Some Docutils objects have no LaTeX counterpart, they will be typeset using
a Docutils specific LaTeX macro. The specific commands, environments, and
lengths allow layout changes from the `style sheet`_ or with `raw LaTeX`_.
By convention, these special definitions use the prefix ``\DU``\ [#]_.

The generated LaTeX documents should be kept processable by a standard LaTeX
installation. Therefore fallback definitions are included after the custom
style sheet, if the macro is needed in the document.

* `Custom style sheets`_ can define alternative implementations with
  ``\newcommand``, ``\newenvironment``, and ``\newlength`` plus
  ``\setlength``.

* Definitions with `raw LaTeX`_ are part of the document body. Use
  ``\def``, ``\renewcommand`` or ``\renewenvironment``, and ``\setlength``.

.. [#] for Documentation Utilities = Docutils



Configuration
=============

Configuration can be done via configuration options_ to the Docutils tool,
`custom style sheets`_ and LaTeX packages, as well as `raw LaTeX`_ in the
document.

Options
-------

The LaTeX code generation can be configured via options to the Docutils
latex writer given as

command-line options
  to the conversion command (run ``rst2latex.py --help`` to get a list of
  available options), or

configuration settings
  in a configuration file (see `Docutils Configuration`_ for details).

.. _Docutils Configuration:
   ../user/config.html

.. _style sheet:

Custom style sheets
-------------------

LaTeX style sheets can be used to configure the look of the printout/PDF by
(re-)defining LaTeX-commands and settings.

The option::

  --stylesheet=STYLESHEET

references STYLESHEET using the command ``\usepackage`` if STYLESHEET has no
extension or the extension ``.sty`` (the extension will be dropped). With
any other extension, the command ``\input`` is used.

It is possible to specify multiple style sheets (see examples below).

.. note::
  There is no need to specify a path, if your style files are installed
  in the `TeX input path`_.

If the ``--embed-stylesheet`` option is set, the content of every STYLESHEET
is inserted instead. Currently, this fails if the file is not available via
the given path (i.e. without search in the `TeX input path`_).

Examples:

* Times Roman fonts with `mathptmx` package::

    --stylesheet==mathptmx

  or ::

    --stylesheet==mathptmx.sty

* Input ``preamble.tex``::

   --stylesheet==preamble.tex

* Use three style sheets: `mathptmx` Times fonts,
  `parskip`  separate paragraphs by vertical space,
  `preamble.tex` home-made custom style sheet::

    --stylesheet==mathptmx,parskip,preamble.tex

Stylesheet Repository
  There is a `repository of user-contributed style
  sheets`_ in the Docutils Sandbox_.

.. _TeX input path:
   http://www.tex.ac.uk/cgi-bin/texfaq2html?label=what-TDS
.. _repository of user-contributed style sheets:
   ../../../sandbox/stylesheets/
.. _sandbox: ../../../sandbox/


Raw LaTeX
---------

By means of the `raw directive`_ one can give commands directly to LaTeX.

This can be both, styling and printing commands, as LaTeX (unlike HTML/CSS)
uses one common language for content and style.

Examples:

* Amost all examples for the `style sheet`_ will also work as raw LaTeX
  inside the document. An exception are commands that need to be given in
  the document preamble (e.g. package loading with ``\usepackage``, which
  can be achieved with the ``--style-sheet`` command line option instead).

* Forcing a page break::

    .. raw:: latex

       \newpage

* Math formula::

    .. raw:: latex

       \[x^3 + 3x^2a + 3xa^2 + a^3,\]

  (Drawback: the formula will be invisible in other output formats.)

* Making a "colorbox": If someone wants to get a red background for a
  text block, she/he can define ``\definecolor{bg}{rgb}{.9,0,0}`` in a custom
  `style sheet`_ and in the document do something like this::

    |begincolorbox|
    Nobody expects the Spanish inquisition.
    |endcolorbox|

    .. |begincolorbox| raw:: latex

       \\begin{center}
       \\colorbox{bg}{
       \\parbox{0.985\\linewidth}{

    .. |endcolorbox| raw:: latex

       }}
       \\end{center}

.. _raw directive:
   ../ref/rst/directives.html#raw


How to configure the ...
------------------------

admonitions
```````````

Admonitions__ are specially marked "topics" that can appear anywhere an
ordinary body element can.

Command:
  ``\DUadmonition``

Default:
  Typeset in a frame (90 % of text width).

Example:
  use sans-serif font and 95 % of text widht::

    \newcommand{\DUadmonition}[1]{%
      \begin{center}
        \fbox{\parbox{0.95\textwidth}{\textsf{#1}}}
      \end{center}
    }

__ ../ref/rst/directives.html#admonitions


figure and table captions
`````````````````````````
The caption_ package provides many ways to customise the captions in
floating environments like figure and table.

The chngcntr_ package helps to configure the numbering of figure and table
caption numberings.

Some document classes (e.g. KOMA-script_) provide additional configuration.
Also see the related `LaTeX FAQ entry`__

Example
  ::

    \usepackage{caption}
    \captionsetup{justification=raggedleft,singlelinecheck=false}

.. _caption:
   http://dante.ctan.org/CTAN/help/Catalogue/entries/caption.html

.. _chngcntr:
   http://dante.ctan.org/CTAN/help/Catalogue/entries/chngcntr.html

__ http://www.tex.ac.uk/cgi-bin/texfaq2html?label=running-nos

custom interpreted text roles
`````````````````````````````

The rst `role directive`_ allows defining custom `text roles`_
that mark parts of inline text (spans) with a class argument.

* Role names and class arguments are are converted to conform to the regular
  expression ``[a-z][-a-z0-9]*`` (see `class directive`_).

* Class arguments may contain numbers and hyphens, which need special
  treatment in LaTeX command names. (The special command ``\@namedef`` can
  help with the definition of corresponding commands.)

* Custom roles can have multiple class arguments

  In contrast to HTML/CSS, the order of the class arguments might matter.

Commands:
  ``\DUrole``: dispatcher command

  ``\docutilsroleCLASSARGUMENT``\ [#]_: optional styling command

.. [#] The prefix ``\docutilsrole...`` instead of ``\DUrole...`` in the
   styling commands is kept for backwards compatibility.

Default:
  The definition of ``\DUrole{CLASSARGUMENT}{}`` calls the macro named
  ``\docutilsroleCLASSARGUMENT{}`` if it is defined (but silently ignores
  this class argument if a corresponding macro is not defined).

Examples:

* Typeset text in small caps::

    .. role:: smallcaps

    :smallcaps:`Fourier` transformation

  This is transformed to the LaTeX code::

    \DUrole{smallcaps}{Fourier} transformation

  The default definition of ``\DUrole`` will look for a macro named
  ``\docutilsrolesmallcaps``. The definition ::

    \newcommand{\docutilsrolesmallcaps}{\textsc}

  as `raw LaTeX`_ or in the custom `style sheet`_ will give the expected
  result (if the chosen font supports small caps).

* Subscript text in normal size and *italic* shape::

  .. role:: sub(subscript)

  As "sub" inherits from the standard "subscript" role, the LaTeX macro
  only needs to set the size and shape::

    \newcommand{\docutilsrolesub}{\normalsize\itshape}

* A role with several classes and a converted class name::

    .. role:: custom4
       :class: argI argII arg_3

  is translated to the nested commands::

    \DUrole{argi}{\DUrole{argii}{\DUrole{arg-3}{<content>}}}

  With the definitions::

    \newcommand{\docutilsroleargi}[1]{\textsc}
    \newcommand{\docutilsroleargii}[1]{{\large #1}}
    \makeatletter
    \@namedef{docutilsrolearg-3}{\textbf}
    \makeatother

  in a `style sheet`_\ [#]_ or as `raw LaTeX`_ in the document source,
  text styled with ``:custom4:`large bold small-caps``` will be typeset
  accordingly.

.. [#] Leave out the ``\makeatletter`` - ``\makeatother`` pair if the style
   sheet is a LaTeX package (``*.sty``).

.. _role directive:
   ../ref/rst/directives.html#role

.. _text roles:
   ../ref/rst/roles.html

.. _class directive:
   ../ref/rst/directives.html#class

definition lists
`````````````````

ReStructuredText `definition lists`__ correspond to HTML ``<dl>`` list
objects.

Environment:
  ``description``: LaTeX standard environment

Command:
  ``\descriptionlabel``: styling macro for the description term

Default:
  bold label text, hanging indent

Example:
  A non-bold label can be achieved with::

    \renewcommand\descriptionlabel[1]{\hspace\labelsep \normalfont #1}

__ ../ref/rst/restructuredtext.html#definition-lists


document class
``````````````

The LaTeX document class cannot be changed in a `style sheet`_.

Option:

--documentclass=DOCUMENTCLASS
                        Specify documentclass.  Default is "article".

Standard document classes:
  article, report, book

There are hundreds of alternative LaTeX document classes installed by modern
LaTeX distributions, provided by publishers or available at CTAN_ e.g.

* scrarticle, scrreport, scrbook: KOMA-script_ classes
* memoir_

The `TeX Catalogue`_ lists most of them.

.. _CTAN: http://www.dante.de/ctan
.. _KOMA-script:
   http://dante.ctan.org/CTAN/help/Catalogue/entries/koma-script.html
.. _memoir:
   http://dante.ctan.org/CTAN/help/Catalogue/entries/memoir.html
.. _TeX Catalogue:
   http://dante.ctan.org/CTAN/help/Catalogue/


document info
`````````````

Content of the `bibliographic fields`__ at the top of a document.
By default, docinfo items are typeset as a table.

Options:

--use-latex-docinfo     Let LaTeX print author and date, do not show it in
                        docutils document info.
--use-latex-abstract    Use LaTeX abstract environment for the documents
                        abstract. Per default the abstract is an unnumbered
                        section.

Length:
  ``\DUdocinfowidth``: the width for the `docinfo` table.

Default:
  90 % of text width: ``0.9\textwidth``

Example:
  set to 70 % of text width::

    \newlength{\DUdocinfowidth}
    \setlength{\DUdocinfowidth}{0.7\textwidth}

__ ../ref/rst/restructuredtext.html#bibliographic-fields


field lists
```````````

`Field lists`__ may be used as generic two-column table constructs in
documents.

Environment:
   ``DUfieldlist``

Default:
   Indented description list.

Example:
   Use a description list customized with enumitem_::

     \usepackage{enumitem}
     \newenvironment{DUfieldlist}%
       {\description[font=,style=sameline,leftmargin=8em]}
       {\enddescription}
     }

   The `KOMA-script`_ classes provide a similar environment under the name
   `labeling`.

.. _enumitem:
   http://dante.ctan.org/CTAN/macros/latex/contrib/enumitem/enumitem.pdf

__ ../ref/rst/restructuredtext.html#field-lists


font encoding
`````````````

Option:

--font-encoding=FONT_ENCODING
                        LaTeX font encoding. Possible values are "", "T1",
                        "OT1", "LGR,T1" or any other combination of options to
                        the `fontenc`_ package.

Default
  is "" which does not load `fontenc`.

Examples:

* The recommended setting for Latin based scripts is "T1" together with a
  T1-encoded "Type 1" (vector) font, for example `Latin Modern`_::

    --font-encoding=T1 --stylesheet=lmodern

* Support for characters in the Unicode blocks Latin, Latin-1 Supplement,
  and Greek::

    --font-encoding=LGR,T1

.. _fontenc:
.. _LaTeX font encoding:
   http://dante.ctan.org/CTAN/macros/latex/doc/encguide.pdf

.. _Latin Modern:
   http://dante.ctan.org/CTAN/help/Catalogue/entries/lm.html

hyphenation
```````````

The amount of hyphenation is influenced by ``\hyphenpenalty``, setting it to
10000 almost prevents hyphenation. As this produces lines with more space
between words one should increase Latex's ``\tolerance`` for this.

Example:
  ::

    \hyphenpenalty=5000
    \tolerance=1000


line blocks
```````````

In `line blocks`__, newlines and leading whitespace are respected.

Environment:
  ``DUlineblock``: special list environment for line blocks
Length:
  ``\DUlineblockindent``: indentation of indented lineblock parts.

Default:
   2.5 times the font hight: ``2.5em``

Example:
  set to the paragraph indentation::

    \newlength{\DUlineblockindent}
    \setlength{\DUlineblockindent}{\parindent}

__ ../ref/rst/restructuredtext.html#line-blocks

line spacing
````````````

Commands:
  ``\linespread``: for small adjustments

  ``\singlespacing``, ``\onehalfspacing``, and ``\doublespacing``: from
  package `setspace`

Examples:

* Get document wide double spacing::

    \usepackage{setspace}
    \doublespacing

* Increase line spacing by five percent for better readability::

    \linespread{1.05}


literal blocks
``````````````

No markup processing is done within a `literal block`__. It is left as-is,
and is typically rendered in a monospaced typeface

Options:

--literal-block-env=LITERAL_BLOCK_ENV
                      When possibile\ [#]_, use the specified environment for
                      literal-blocks. Default is quoting of whitespace and
                      special chars.

.. [#] A literal-block element, when processed by a Docutils writer might
   have it's origin in a markup with "::" syntax or a ".. parsed-literal::"
   directive.

   A LaTeX verbatim environment is only usable if there is no other markup
   contained in the literal-block.


Example:

  ``--literal-env=lstlisting``

  The ``lstlisting`` environment is highly configurable (as documented in
  listings.pdf_), for instance ::

    \renewcommand{\ttdefault}{txtt}
    \lstset{language=Python,
            morekeywords=[1]{yield}
    }
    \lstloadlanguages{Python}
    \lstset{
      basicstyle=\ttfamily,
      keywordstyle=\bfseries,
      commentstyle=\rmfamily\itshape,
      stringstyle=\slshape,
    }
    \lstset{showstringspaces=false}
    \lstset{columns=fullflexible,
         basewidth={0.5em,0.4em}}


__ ../ref/rst/restructuredtext.html#literal-blocks

.. _listings.pdf:
    http://dante.ctan.org/CTAN/macros/latex/contrib/listings/listings.pdf

list of figures/tables
``````````````````````

Docutils does not support lists of figures or tables.

However, with LaTeX, they can be generated using `raw LaTeX`_ in the
document source.

Commands:
  ``\listoffigures``: a list of figures

  ``\listoftables``: a list of tables

Example:
  ::

    .. raw:: latex

       \listoffigures

option list
```````````

`Option lists`__ are two-column lists of command-line options and
descriptions, documenting a program's options.

Environment:
  ``DUoptionlist``: environment for option lists,

Command:
  ``\DUoptionlistlabel``: set appearance of the options

Example:
  set command options with a bold monospace font::

    \newcommand{\DUoptionlistlabel}{\texttt{\textbf{#1}} \hfill}

__ ../ref/rst/restructuredtext.html#option-lists

page layout
```````````

By default, margin settings are determined by the `typearea`_ package which
is part of the `KOMA-script`_ bundle.  It is possible to disable the use of
the `typearea` package by not including the ``DIV`` setting in the
document options_.

The ``DIV`` document option defines how "crowded" a page will be: larger
values mean larger text area.

    The typearea package even with option ``DIV=calc`` calculates a very
    generous text area. Many conservative typographers will state that the
    resulting line length is still excessive. The calculated DIV value may
    be found in the log file for the respective document. Thus one can
    select a smaller value easily after the first LaTeX run.

    -- `KOMA-Script Guide`_

Default:
  ``DIV=12`` (resulting in good paper use at the expense of unreadable long
  lines).

  The `typearea` default for A4 paper and 10 pt fonts is ``DIV=8``.

Examples:

* Let `typearea` choose a typografically sound value with
  ``DIV=default`` or ``DIV=calc``::

    --documentoptions='a4paper,DIV=calc'

* Disable the `typearea` package loading with::

    --documentoptions='a4paper'

  and use the documentclass default or set margins in a stylesheet with
  the `geometry` package::

    \usepackage{geometry}
    \geometry{hmargin={3cm,0.8in},height=8in}
    \geometry{height=10in}.

  For details see the `geometry manual`_.

.. _typearea:
   http://dante.ctan.org/CTAN/help/Catalogue/entries/typearea.html
.. _KOMA-Script Guide:
   http://dante.ctan.org/CTAN/macros/latex/contrib/koma-script/scrguien.pdf
.. _geometry manual:
   http://dante.ctan.org/CTAN/macros/latex/contrib/geometry/geometry.pdf


page numbering
``````````````

Example:
  Number pages by chapter

  This can be accomplished with the chappg_ package::

    \usepackage{chappg}

  See the `chappg documentation`_ for details.

.. _chappg: http://dante.ctan.org/CTAN/help/Catalogue/entries/chappg.html
.. _chappg documentation:
   http://dante.ctan.org/CTAN/macros/latex/contrib/chappg/chappg.pdf


paper size
``````````

Paper geometry can be changed using ``--documentoptions`` or with the
package `geometry` and ``\geometry{OPTIONLIST}`` LaTeX commands in a style
sheet.

Default:
  a4paper

Some possibilities:

* a4paper, b3paper, letterpaper, executivepaper, legalpaper
* landscape, portrait, twoside.

Examples:

* Choose A5 pager in landscape orientation with command line argument::

    --documentoptions=a5paper,landscape

* The same with LaTeX commands in the `style sheet`_::

    \usepackage{geometry}
    \geometry{a5paper,landscape}

  For details see the `geometry manual`_.

paragraph indent
````````````````

Default (in most document classes):
  Indent the first line in a paragraph unless it is the first line of a
  chapter, section, subsection, or subsubsection.

Example:
  To set paragraph indentation to zero but add a vertical space between
  load the `parskip` package with the command line argument::

    --stylesheet=parskip

  or in your `style sheet`_ with::

    \usepackage{parskip}


rubric
``````

A rubric__ is like an informal heading that doesn't correspond to the
document's structure.

Command:
  ``\DUrubric``

Default:
  subsection style italic, centred

Example:
  set rubric to subsection style, flushleft and red::

    \newcommand{\DUrubric}[1]{\subsection*{{\color{red}#1}\hfill~}}

__ ../ref/rst/directives.html#rubric


table of contents
`````````````````

If you want page numbers in the table of contents, specify
``--use-latex-toc``:

* LaTeX is used to generate the table of contents (ToC) with the
  ``\tableofcontents`` macro at the given location.

  Styling options depend on the choosen document class
  (see e.g. the `KOMA-Script Guide`_ for the `KOMA-script`_ classes).

* Local ToCs are done with the minitoc_ package. See its documentation__ for
  the numerous configuration options.

.. note::
   Minitoc supports local ToCs only at "part" level and top section level
   ("chapter" or "section"). Local `contents` directives at lower levels
   are ignored (a warning is issued).

   If you really require "low-level" local ToCs, turn off the
   `use-latex-toc` option.

.. _minitoc: http://dante.ctan.org/CTAN/help/Catalogue/entries/minitoc.html
__ http://dante.ctan.org/CTAN/macros/latex/contrib/minitoc/minitoc.pdf

title reference role
````````````````````

`Title reference`_ is the default `default role`_ for `interpreted text`_.

Command:
  ``\DUroletitlereference``

Default:
  use slanted font (``\textsl``)

Example:
  set title references with a bold monospace font::

    \newcommand{\DUroletitlereference}[1]{\texttt{\textbf{#1}}}

.. _title reference:
   ../ref/rst/roles.html#title-reference
.. _default role:
   ../ref/rst/directives.html#setting-the-default-interpreted-text-role
.. _interpreted text:
   ../ref/rst/restructuredtext.html#interpreted-text


text font
`````````

Unfortunately, LaTeX cannot use the fonts of the operating system directly
[#]_ but needs specially installed fonts with additional supporting files.
The `LaTeX Font Catalogue`_ provides information and examples for a wide
range of fonts available for use with LaTeX.

.. [#] XeTeX_ can, but is not (yet) supported by Docutils

Default:
  Computer Modern (CM)

Alternative fonts can be selected by

a) specifying the corresponding LaTeX package as arguments to the
   ``--stylesheet`` option or in a custom `style sheet`_.

   * Packages can be combined.
   * Passing options to a package is only possible in the style sheet.

b) changing the font-default macros.


Examples:

* Use `LaTeX Modern`, a Type 1 variant of CM.

  LaTeX code::

    \usepackage{lmodern}

  Command line argument::

    --stylesheet=lmodern

* The ubiquitous "Times/Helvetica/Courier"
  combination is achieved by::

    \usepackage{mathptmx}            % Times for serif and math
    \usepackage[scaled=.90]{helvet}  % downscaled Helvetica for sans serif
    \usepackage{courier}             % Courier for teletype (mono-space)

* Changing a font without using a package (the macros are ``\rmdefault``,
  ``sfdefault`` and ``ttdefault``)::

    \renewcommand{\ttdefault}{txtt}


When generating PDF-files from LaTeX, the files can become smaller if
standard Postscript fonts are used.

The following table lists the font packages for standard Postscript fonts
(see `Using common Postscript fonts with LaTeX`_ for details):


============ ============ ============= ============= ============
Package      Roman        Sans Serif    Typewriter    Math
============ ============ ============= ============= ============
(none)       CM Roman     CM Sans Serif CM Typewriter CM Math

mathpazo     Palatino                                 Palatino

mathptmx     Times                                    Times

helvet                    Helvetica

avant                     Avant Garde

courier                                 Courier

chancery     Zapf
             Chancery

bookman      Bookman      Avant Garde   Courier

newcent      New Century  Avant Garde   Courier
             Schoolbook

charter      Charter

utopia       Utopia
============ ============ ============= ============= ============

Extended versions of the standard Postscript fonts including accented chars,
Greek and Cyrillic are available with the `TeX Gyre`_ bundle which is part
of, e.g., `TeX Live`_.

.. _XeTeX: http://scripts.sil.org/xetex
.. _LaTeX Font Catalogue:
   http://www.tug.dk/FontCatalogue/
.. _TeX Gyre: http://www.gust.org.pl/projects/e-foundry/tex-gyre
.. _Using common PostScript fonts with LaTeX:
   http://dante.ctan.org/CTAN/macros/latex/required/psnfss/psnfss2e.pdf
.. _TeX Live: http://tug.org/texlive/

text encoding
`````````````

Default:
  The generated LaTeX documents are in the input encoding.

Example:
  Use latin1 text encoding for the LaTeX source::

    --output-encoding=latin1

.. this is no longer true. TODO: describe the state of the art
   If the source document is in utf-8 encoding (or
   ``--output-encoding=utf-8`` is set), LaTeX needs Unicode support (the
   `ucs` package). If this package is not available, specify a different
   output-encoding, e.g. ``latin1``.

   If LaTeX issues a Warning about unloaded/unknown characters adding ::

    \PreloadUnicodePage{n}

   (where *n* is the Unicode page-number) to the style sheet might help.

   .. _LaTeX Unicode: http://www.unruh.de/DniQ/latex/unicode/

* Unicode box drawing characters:

  - generate LaTeX code with ``--output-encoding=utf-8:strict``.

  - In the latex file, edit the preamble to load "ucs" with "postscript"
    option and also load the pstricks package::

      - \usepackage[utf8]{inputenc}
      + \usepackage[postscript]{ucs}
      + \usepackage{pstricks}
      + \usepackage[utf8x]{inputenc}

  - Convert to PDF with ``latex``, ``dvips``, and ``ps2pdf``.


title page
``````````

.. TODO: find out and describe the state of the art

Currently the title page only shows the title and subtitle, date and author
are shown in the `docinfo` table. To change the title-page layout one must
redefine the ``\maketitle`` command in the stylesheet

Example:
 ::

  \makeatletter
  \renewcommand{\maketitle}{
    \begin{titlepage}
      \begin{center}
      \textsf{TITLE \@title} \\
      Date: \today
      \end{center}
    \end{titlepage}
  }
  \makeatother

The macro ``\@title`` contains the title.

transition element
``````````````````

Transitions__ are commonly seen in novels and short fiction, as a gap
spanning one or more lines, marking text divisions or signaling changes in
subject, time, point of view, or emphasis.

Command:
  ``\DUtransition``

Default:
  A horizontal line, 1/3 of text width

Examples:
  Use three stars::

    \newcommand*{\DUtransition}{\centering{}*\quad*\quad*}

  Alternatively use the more elaborated version in `transition-stars.sty`_.

  If paragraphs are separated by indentation, you can simply use a vertical
  space::

    \newcommand*{\DUtransition}{\vspace{2ex}}

__ http://docutils.sf.net/docutils/docs/ref/rst/restructuredtext.html#transitions

.. _transition-stars.sty: ../../../sandbox/stylesheets/transition-stars.sty

section numbering
`````````````````

The options ``--section-numbering`` and ``--use-latex-toc``, both
influence section numbering.

* If ``--use-latex-toc`` is specified the latex-writer generates
  LaTeX output, so that LaTeX generates a table of contents and
  generates section numbers. Usually one does not want to have
  section numbers generated by Docutils in this case, therefore
  ``--no-section-numbering`` is the default with this option.

  The advantage is that LaTeX does put page numbers into the
  table of contents, but the section depth is limited by the
  used LaTeX document class, usually to four levels.

* If section numbering and LaTeX table of contents is used LaTeX and
  Docutils will number sections. To switch off displaying of Latex's
  numbers one has to add following lines to the `style sheet`_ ::

    % no section number display
    \makeatletter
    \def\@seccntformat#1{}
    \makeatother
    % no numbers in toc
    \renewcommand{\numberline}[1]{}

  This enables to have the same section numbers as in other Docutils
  writers and page numbers in the table of contents.

sidebar element
```````````````

Sidebars__ are like miniature, parallel documents that occur inside other
documents, providing related or reference material. They can be likened to
super-footnotes; their content is outside of the flow of the document's main
text.

Command:
  ``DUsidebar``

Default:
  Box (similar to admonition) with grey background.

Example:
  Use margin notes ::

    \newcommand{\DUsidebar}{\marginpar}

  * Make sure the margin is wide enough to hold the note.
  * This might fail with some constructs inside the `side bar` and where
    \marginpar cannot be used, e.g., inside floats, footnotes, or in frames
    made with the framed package (see marginnote_).

__ http://docutils.sf.net/docutils/docs/ref/rst/directives.html#sidebar
.. _marginnote:
   http://dante.ctan.org/CTAN/macros/latex/contrib/marginnote/marginnote.pdf

Changes
=======

* The Docutils HISTORY_ lists all changes during the history of docutils.

* Changes since the last release (0.5) are summarized in the RELEASE-NOTES_
  and explained in detail in docutils-05-compat_.

* docutils-05-compat.sty_ is a `style sheet`_ that provides best possible
  backwards compatibility.

.. _HISTORY: ../../HISTORY.html
.. _RELEASE-NOTES: ../../RELEASE-NOTES.html
.. _docutils-05-compat: docutils-05-compat.sty.html
.. _docutils-05-compat.sty:
   ../../docutils/writers/latex2e/docutils-05-compat.sty


Problems
========

Troubleshooting
---------------

Error ``illegal unit px``
`````````````````````````

The unit ``px`` is not defined in "pure" LaTeX, but introduced by the
`pdfTeX` converter on 2005-02-04. `pdfTeX` is used in all modern LaTeX
distributions (since ca. 2006) also for conversion into DVI format.

If you convert the LaTeX source with a legacy program, you might get the
error ``illegal unit px``.

If updating LaTeX is not an option, just remove the ``px`` from the length
specification. HTML/CSS will default to ``px`` while the `latexe2` writer
will add the fallback unit ``bp``.

image inclusion
```````````````

If PDF-image inclusion in PDF files fails, specifying
``--graphicx-option=pdftex`` or ``--graphicx-option=auto`` might help.

Bugs and open issues
--------------------

Open to be fixed or open to discussion.

See also the entries in the `Docutils TODO list`_ and the discussion and
proposals in the `latex-variants`_ sandbox project.

.. _Docutils TODO list:
   ../dev/todo.html#latex-writer
.. _latex-variants:
   ../../../sandbox/latex-variants/README.html

Footnotes and citations
```````````````````````

Initially both were implemented using figure floats, because hyperlinking
back and forth seemed to be impossible. Later the `figure` directive was
added that puts images into figure floats.

This results in footnotes, citations, and figures possibly being mixed at
page foot.

Workaround:
  Select footnote and citation handling with the ``use-latex-footnotes`` and
  ``use-latex-citations`` options.

  * Use LaTeX footnotes and citations for printing or more complex layout.
  * Footnotes and citations done with figures might excell in hyperlink
    support.

If ``use-latex-citations`` is used, a bibliography is inserted right at
the end of the document. *This should be customizable*.

If ``use-latex-citations`` is used adjacent citation references (separated
only by a single space or a newline) are combined to a single citation
group, i.e. ``[cite1]_ [cite2]_`` results in ``\cite{cite1,cite2}``.

Tables
``````

:Tablewidth: reST-documents line length is assumed to be 80 characters. The
             tablewidth is set relative to this value. If someone produces
             documents with line length of 132 this will fail.

             Table width is tried to fit in page even if it is wider than
             the assumed linewidth, still assumed linewidth is a hook.

* Table: multicol cells are always left aligned.

* The contents of a rowspan cell do not influence table height.
  (multirow "feature", use a phantom or strut?)

* Multirow cells might mix up the following table rows.

* Table cells with both multirow and multicolumn are currently not possible.

* literal-blocks in table cells:

  - If verbatim or flushleft is used one gets vertical space above and below.
  - This is bad for the topmost paragraph in a cell, therefore the writer
    uses raggedright.
  - Ragged right fails on followup paragraphs as the vertical space would be
    missing.

* ``--table-style=booktabs``, ``..class:: booktab``: `booktabs` version
  1.00 does not work with `longtable`. This is solved in newer versions
  (current is 2005/04/14 v1.61803).


Figures
```````

* Figure (and table) caption alignment of the documentclass overrides the
  setting by the ``:align:`` argument.

* Wrapping text around figures is currently not supported. (Requires the
  `wrapfig`_ package.)

.. _wrapfig: http://dante.ctan.org/CTAN/help/Catalogue/entries/wrapfig.html

Miscellaneous
`````````````

.. * Selection of LaTeX fontsize configurable (needs an option).
   What is wrong with ``--documentoptions=12`` or so,
   maybe combined with extsize or some other package? [GM]

   TODO: test and document

* Pdfbookmark level 4 (and greater) does not work (might be settable but
  complicated).

* Footnotes are not all on the same page (as in
  docs/user/rst/demo.txt) and do not link back and forth.

* Hyperlinks are not hyphenated; this leads to bad spacing. See
  docs/user/rst/demo.txt 2.14 directives.

* Pagestyle headings does not work, when sections are starred.

* For additional docinfo items: the field_body is inserted as text, i.e. no
  markup is done.
