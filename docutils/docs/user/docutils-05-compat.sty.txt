==================================================================
 Backwards compatibility settings for the Docutils latex2e writer
==================================================================

:Author:    Guenter Milde
:Contact:   milde@users.berlios.de
:Revision:  $Revision$
:Date:      $Date: 2009-02-24$
:Copyright: Â© 2007, 2009 G. Milde,
            Released  without warranties or conditions of any kind
            under the terms of the Apache License, Version 2.0
            http://www.apache.org/licenses/LICENSE-2.0

This file documents changes and provides a style for best possible
compatibility to the behaviour of the `latex2e` writer of Doctutils
release 0.5 ::

  \NeedsTeXFormat{LaTeX2e}
  \ProvidesPackage{docutils-05-compat}
  [2009/03/26 v0.1 compatibility with rst2latex from Docutils 0.5]
  
.. contents::
   :depth: 2

Usage
=====

To get an (almost) identic look for your old documents without further
configuration, place ``docutils-05-compat.sty`` and
``docutils-05-compat2.sty`` in the TEXINPUT path (e.g. the current work
directory) and pass the
``--stylesheet=docutils-05-compat,docutils-05-compat2`` option to
``rst2latex.py``.

To use your custom stylesheets unaltered, "wrap" them in the compatibility
styles, e.g.
``--stylesheet="docutils-05-compat,mystyle.tex,docutils-05-compat2"``.

However, as the changes include bug fixes that are partly reverted by this
style, it is recommended to adapt the stylesheets to the new version or copy
just the relevant parts of this style into them.

Changes since 0.5
=================

LaTeX style sheets
------------------

New Feature:
  LaTeX packages can be used as ``--stylesheet`` argument without
  restriction.

Implementation:
  Use ``\usepackage`` if style sheet ends with ``.sty`` or has no
  extension and ``\input`` else.

Rationale:
  while ``\input`` works with extension as well as without extension,
  ``\usepackage`` expects the package name without extension. (The latex2e
  writer will strip a ``.sty`` extension.)


Backwards compatibility
```````````````````````
Up to Docutils 0.5, if no filename extension is given in the ``stylesheet``
argument, ``.tex`` is assumed (by latex).

Since Docutils 0.6, a stylesheet without filename extension is assumed to be
a LaTeX package (``*.sty``) and referenced with the ``\usepackage`` command.

Needed Action:
  Always specify the extension if you want the style sheet to be
  ``\input`` by LaTeX.


Custom roles
------------

New Feature: failsave implementation
 As with classes to HTML objects, class arguments are silently ignored if
 there is no styling rule for this class in a custom style sheet.

New Feature: custom roles based on standard roles
 As class support needs to be handled by the LaTeX writer, this feature was
 not present "automatically" (as in HTML). Modified visit/depart_*() methods
 for the standard roles now call visit/depart_inline() if there are class
 arguments to the node.

Backwards compatibility
```````````````````````
SVN versions 5742 to 5861 contained an implementation that
did not work with commands expecting an argument.
The implementation from version 5862 is fully backwards compatible.


Length units
------------

#. add default unit if none given (to prevent LaTeX error)
   a poll on docutils-users favoured ``bp`` (Big Point: 1 bp  = 1/72 in)

#. Do not change ``px`` to ``pt``.

  * ``px`` is a valid unit in pdftex since version 1.3.0 released on
    2005-02-04:

     1px defaults to 1bp (or 72dpi), but can be changed with the \pdfpxdimen
     primitive::

       \pdfpxdimen=1in % 1 dpi
       \divide\pdfpxdimen by 96 % 96 dpi

     --  http://www.tug.org/applications/pdftex/NEWS

  * Modern TeX distributions use pdftex also for dvi generation
    (i.e. ``latex`` actually calls ``pdftex`` with some options).

Backwards compatibility
```````````````````````

Images with width specification in ``px`` come out slightly (0.3 %) larger:

  1 px = 1 bp  = 1/72 in > 1 pt = 1/72.25 in

This can be reset with ::

  \pdfpxdimen=1pt
  
It is impossible to revert the change of lengths specified without unit in a
style sheet, however the 0.3 % change will be imperceptible in most cases.

Error ``illegal unit px``:
  The unit ``px`` is not defined in "pure" LaTeX, but introduced by the
  `pdfTeX` converter on 2005-02-04. `pdfTeX` is used in all modern LaTeX
  distributions (since ca. 2006) also for conversion into DVI.

  If you convert the LaTeX source with a legacy program, you might get the
  error ``illegal unit px``.

  If updating LaTeX is not an option, just remove the ``px`` from the length
  specification. HTML/CSS will default to ``px`` while the `latexe2` writer
  will add the fallback unit ``bp``.


Font encoding
-------------

* Do not mix font-encoding and font settings: do not load `ae` and `aeguill`
  unless explicitely required via the ``--stylesheet`` option.


Example:
  ``--font-encoding=LGR,T1`` becomes ``\usepackage[LGR,T1]{fontenc}``
  (Latin, Latin-1 Supplement, and Greek)


Backwards compatibility
```````````````````````

The following behaviour is new:

:font-encoding = '':  do not load `ae` and `aeguill` packages, i.e.

                      * do not change font settings,
                      * do not use the fontenc package
                        (implicitely loaded via `ae`),
                      * use LaTeX default font encoding (OT1)

:font-encoding = OT1: load `fontenc` with ``\usepackage[OT1]{fontenc}``

Load the ae and aeguill packages if fontenc is not used::

  %\@ifpackageloaded{fontenc}
  
Fails! 'fontenc' disables the test to enable loading
more than once with different options.
``\@ifl@ter@@`` seems to be the only control sequence that survives::

  \@ifundefined{@ifl@ter@@}
    {\RequirePackage{ae,aeguill}}
    {}
  
However, using `ae` is not recommended. A similar look (but better
implementation) can be achieved with the packages `lmodern`, `cmsuper`, or
`cmlgr` all providing Computer Modern look-alikes in vector format and T1
encoding, e.g. ``--font-encoding=T1 --stylesheet=lmodern``.


Sub- and superscript as text
----------------------------

* Set sub- and superscript role argument in text mode not as math.

  Wraps the role argument in ``$_{\mbox{\scriptsize <subscript text>}}$``
  or ``$^{\mbox{\scriptsize <superscript text>}}$``.


Backwards compatibility
```````````````````````

In math mode, Latin letters are typeset italic and whitespace is ignored.

To get italic subscripts, define and use in your document custom roles like
``.. role:: sub(subscript)`` and ``.. role:: super(superscript)``
and define the "role commands"::

    \newcommand{\docutilsrolesub}{\itshape}
    \newcommand{\docutilsrolesuper}{\itshape}
  
This is not fully backwards compatible, as it will also set numbers in
italic shape and not ignore whitespace. However, switching to math-mode is
insecure with some characters like '$'.

Page layout
-----------

* Margins are configurable via the ``DIV=...`` document option.

* It is possible to disable the use of the `typearea` package by not
  including the ``DIV`` setting in the ``--documentoptions``.

* The ``\raggedbottom`` setting is no longer inserted into the document. It
  is the default for article and report classes. If requested in combination
  with a book class, it can be given in a custom style sheet.

Backwards compatibility
```````````````````````

Up to version 0.5, use of `typearea` and a DIV setting of 12 were hard-coded
into the latex2e writer ::

  \usepackage{typearea}
  \typearea{12}
  
and the vertical alignment of lower boundary of the text area in book
classes disabled via ::

  \raggedbottom
  
  
Shorter preamble
----------------

Packages that are no longer required
````````````````````````````````````

The following packages where required in pre-0.5 versions and still loaded
with version 0.5::

  \usepackage{shortvrb}
  \usepackage{amsmath}
  
Packages that are conditionally loaded
``````````````````````````````````````

* the `typearea` for `page layout`_.

The following packages are required by doctree elements that are not
always present. They are now only loaded if actually required.

Tables
^^^^^^

Standard package for tables across several pages::

  \usepackage{longtable}
  
Extra space between text in tables and the line above them
('array' is implicitely loaded by 'tabularx', see below)::

  \usepackage{array}
  \setlength{\extrarowheight}{2pt}
  
Table cells spanning multiple rows::

  \usepackage{multirow}
  
Docinfo
^^^^^^^

Tables with automatic width of columns, always on one page::

  \usepackage{tabularx}
  
  
Images
^^^^^^
::

  \usepackage{graphicx}
  
Problematic, Sidebar
^^^^^^^^^^^^^^^^^^^^
Set text and/or background colour, ``\colorbox``::

  \usepackage{color}
  
  
  
Conditional commands and environments
`````````````````````````````````````

Fallback definitions for special doctree elements are included after the
style sheet if required in the document. Customization is done by an
alternative definition in a style sheet with ``\newcommand``. In versions up
to 0.5 the definitions were always part of the document (before the style
sheet) and customized via ``\renewcommand``.

The following code provides the old definitions. 
The style sheet `docutils-05-compat2.sty` maps them 
(or their custom variants) to the new interface:

admonition width ::

  \newlength{\admonitionwidth}
  \setlength{\admonitionwidth}{0.9\textwidth}
  
docinfo width ::

  \newlength{\docinfowidth}
  \setlength{\docinfowidth}{0.9\textwidth}
  
line block ::

  \newlength{\lineblockindentation}
  \setlength{\lineblockindentation}{2.5em}
  \newenvironment{lineblock}[1]
  {\begin{list}{}
    {\setlength{\partopsep}{\parskip}
     \addtolength{\partopsep}{\baselineskip}
     \topsep0pt\itemsep0.15\baselineskip\parsep0pt
     \leftmargin#1}
   \raggedright}
  {\end{list}}
  
option lists ::

  \newcommand{\optionlistlabel}[1]{\bf #1 \hfill}
  \newenvironment{optionlist}[1]
  {\begin{list}{}
    {\setlength{\labelwidth}{#1}
     \setlength{\rightmargin}{1cm}
     \setlength{\leftmargin}{\rightmargin}
     \addtolength{\leftmargin}{\labelwidth}
     \addtolength{\leftmargin}{\labelsep}
     \renewcommand{\makelabel}{\optionlistlabel}}
  }{\end{list}}
  
rubric::

  \newcommand{\rubric}[1]{\subsection*{~\hfill {\it #1} \hfill ~}}

title reference role::

  \newcommand{\titlereference}[1]{\textsl{#1}}

* Settings for the use of floats for footnotes are only included if

  * the option "use-latex-footnotes" is False, and
  * there is at least one footnote in the document.

::

  % begin: floats for footnotes tweaking.
  \setlength{\floatsep}{0.5em}
  \setlength{\textfloatsep}{\fill}
  \addtolength{\textfloatsep}{3em}
  \renewcommand{\textfraction}{0.5}
  \renewcommand{\topfraction}{0.5}
  \renewcommand{\bottomfraction}{0.5}
  \setcounter{totalnumber}{50}
  \setcounter{topnumber}{50}
  \setcounter{bottomnumber}{50}
  % end floats for footnotes
