.. include:: <s5roles.txt>

=============================================
 Easy Slide Shows With reStructuredText & S5
=============================================

:Authors: David Goodger, Chris Liechti,
:Date:    $Date$

.. class:: handout

   This document serves both as a user manual and as a usage example
   of the s5_html.py writer and the rst2s5.py front end.

An introduction to presentations (slide shows) with
Docutils/reStructuredText and S5.

*(Hit the space bar or click the mouse button to proceed.)*

.. container:: handout

   The first slide of a presentation consists of all visible text up
   to the first section title.  The document title is also added to
   the footer of all slides.

   The "footer" directive is used to specify part of the slide footer
   text.  It is currently limited to one short line (one paragraph).

.. |bullet| unicode:: U+02022
.. footer:: Location |bullet| Date


Introduction
============

``rst2s5.py`` is a Docutils_ front end that outputs HTML for use with
S5_, a "Simple Standards-based Slide Show System" by Eric Meyer.

* Uses reStructuredText as input.

* Presentations can be viewed using any modern web browser that
  supports CSS, JavaScript, and XHTML.  (It even works with IE!)

* A variety of themes are available.

.. _Docutils: http://docutils.sourceforge.net/
.. _S5: http://meyerweb.com/eric/tools/s5/


Basic Usage
===========

.. topic:: Installation
   :class: handout

   Prerequisites: Python and the Docutils_ package have to be
   installed.  See the `Docutils README`__ file for installation
   instructions.

   __ http://docutils.sourceforge.net/README.html

Normal reStructuredText documents are supported.  Each first-level
section is converted into a single slide.  An S5 slide show HTML file
is generated with the following command::

    rst2s5.py presentation.txt presentation.html

Open ``presentation.html`` in any modern graphical web browser.

(Click the "|mode|" button to switch between presentation & handout
modes.  In presentation mode, mouse over to the lower right-hand
corner to display the controls.)

.. topic:: UI Details
   :class: handout

   Details of the S5 user interface can be found at `Eric Meyer's S5
   page`__.

   TBD: all UI controls   

.. |mode| unicode:: U+00D8 .. capital o with stroke
__ S5_


Features (1)
============

The S5/HTML Writer supports all the standard Docutils HTML features.
S5-specific features:

.. class:: incremental

* The document title is duplicated on each slide in the S5 footer.

* The ``footer`` directive may be used to define additional text in
  the S5 footer, but it is limited to one line of text.

  .. container:: handout

     This is useful for information such as the date of the
     presentation and/or the location.  The field in the footer is
     left blank if no ``footer`` directive is used.

     Example::

         .. footer:: Location - Date

* An "incremental" class can be assigned to lists and other elements
  to get one-item-at-a-time behavior (like this list).


Features (2): Handouts
======================

The contents of any element with a "class" attribute value of
"handout" are hidden in the slide presentation, and are only visible
when the presentation is printed or viewed in outline mode.
"Handout"-class elements can appear anywhere in the text, as often as
needed.

This means that the slides and extra handout material can be combined
in one document.  The handout can be printed directly from the
browser, and it will contain more than just silly framed slides.  This
can be used to provide more detailed information, or for speaker's
notes.

.. container:: handout

   The ``.. class:: handout`` directive can be used to tag single
   paragraphs and other elements.

   Elements only visible in the handout can also be generated using a
   ``:class: handout`` option with ``sidebar``, ``compound`` and other
   directives.

   Handout contents are also visible on the screen if the S5 "raw
   view mode" is active.

   Arbitrary handout blocks can be created using the ``container``
   directive::

       .. container:: handout

          Put anything you like here...


Examples (1)
============

.. sidebar:: Hint

   Admonitions, tables, sidebars, and other elements can be used in
   on-screen presentations in handouts.  Images too!

   .. image:: images/happy_monkey.png
       :alt: sample image

=====  =====  ======
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======


Examples (2): Incremental Text
==============================

.. class:: incremental

   Paragraphs can be displayed one at a time...

   .. container::

      ... or a bunch at a time.

      This second paragraph is displayed together with the previous
      one by grouping them with the "container" directive.

.. default-role:: incremental

| `We can also display` `one` `word` `at` `a` `time,`
| `or a phrase` `at a time,`
| `or even` `o`\ `n`\ `e` `l`\ `e`\ `t`\ `t`\ `e`\ `r` `at a time!`
|
| `(But the markup ain't pretty.)`


Examples (3): Incr. Graphics
============================

TBD (insert an example of animation here)


Generating a Slide Show (1)
===========================

.. class:: incremental

1. Open a console (terminal, command shell) and go to the folder
   containing your file, say ``presentation.txt``.

2. Run the command::

       rst2s5.py presentation.txt \
                 presentation.html

3. Normally the default Docutils stylesheet, ``html4css1.css``, will
   be embedded in the output HTML.  If you choose to link to a
   stylesheet instead of embedding, you must include a copy.


Generating a Slide Show (2)
===========================

.. class:: incremental

4. TBD: describe copying of S5 files.  [In the same folder as
   ``presentation.txt``, extract the sample theme from
   http://meyerweb.com/eric/tools/s5/s5blank.zip (this should create a
   ``ui`` folder).]

5. Open ``presentation.html`` in a web browser.

6. Expand the browser window to full-screen mode, and speak.

7. Profit!


Themes
======

Several themes are available, and they're easy to adapt.

.. container:: handout

   The themes from the S5 tutorial can be used.  Get it here:
   http://meyerweb.com/eric/tools/s5/s5blank.zip.

   These themes are in the public domain and may be redistributed
   freely.

   Some sites with S5 slide shows or themes:

   * http://meyerweb.com/eric/tools/s5/themes/
   * http://mozilla.wikicities.com/wiki/Firefox_S5:Designs

   And a short tutorial on how to create themes:
   http://yatil.de/s5/dokumentation/9/ (in German)

The S5 theme can be specified with the ``--theme`` command-line option
or the ``theme`` configuration file setting.

.. container:: handout

   Example::

       rst2s5 --theme pixel presentation.txt presentation.html

   The default theme is "default".

   Usualy, themes are placed in a folder with the specified name,
   inside a ``ui`` folder inside the folder containing the
   presentation.  But it is also possible to use URLs and grab the
   design from another website.


Example Themes
==============

TBD (insert some screenshots below)

* default (simplified version of S5's default theme)
* inverse (white text on a black background)
* big (very large text, no footers)
* big_inverse


S5 Theme Files
==============

An S5 theme consists of a directory containing several files:
stylesheets, JavaScript, and graphics.  These go into a subdirectory
of a ``ui`` directory beside the generated HTML.

TBD


Custom Themes
=============

TBD


Caveats
=======

1. The ``contents`` (table of contents) directive must not be used.
   It changes the CSS class of headings and they won't show up
   correctly in the screen presentation.

   .. TODO: Add a "disable table of contents" setting to the parser?
      The S5 writer could set it as a default.


2. Subsections ...
------------------

... may be used, but you may have to provide your own stylesheet
support.  Subsections work just fine in handouts though.


Supported Classes: Incremental
==============================

TBD

.. class:: incremental

Useful definition: "``.. default-role:: incremental``".


Supported Classes: Text Size
============================

| :tiny:`tiny` (class & role name: "tiny")
| :small:`small` ("small")
| normal (unstyled)
| :big:`big` ("big")
| :huge:`huge` ("huge")

.. class:: incremental

Requires "``.. include:: <s5roles.txt>``".


Supported Classes: Alignment
============================

.. class:: left

Left (class name: "left")

.. class:: center

Center ("center" & "centre")

.. class:: right

Right ("right")

.. class:: incremental

Requires "``.. include:: <s5roles.txt>``".


Supported Classes: Text Colours
===============================

:black:`black` [black], :gray:`gray`, :silver:`silver`, :white:`white`
[white], :maroon:`maroon`, :red:`red`, :magenta:`magenta`,
:fuchsia:`fuchsia`, :pink:`pink`, :orange:`orange`, :yellow:`yellow`,
:lime:`lime`, :green:`green`, :olive:`olive`, :teal:`teal`,
:cyan:`cyan`, :aqua:`aqua`, :blue:`blue`, :navy:`navy`,
:purple:`purple`

The class names and role names are the same as the colour names.  For
example, "``:teal:`text```" produces ":teal:`text`".

.. class:: incremental

Requires "``.. include:: <s5roles.txt>``".


Supported Classes: Borders
==========================

TBD

An ordinary, unstyled table:

=========  =======
Sometimes  borders
---------  -------
are        useful.
=========  =======

A table after applying "``.. class:: borderless``":

.. class:: borderless

=======  ==========
But      sometimes,
-------  ----------
they're  not.
=======  ==========


Supported Classes: Print-Only
=============================

TBD (print-block, print-inline)

(add example with target-notes directive)

.. class:: incremental

May require "``.. include:: <s5roles.txt>``".


Chained Presentations (1)
=========================

Presentation slide shows can be chained together.  This is useful for
including all or part of one presentation in another, and for changing
themes.  Slide numbers are not carried over though.  But there's an
easy way to fake a continuous multi-themed presentation:

1. Generate slide show HTML files with two different names from
   different themes but from the same source text.

2. Include a link to the *next* slide in the *second* theme, `like
   this <default.html#slide22>`__.  Don't forget to
   click the link!


Chained Presentations (2)
=========================

3. To return to the first theme, include a link back to the following
   slide in the *first* theme, `like this
   <inverse.html#slide23>`__.  Again, be sure to click
   the link!


Chained Presentations (3)
=========================

4. Now we're back where we started from, back in the first theme, but
   two slides further on.

In this way, any number of themes can be chained together.


To Do
=====

* Multi-display support:

  - speaker's notes on the laptop screen
  - slides on the projector
  - two views stay in sync
  - presentation controlled from either display

  This will require some serious JavaScript-fu!


That's All, Folks!
==================

.. class:: huge

   Any questions?

   Further information:
   http://docutils.sf.net

   Docutils users' mailing list:
   docutils-users@lists.sf.net


.. topic:: Links
   :class: print-block

   .. target-notes:: :class: print-inline
