#!/somewhere/there/is/a/perl5.6
# $Id: insertperl.pl.root 449 2005-05-31 19:07:04Z nodine $

# Options:
#   -w         Suppresses the "THIS FILE IS AUTOMATICALLY GENERATED" message

while (substr($ARGV[0],0,1) eq "-") {
    $flag = substr($ARGV[0],1);
    if (grep($_ eq $flag,("w"))) { $flags{$flag} = 1; shift;}
    else { print "$0: Unknown flag: -$flag\n"; exit; }
}

while (<>) {
    if ($. == 1 && m|^\#!/.*/(.+)$|) {
	$line = $_;
	if (-x $SAFE_PERL) {
	    $new_exec = $SAFE_PERL;
	}
	else {
	    $exec = $1;
	    ($min_ver,$hyphen,$max_ver) = $exec =~ /perl([0-9.]+)(-([0-9.]+))?/o;
	    if ($min_ver) {
		# Search for a version with the right characteristics
		$perl = find_program('perl');
		($dir) = $perl =~  m|(.*)/|o;
		foreach $binary (<$dir/perl*>) {
		    open(BINARY,"$binary -v |");
		    undef($ver_string);
		    while (<BINARY>) {
			$ver_string = $1 if (/version ([0-9](.[0-9]+)+)/o);
			$ver_string .= $1 if (/Patch level: ([0-9]+)/o);
		    }
		    close(BINARY);
		    if ($ver_string >= $min_ver &&
			(! $max_ver || $ver_string <= $max_ver)) {
			$new_exec = $binary;
			last;
		    }
		}
	    }
	    else {
		$new_exec = find_program('perl');
		
	    }
	    if (! $new_exec) {
		print STDERR "$0: Cannot find suitable perl\n";
		exit;
	    }
	    $new_exec = "/usr/bin/env perl" 
		if ($new_exec =~ m|/_TOOLS_/wrap/bin/perl|);
	}

	$line =~ s|/.*perl(([0-9.]+)(-([0-9.]+))?)?|$new_exec $PERL_FLAGS|;
	print $line;
	print "#  THIS FILE IS AUTOMATICALLY GENERATED BY insertperl\n"
	    if ! $flags{"w"};
    }
    else {
	print;
    }
}

sub find_program {
    my($prog) = @_;
    my(@PATH) = split(/:/,$ENV{'PATH'});
    foreach (@PATH) {
	return "$_/$prog" if -x "$_/$prog";
    }
    return "";
}

__END__
$Log: insertperl.pl.root,v $
Revision 1.1  2004/03/25 15:30:52  nodine
Ask for safe perl and configure insertperl.pl from insertperl.pl.root.

Revision 1.1  2004/03/23 19:57:54  nodine
Create insertperl.pl at configuration time from insertperl.pl.root.

Revision 1.3  2003/09/11 21:00:52  acj022
* Use '/usr/bin/env perl' in the 'shebang' line if a wrapped perl is found.

Revision 1.2  2003/07/18 16:39:13  mrinal
* Require a 5.6 or higher

Revision 1.1  1999/02/22 20:36:04  nodine
"Initial version"

Revision 1.2  1998/04/24 14:29:27  nodine
Use new version that doesn't suffer from the "ridiculous path length" problem.

Revision 1.1  1998/04/09 21:42:04  nodine
"Initial version"

Revision 1.1  1998/04/08 15:01:26  nodine
"Initial version"

Revision 1.2  1998/03/16 19:56:57  nodine
Don't use "which" to find the perl program since it may return an
error message instead, like "Warning: truncating ridiculously long
PATH".

Revision 1.1  1997/02/26 20:01:35  nodine
Initial revision

% Revision 1.1  1994/11/21  19:40:11  nodine
% Initial revision
%
