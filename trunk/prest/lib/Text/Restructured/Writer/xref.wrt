# -*-perl-*-
# $Id: xref.wrt 768 2006-01-28 03:33:28Z marknodine $
# Copyright (C) 2002-2005 Freescale Semiconductor, Inc.
# Distributed under terms of the Perl license, which is the disjunction of
# the GNU General Public License (GPL) and the Artistic License.

# Writer for xref files

=pod
=begin reST
=begin Description
This writer exports cross reference targets defined in the source
reStructuredText (reST) file. The output is in reST format and
includes:

1. All non-anonymous internal targets, exported as ::

     .. <targetName>: <sourceFileName><ext>.<suffix>#<targetID>

2. All citations, exported as::

     .. <citationName>: <sourceFileName><ext>.<suffix>#<citationID>

3. Substitution definitions that have the same names as internal
   targets but do not, directly or indirectly through substitution
   references, define internal target or refer to external
   references or footnotes.

4. Definition of substitutions referred to by the substitutions
   exported according to 3. Substitution definitions are exported
   as defined in the source file.

This writer uses the following output definitions:

-W file_suffix=<suffix>  Specify a file suffix to be used for
                         exporting the cross reference targets
                         (default is html).
-W filename_ext=<ext>    Specify an extension to the filename,
                         (e.g. "_main") so the file location of
                         targets becomes <file><ext>.<suffix>
                         (default is "").
-W file_path=<dir>       Specify additional path information for
                         the target file (default is "")
-W sprintf=<string>      Specify an sprintf string for formatting the
                         output definitions (default is "%s").
=end Description
=end reST
=cut

sub BEGIN = {
    # My -W flags
    use vars qw($file_suffix $filename_ext $file_path $sprintf);

    # Run-time globals
    use vars qw($XREF_STRS %TARGET_NAMES @TARGETS);

    # Defaults for -W flags
    $file_suffix = 'html' unless defined $file_suffix;
    $filename_ext = '' unless defined $filename_ext;
    $file_path = "" unless defined $file_path;
    $file_path .= "/" if ($file_path && $file_path !~ /\/$/);
    $sprintf = "%s" unless defined $sprintf;
}

# During the first pass, write all non-anonymous internal targets and
# citations out.
phase PREPROCESS {
    sub document = {
	my ($dom, $str) = @_;
	my $fileName = $dom->{attr}{source};
	$fileName .= "$filename_ext.$file_suffix"
	    if (!($fileName =~ s/\.[^\.\/]*$/$filename_ext\.$file_suffix/o));
	$fileName = "$file_path$fileName";
	my $str2;
	my ($key, $value);
	foreach (@TARGETS) {
	    my ($name, $id) = @$_;
	    $str2 .= sprintf "$sprintf\n", ".. _`$name`: $fileName#$id";
	}
	return $str2;
    }

    # Save all citations in @TARGETS array. The elements of the array
    # are references to two-element (name, refid) pairs.
    sub citation|paragraph = {
	my ($dom, $str) = @_;
	my @names = grep(!$TARGET_NAMES{$_},
			 @{$dom->{attr}{names}}) if $dom->{attr}{names};
	# Note: the following is faking a method call with a null obj.
	# It's safe because this method should not require its object
	# in this context.
	push @TARGETS, map
	    [$_, Text::Restructured::NormalizeId(0, $_)], @names;
	@TARGET_NAMES{@names} = (1) x @names;
	return;
    }

    sub section = {
	my ($dom, $str) = @_;
	# Note; the first name in {attr}{names} is the section name itself;
	# any succeeding elements were attached by targets directed to the
	# section.
	my @names = @{$dom->{attr}{names}} if $dom->{attr}{names};
	shift @names;
	@names = grep(!$TARGET_NAMES{$_}, @names);
	push @TARGETS, map
	    [$_, Text::Restructured::NormalizeId(0, $_)], @names;
	@TARGET_NAMES{@names} = (1) x @names;
	return;
    }

    # Save non-anonymous internal targets into @TARGETS array. The
    # elements of the array are references to two-element (name, id)
    # pairs (for direct targets) or (name, refid) pairs (for indirect
    # targets).
    sub target = {
	my ($dom, $str) = @_;
	my $attr = $dom->{attr};
	if (!$attr->{refuri} && !$attr->{anonymous}) {
	    $attr->{names} = $attr->{dupnames} if
		(defined $attr->{dupnames} 
		 && (! defined $attr->{names}));
	    my @names = grep(!$TARGET_NAMES{$_},
			     @{$dom->{attr}{names}}) if $dom->{attr}{names};
	    my $refid = $attr->{refid};
	    push @TARGETS, map
		[$_, $refid || Text::Restructured::NormalizeId(0, $_)], @names;
	    @TARGET_NAMES{@names} = (1) x @names;
	}
 	return;
    }
}

# During the second pass, handle substitution definitions. Export a
# definition if both of these conditions are true.
# o. It has the same name as an internal target or citation, or is
#    referred to (directly or indirectly) by another definition that 
#    has the same name as an internal target.
# o. It does not contain (directly or indirectly) footnote and external 
#    references, internal target, or problematic elements.
phase PROCESS {
    sub document = {
	my ($dom, $str) = @_;
	return $XREF_STRS;
    }

    sub substitution_definition = {
	my ($dom, $str) = @_;
 	# Do nothing if this definition has been exported, has been
 	# previously identified as not exportable, or does not have
 	# the same name as an internal target or citation.
	return 
	    if ($dom->{_xref}{exported} || ($dom->{_xref}{exportable} || '') eq "false" 
		|| !defined $TARGET_NAMES{lc $dom->{attr}{names}[0]});
	my @defs;
 	return if (exportableDef($dom, \@defs) eq "false");
	push @defs, $dom;
 	foreach my $def (@defs) {
	    if (!$def->{_xref}{exported}) {
		$XREF_STRS .= $def->{lit} . "\n";
		$def->{_xref}{exported} = 1;
	    }
	}
	return;
	
	sub exportableDef {
	    my ($dom, $defs) = @_;
	    my @contents = $dom->contents();
	    return $dom->{_xref}{exportable}
	    if defined $dom->{_xref}{exportable};
	    $dom->{_xref}{exportable} = "true";
	    for (my $i = 0; $i <= $#contents &&
		 $dom->{_xref}{exportable} eq "true"; $i++) {
		my $child = $contents[$i];
		my $ctag = $child->{tag};
 		if ($ctag eq 'target' || $ctag eq 'footnote_reference'
		    || $ctag eq 'problematic'
		    || ($ctag eq 'reference' && $child->{attr}{refuri})) {
		    $dom->{_xref}{exportable} = "false";
		}
		elsif ($ctag eq 'substitution_reference') {
		    my $target = $dom->{resolved};
		    $dom->{_xref}{exportable} = exportableDef($target, $defs);
		    push @$defs, $target
			if $dom->{_xref}{exportable} eq "true";
		}
	    }
	    return $dom->{_xref}{exportable};
	}
    }
}
