#! /usr/bin/env python

"""
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:Revision: $Revision$
:Date: $Date$
:Copyright: This module has been placed in the public domain.

Command-line and common processing for Docutils front-ends.
"""

__docformat__ = 'reStructuredText'

import optik


class OptionParser(optik.OptionParser):

    """
    Parser for command-line and library use.  The `cmdline_options` specification here and in other Docutils components are merged
    """

    standard_option_list = []
    """We supply our own help option."""

    cmdline_options = (
        # Unimplemented or unused options are commented out.
        #('Include a "Generated by Docutils" credit with a link, at the end '
        # 'of the document.',
        # ['--generator', '-g'], {'action': 'store_true', 'default': 0}),
        #('Include the date at the end of the document (UTC).',
        # ['--date', '-d'], {'action': 'store_const', 'const': '%Y-%m-%d',
        #                    'dest': 'datestamp', 'default': ''}),
        #('Include the time & date at the end of the document (UTC).',
        # ['--time', '-t'], {'action': 'store_const',
        #                    'const': '%Y-%m-%d %H:%M:%S UTC',
        #                    'dest': 'datestamp', 'default': ''}),
        #('Include a "(View document source)" link.',
        # ['--source-link', '-s'], {'action': 'store_true', 'default': 0}),
        ('Set verbosity threshold; report system messages at or higher than '
         '<level> (by name or number: "info" or "1", warning/2, error/3, '
         'severe/4; also, "none" or 5+).  Default is 2 (warning).',
         ['--report', '-r'], {'dest': 'report_level', 'default': 2,
                              'metavar': '<level>'}),
        ('Report all system messages, info-level and higher.  (Same as '
         '"--report=info".)',
         ['--verbose', '-v'], {'action': 'store_const', 'const': 'info',
                               'dest': 'report_level'}),
        ('Set the threshold (<level>) at or above which system messages are '
         'converted to exceptions, halting execution immediately.  Levels as '
         'in --report.  Default is 4 (severe).',
         ['--halt'], {'dest': 'halt_level', 'default': 4,
                      'metavar': '<level>'}),
        ('Same as "--halt=info": halt processing at the slightest problem.',
         ['--strict'], {'action': 'store_const', 'const': 'info',
                        'dest': 'halt_level'}),
        ('Report debug-level system messages.',
         ['--debug'], {'action': 'store_true', 'default': 0}),
        ('Send the output of system messages (warnings) to <file>.',
         ['--warnings'], {'dest': 'warning_stream', 'metavar': '<file>'}),
        # @@@ Take default encoding & language from locale?
        #('Specify the encoding of input text.  Default is "utf-8".',
        # ['--encoding', '-e'], {'default': 'utf-8', 'metavar': '<name>'}),
        ('Specify the language of input text (ISO 639 2-letter identifier.  '
         'Default is "en" (English).',
         ['--language', '-l'], {'dest': 'language_code', 'default': 'en',
                                'metavar': '<name>'}),
        ('Show this help message and exit.',
         ['--help', '-h'], {'action': 'help'}),)
    """Command-line option specifications, common to all Docutils front-ends.
    A list/tuple of tuples: ``('help text', [list of option strings], {keyword
    arguments})``.  Option specs from Docutils components are also used (see
    `build_option_parser()`)."""

    thresholds = {'info': 1, 'warning': 2, 'error': 3, 'severe': 4, 'none': 5}
    """Lookup table for --report and --halt threshold values."""

    def __init__(self, components=(), defaults={}, *args, **kwargs):
        """
        `components` is a list of Docutils components each containing a
        ``.cmdline_options`` attribute.  `defaults` is a 
        """
        optik.OptionParser.__init__(self, *args, **kwargs)
        self.populate_from_components((self,) + tuple(components))
        self.set_defaults(**defaults)

    def populate_from_components(self, components):
        for component in components:
            if component is not None:
                for (help_text, option_strings, kwargs) \
                        in component.cmdline_options:
                    self.add_option(help=help_text, *option_strings,
                                             **kwargs)

    def check_values(self, values, args):
        values.report_level = self.check_threshold(values.report_level)
        values.halt_level = self.check_threshold(values.halt_level)
        source, destination = self.check_args(args)
        return values, source, destination

    def check_threshold(self, level):
        try:
            return int(level)
        except ValueError:
            try:
                return self.thresholds[level.lower()]
            except (KeyError, AttributeError):
                self.error('Unknown threshold: %r.' % level)

    def check_args(self, args):
        source = destination = None
        if args:
            source = args.pop(0)
        if args:
            destination = args.pop(0)
        if args:
            self.error('Maximum 2 arguments allowed.')
        return source, destination

    def get_default_values(self):
        return optik.option_parser.Values(self.defaults)
