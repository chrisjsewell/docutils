==================================================================
 Backwards compatibility settings for the Docutils latex2e writer
==================================================================

:Author:    Guenter Milde
:Contact:   milde@users.berlios.de
:Revision:  $Revision$
:Date:      $Date: 2009-02-24$
:Copyright: © 2009 G. Milde,
            Released  without warranties or conditions of any kind
            under the terms of the Apache License, Version 2.0
            http://www.apache.org/licenses/LICENSE-2.0
:Abstract:  This file documents changes and provides a style for best
            possible compatibility to the behaviour of the `latex2e`
            writer of Doctutils release 0.5.

::

  \NeedsTeXFormat{LaTeX2e}
  \ProvidesPackage{docutils-05-compat}
  [2009/03/26 v0.1 compatibility with rst2latex from Docutils 0.5]
  
.. contents::
   :depth: 3

Usage
=====

* To get an (almost) identic look for your old documents without further
  configuration, place ``docutils-05-compat.sty`` in the TEXINPUT path (e.g.
  the current work directory) and pass the
  ``--stylesheet=docutils-05-compat`` option to ``rst2latex.py``.

* To use your custom stylesheets without change, add them to the
  compatibility style, e.g.
  ``--stylesheet="docutils-05-compat,mystyle.tex``.

.. tip:: As the changes include bug fixes that are partly reverted by this
   style, it is recommended to adapt the stylesheets to the new version or
   copy just the relevant parts of this style into them.

Changes since 0.5
=================

LaTeX style sheets
------------------

New Feature:
  LaTeX packages can be used as ``--stylesheet`` argument without
  restriction.

Implementation:
  Use ``\usepackage`` if style sheet ends with ``.sty`` or has no
  extension and ``\input`` else.

Rationale:
  while ``\input`` works with extension as well as without extension,
  ``\usepackage`` expects the package name without extension. (The latex2e
  writer will strip a ``.sty`` extension.)


Backwards compatibility:
  Up to Docutils 0.5, if no filename extension is given in the
  ``stylesheet`` argument, ``.tex`` is assumed (by latex).

  Since Docutils 0.6, a stylesheet without filename extension is assumed to
  be a LaTeX package (``*.sty``) and referenced with the ``\usepackage``
  command.

.. important::
  Always specify the extension if you want the style sheet to be
  ``\input`` by LaTeX.


Custom roles
------------

New Feature: failsave implementation
  As with classes to HTML objects, class arguments are silently ignored if
  there is no styling rule for this class in a custom style sheet.

New Feature: custom roles based on standard roles
  As class support needs to be handled by the LaTeX writer, this feature was
  not present "automatically" (as in HTML). Modified visit/depart_*()
  methods for the standard roles now call visit/depart_inline() if there are
  class arguments to the node.

Backwards compatibility:
  The implementation is fully backwards compatible. (SVN versions 5742 to
  5861 contained an implementation that did not work with commands expecting
  an argument.)

Length units
------------

New Features:
  #. add default unit if none given (to prevent LaTeX error)
     a poll on docutils-users favoured ``bp`` (Big Point: 1 bp  = 1/72 in)

  #. Do not change ``px`` to ``pt``.

Rationale:
  * ``px`` is a valid unit in pdftex since version 1.3.0 released on
    2005-02-04:

     1px defaults to 1bp (or 72dpi), but can be changed with the \pdfpxdimen
     primitive::

       \pdfpxdimen=1in % 1 dpi
       \divide\pdfpxdimen by 96 % 96 dpi

     --  http://www.tug.org/applications/pdftex/NEWS

  * Modern TeX distributions use pdftex also for dvi generation
    (i.e. ``latex`` actually calls ``pdftex`` with some options).

Backwards compatibility:
  Images with width specification in ``px`` come out slightly (0.3 %) larger:

    1 px = 1 bp  = 1/72 in > 1 pt = 1/72.25 in

  This can be reset with ::

    \pdfpxdimen=1pt

.. caution:: It is impossible to revert the change of lengths specified
   without unit in a style sheet, however the 0.3 % change will be
   imperceptible in most cases.

.. admonition:: Error ``illegal unit px``

  The unit ``px`` is not defined in "pure" LaTeX, but introduced by the
  `pdfTeX` converter on 2005-02-04. `pdfTeX` is used in all modern LaTeX
  distributions (since ca. 2006) also for conversion into DVI.

  If you convert the LaTeX source with a legacy program, you might get the
  error ``illegal unit px``.

  If updating LaTeX is not an option, just remove the ``px`` from the length
  specification. HTML/CSS will default to ``px`` while the `latexe2` writer
  will add the fallback unit ``bp``.


Font encoding
-------------

New feature:
  Do not mix font-encoding and font settings: do not load `ae` and `aeguill`
  unless explicitely required via the ``--stylesheet`` option.

  :font-encoding = "":  do not load `ae` and `aeguill` packages, i.e.

                        * do not change font settings,
                        * do not use the fontenc package
                          (implicitely loaded via `ae`),
                        * use LaTeX default font encoding (OT1)

  :font-encoding = "OT1": load `fontenc` with ``\usepackage[OT1]{fontenc}``

Example:
  ``--font-encoding=LGR,T1`` becomes ``\usepackage[LGR,T1]{fontenc}``
  (Latin, Latin-1 Supplement, and Greek)


Backwards compatibility:
  Load the ae and aeguill packages if fontenc is not used::

    \@ifundefined{@ifl@ter@@}
      {\RequirePackage{ae,aeguill}}
      {}

.. Why not ``\@ifpackageloaded{fontenc}``?

   'fontenc' disables the test to enable loading more than once with
   different options. ``\@ifl@ter@@`` seems to be the only control sequence
   that survives

.. tip:: Using `ae` is not recommended. A similar look (but better
   implementation) can be achieved with the packages `lmodern`, `cmsuper`,
   or `cmlgr` all providing Computer Modern look-alikes in vector format and
   T1 encoding, e.g. ``--font-encoding=T1 --stylesheet=lmodern``.

Cleaner LaTeX source
--------------------

New feature:
  * Remove redundant "double protection" from the encoding of the "special
    printing characters" and square brackets, e.g. ``\%`` instead of
    ``{\%}``.
  * Remove some spurious whitespace, e.g. ``\item [what:] -> \item[what:]``.
  * Use conventional style for "named" macros, e.g. ``\dots{}`` instead of
    ``{\dots}``

Backwards compatibility:
  Changes do not affect the output.

Sub- and superscript as text
----------------------------

New feature:
  Set sub- and superscript role argument in text mode not as math.

  Pass the role content to ``\textsubscript`` or ``\textsuperscript``.

Backwards compatibility:
  The old implementation set the role content in Math mode, where

  * whitespace is ignored,
  * a different command set and font setting scheme is active,
  * Latin letters are typeset italic but numbers upright.

  Although it is possible to redefine ``\textsubscript`` and
  ``\textsuperscript`` to typeset the content in math-mode, this can lead to
  errors with certain input and is therefore not done in this style sheet.

.. tip:: To get italic subscripts, define and use in your document
   `custom roles`_ like ``.. role:: sub(subscript)`` and
   ``.. role:: super(superscript)`` and define the "role commands"::

     \newcommand{\docutilsrolesub}{\itshape}
     \newcommand{\docutilsrolesuper}{\itshape}

   Alternatively, if you want all sub- and superscripts in italic, redefine
   the macros::

     %% \let\DUsup\textsubscript
     %% \let\DUsuper\textsuperscript
     %% \renewcommand*{\textsubscript}{\DUsub\itshape}
     %% \renewcommand*{\textsuperscript}{\DUsuper\itshape}

   This is not fully backwards compatible, as it will also set numbers in
   italic shape and not ignore whitespace.

Page layout
-----------

New features:
  * Margins are configurable via the ``DIV=...`` document option.

  * It is possible to disable the use of the `typearea` package by not
    including the ``DIV`` setting in the ``--documentoptions``.

  * The ``\raggedbottom`` setting is no longer inserted into the document. It
    is the default for article and report classes. If requested in combination
    with a book class, it can be given in a custom style sheet.

Backwards compatibility:
  Up to version 0.5, use of `typearea` and a DIV setting of 12 were
  hard-coded into the latex2e writer ::

    \usepackage{typearea}
    \typearea{12}

  and the vertical alignment of lower boundary of the text area in book
  classes disabled via ::

    \raggedbottom

Local tocs with `minitoc`
`````````````````````````

New feature:
  If 'use-latex-toc' is set, local tables of content are typeset using the
  'minitoc' package (instead of being ignored).

Backwards compatibility:
  Disable the creation of local ToCs (ignoring all special commands) by
  replacing ``\usepackage{minitoc} with ``\usepackage{mtcoff}``.


Shorter preamble
----------------

New feature:
  The document preamble is pruned to contain only relevant commands and
  settings.

Packages that are no longer required
````````````````````````````````````

The following packages where required in pre-0.5 versions and still loaded
with version 0.5::

  \usepackage{shortvrb}
  \usepackage{amsmath}
  
Packages that are conditionally loaded
``````````````````````````````````````

Additional to the `typearea` for `page layout`_, the following packages are
only loaded if actually required by doctree elements:

Tables
^^^^^^

Standard package for tables across several pages::

  \usepackage{longtable}
  
Extra space between text in tables and the line above them
('array' is implicitely loaded by 'tabularx', see below)::

  \usepackage{array}
  \setlength{\extrarowheight}{2pt}
  
Table cells spanning multiple rows::

  \usepackage{multirow}
  
Docinfo
^^^^^^^

One-page tables with auto-width columns::

  \usepackage{tabularx}
  
Images
^^^^^^
Include graphic files::

  \usepackage{graphicx}
  
Problematic, Sidebar
^^^^^^^^^^^^^^^^^^^^
Set text and/or background colour, coloured boxes with ``\colorbox``::

  \usepackage{color}
  
Floats for footnotes settings
`````````````````````````````

Settings for the use of floats for footnotes are only included if

* the option "use-latex-footnotes" is False, and
* there is at least one footnote in the document.

::

  % begin: floats for footnotes tweaking.
  \setlength{\floatsep}{0.5em}
  \setlength{\textfloatsep}{\fill}
  \addtolength{\textfloatsep}{3em}
  \renewcommand{\textfraction}{0.5}
  \renewcommand{\topfraction}{0.5}
  \renewcommand{\bottomfraction}{0.5}
  \setcounter{totalnumber}{50}
  \setcounter{topnumber}{50}
  \setcounter{bottomnumber}{50}
  % end floats for footnotes
  
  
Special lengths, commands, and environments
-------------------------------------------

Removed definitions
```````````````````

admonition width
^^^^^^^^^^^^^^^^
The ``admonitionwith`` lenght is replaced by the more powerful
``\DUadmonition`` (see `New Definitions`_)::

  \newlength{\admonitionwidth}
  \setlength{\admonitionwidth}{0.9\textwidth}
  
  
Renamed definitions (now conditional)
`````````````````````````````````````

The names for special doctree elements are now prefixed with ``DU``.

Up to version 0.5, all definitions were included in the preamble (before the
style sheet) of every document -- even if not used in the body. Since
version 0.6, fallback definitions are included after the style sheet and
only if required.

Customization is done by an alternative definition in a style sheet with
``\newcommand`` instead of the former ``\renewcommand``.

The following code provides the old definitions and maps them (or their
custom variants) to the new interface.

docinfo width
^^^^^^^^^^^^^
::

  \newlength{\docinfowidth}
  \setlength{\docinfowidth}{0.9\textwidth}
  
  \newlength{\DUdocinfowidth}
  \AtBeginDocument{\setlength{\DUdocinfowidth}{\docinfowidth}}
  
line block
^^^^^^^^^^
::

  \newlength{\lineblockindentation}
  \setlength{\lineblockindentation}{2.5em}
  \newenvironment{lineblock}[1]
  {\begin{list}{}
    {\setlength{\partopsep}{\parskip}
     \addtolength{\partopsep}{\baselineskip}
     \topsep0pt\itemsep0.15\baselineskip\parsep0pt
     \leftmargin#1}
   \raggedright}
  {\end{list}}
  
  \newlength{\DUlineblockindent}
  \AtBeginDocument{\setlength{\DUlineblockindent}{\lineblockindentation}}
  \newenvironment{DUlineblock}[1]
    {\begin{lineblock}{#1}}
    {\end{lineblock}}
  
local line width
^^^^^^^^^^^^^^^^

The ``\locallinewidth`` length for internal use in tables is replaced
by ``\DUtablewidth``. It was never intended for customization::

  \newlength{\locallinewidth}
  
option lists
^^^^^^^^^^^^
::

  \newcommand{\optionlistlabel}[1]{\bf #1 \hfill}
  \newenvironment{optionlist}[1]
  {\begin{list}{}
    {\setlength{\labelwidth}{#1}
     \setlength{\rightmargin}{1cm}
     \setlength{\leftmargin}{\rightmargin}
     \addtolength{\leftmargin}{\labelwidth}
     \addtolength{\leftmargin}{\labelsep}
     \renewcommand{\makelabel}{\optionlistlabel}}
  }{\end{list}}
  
  \newcommand{\DUoptionlistlabel}{\optionlistlabel}
  \newenvironment{DUoptionlist}
    {\begin{optionlist}{3cm}}
    {\end{optionlist}}
  
rubric
^^^^^^
::

  \newcommand{\rubric}[1]{\subsection*{~\hfill {\it #1} \hfill ~}}
  
  \newcommand{\DUrubric}[1]{\rubric{#1}}
  
title reference role
^^^^^^^^^^^^^^^^^^^^
::

  \newcommand{\titlereference}[1]{\textsl{#1}}
  
  \newcommand{\DUroletitlereference}[1]{\titlereference{#1}}
  
  
New definitions
```````````````

New Feature:
  Enable customization of some more Docutils elements with special commands

  :sidebar:    ``DUsidebar`` command
  :transition: ``\DUtransition`` command
  :admonition: ``DUadmonition`` environment (replacing ``\admonitionwidth``)
  :field list: ``DUfieldlist`` environment

Backwards compatibility:
  In most cases, the default definition corresponds to the previously used
  construct. The following definitions restore the old behaviour in case of
  changes.

admonitions
^^^^^^^^^^^
Use the old variable for `admonition width`_::

  \newcommand{\DUadmonition}[1]{%
    \begin{center}
      \fbox{\parbox{\admonitionwidth}{\sffamily #1}}
    \end{center}
  }
