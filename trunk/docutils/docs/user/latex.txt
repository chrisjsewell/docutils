================================
 Generating LaTeX with Docutils
================================

:Author: Engelbert Gruber, GÃ¼nter Milde
:Contact: docutils-users@lists.sourceforge.net
:Revision: $Revision$
:Date: $Date$
:Copyright: This document has been placed in the public domain.

.. contents::


Introduction
============

Producing LaTeX code from reST input can be done in at least two ways:

a. Transform the internal markup into corresponding LaTeX markup.
   For example, a section title would be written with the LaTeX section
   command: ``\section{this section title}``.

   This can be constrained by the LaTeX document class
   and may require hacking around bugs/features in LaTeX,
   but it produces a readable LaTeX file.

   If you prefer this approach, try ``rst2latex.py``.

b. Use LaTeX as a typesetting system to produce the desired document
   structure without bothering with the usual LaTeX idioms for representing
   document structure information.

   This is not constrained by a particular LaTeX document class
   and therefore requires hacking around bugs/features in LaTeX.
   But it produces a hard to read LaTeX file.

   ``rst2newlatex.py`` adds a lot of LaTeX macros and uses LaTeX as a
   typesetter without caring about producing readable LaTeX files.

This documents describes the `latex2e` writer called by the front end
``rst2latex.py``.

PDF generation
==============

Most probably, LaTeX code is not the desired end-format of the document.
LaTeX offers three ways to generate PDF documents from the LaTeX source:

pdflatex
  Generates a PDF document directly from the LaTeX file. As always one
  might need to call it twice (thrice) to get internal references correct.

latex dvipdfm
  Use ``latex`` to generate a DVI file and ``dvipdfm`` to produce a PDF
  file. If you will take this approach, add ``dvipdfm`` to the
  ``--documentoptions``.

latex dvips ps2pdf
  Produce a DVI file with ``latex``, postscript with ``dvips`` and PDF with
  ``ps2pdf``.

The Rubber_ wrapper for LaTeX and friends can be used to automatically run
all programs the required number of times and delete "spurious" files.

.. _Rubber: http://iml.univ-mrs.fr/~beffara/soft/rubber/


Configuration
=============

Configuration can be done in several ways:

1. `Configuration options`_ to the Docutils tool as command line option
   or in configuration files,

2. `custom style sheets`_ and LaTeX packages, as well as

3. `raw LaTeX`_ in the document.

Configuration options
---------------------

The LaTeX code generation can be configured via options to the Docutils
latex writer given as

command-line options
  to the conversion command (run ``rst2latex.py --help`` to get a list of
  available options), or

configuration settings 
  in a configuration file (see `Docutils Configuration`_ for details).

.. _Docutils Configuration:
   http://docutils.sourceforge.net/docs/user/config.html


Custom style sheets
-------------------

Style sheets can be used to configure the look of the printout/PDF by
(re-)defining LaTeX-commands and settings.

Specifying style sheets
~~~~~~~~~~~~~~~~~~~~~~~~

The option::

  --stylesheet=STYLESHEET

references STYLESHEET using the command::

  \usepackage{STYLESHEET}

if STYLESHEET has no extension or the extension ``.sty``. (The extension
will be dropped.)

With any other extension, the command::

 \input{STYLESHEET}

is used.

It is possible to specify multiple style sheets (see examples below).

.. note::
  There is no need to specify a path, if your style files are installed
  in the `TeX input path`_.

If the ``--embed-stylesheet`` option is set, the content of STYLESHEET
is inserted instead. Currently, this fails if the file is not available via
the given path (i.e. without search in the `TeX input path`_).


Examples
~~~~~~~~

* Times Roman fonts with `mathptmx` package::

    --stylesheet==mathptmx

  or ::

    --stylesheet==mathptmx.sty

* Input ``preamble.tex``::

   --stylesheet==preamble.tex

  (any extension except ``.sty`` is allowed)

* Use three style sheets:

  :mathptmx: Times fonts,
  :parskip:  separate paragraphs by increased lineskip,
  :preamble.tex: custom style sheet::

    --stylesheet==mathptmx,parskip,preamble.tex

Stylesheet Repository
~~~~~~~~~~~~~~~~~~~~~

There is a `repository of user-contributed style sheets`_ in the Docutils
Sandbox_.


.. _TeX input path: http://www.tex.ac.uk/cgi-bin/texfaq2html?label=what-TDS

.. _repository of user-contributed style sheets:
   ../../../sandbox/stylesheets/
.. _sandbox: ../../../sandbox/


Raw LaTeX
---------

By means of the `raw directive`_ one can give commands directly to LaTeX.

This can be both, styling and printing commands, as LaTeX (unlike HTML/CSS)
uses one common language for content and style.

This means that most of the example code for the style sheet will also work
as raw LaTeX inside the document. An exception are commands that need to be
given in the document preamble (e.g. package loading with ``\usepackage``,
which can be done with the ``--style-sheet`` command line option instead).

Examples
~~~~~~~~

Forcing a page break::

  .. raw:: latex

     \newpage

Setting math in LaTeX::

  .. raw:: latex

     \[x^3 + 3x^2a + 3xa^2 + a^3,\]

(Drawback: the formula will be invisible in other output formats.)

Making a "colorbox": If someone wants to get a red background for a
text block, she/he can define ``\definecolor{bg}{rgb}{.9,0,0}`` in a custom
style sheet and in the document do something like this::

  |begincolorbox|
  Nobody expects the Spanish inquisition.
  |endcolorbox|

  .. |begincolorbox| raw:: latex

     \\begin{center}
     \\colorbox{bg}{
     \\parbox{0.985\\linewidth}{

  .. |endcolorbox| raw:: latex

     }}
     \\end{center}


.. _raw directive:
   http://docutils.sourceforge.net/docs/ref/rst/directives.html#raw


Docutils special commands
-------------------------

The generated LaTeX documents should be kept processable by a standard LaTeX
installation, therefore the document contains default settings. The
style sheet is included after the default definitions, so these definitions
can be changed with ``\renewcommand`` in the style sheet.

Some definitions are only needed with special rst constructs. For these,
fallback definitions are provided:

* only if needed in the document,
* using ``\providecommand``,
* *after* the custom style sheet.

By convention, these fallback definitions use the prefix ``\DU``\ [#]_.
The style sheet can define alternative implementations with ``\newcommand``.

.. [#] for Documentation Utilities = Docutils


admonition width
~~~~~~~~~~~~~~~~

The width of admonitions.

Default:
  ``0.9*textwidth``

Example:
  set to 70% of text width::

    \setlength{\admonitionwidth}{0.7\textwidth}

docinfo width
~~~~~~~~~~~~~

The width for the `docinfo` table.

Default:
  ``0.9*textwidth``

Example:
  set to 70% of text width::

  \setlength{\docinfowidth}{0.7\textwidth}

rubric style
~~~~~~~~~~~~

How to lay out the "rubric" element.

Default:
  subsection style italic, centred::

    \newcommand{\rubric}[1]{\subsection*{~\hfill {\it #1} \hfill ~}}

Example:
  The (re)definition::

    \renewcommand{\rubric}[1]{\subsection*{
      ~\hfill {\color{red} #1} \hfill ~}}

  sets rubric to subsection style in red.


Document elements
-----------------

images
~~~~~~

Images are included in LaTeX by the `graphicx` package. The supported
image formats depend on the used driver (dvi, dvips, pdftex, ...).

If PDF-image inclusion in PDF files fails, specify
``--graphicx-option=pdftex`` or ``--graphicx-option=auto``.


custom interpreted text roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The rst `role directive`_ allows defining custom `text roles`_
that mark parts of inline text (spans) with a class argument.

* Role names and class arguments are are converted to conform to the regular
  expression ``[a-z][-a-z0-9]*`` (see `class directive`_).

* Class arguments may contain numbers and hyphens, which need special
  treatment in LaTeX command names. (The special command ``\@namedef`` can
  help with the definition of corresponding commands.)

* Custom roles can have multiple class arguments

  In contrast to HTML/CSS, the order of the class arguments might matter.


Example 1:
  Typeset text in small caps::

    .. role:: smallcaps

    :smallcaps:`Fourier` transformation

  This is transformed to the LaTeX code::

    \DUrole{smallcaps}{Fourier} transformation

  The definition of ``\DUrole`` will look for a macro named
  ``\docutilsrolesmallcaps``.\ [#]_ The definition ::

    \newcommand{\docutilsrolesmallcaps}{\textsc}

  as `raw LaTeX`_ or in the custom style sheet will give the expected result
  (if the chosen font supports small caps).

  .. [#] It is possible to specify an alternative definition of ``\DUrole``
     in a style sheet, see _`Docutils special commands`.

Example 2:
  Subscript text in normal size and *italic* shape::
  
  .. role:: sub(subscript)
  
  As "sub" inherits from the standard "subscript" role, the LaTeX macro only
  needs to set the size and shape::

    \newcommand{\docutilsrolesub}{\normalsize\itshape}

Example 3:
  A role with several classes and a converted class name::
  
    .. role:: custom4
       :class: argI argII arg_3

  is translated to the nested commands::
  
    \DUrole{argi}{\DUrole{argii}{\DUrole{arg-3}{<content>}}}

  With the definitions::
  
    \newcommand{\docutilsroleargi}[1]{\textsc}
    \newcommand{\docutilsroleargii}[1]{{\large #1}}
    \makeatletter
    \@namedef{docutilsrolearg-3}{\textbf}
    \makeatother
  
  in a style sheet\ [#]_ or as `raw LaTeX`_ in the document source,
  text styled with ``:custom4:`large bold small-caps``` will be typeset
  accordingly.

.. [#] Leave out the ``\makeatletter`` - ``\makeatother`` pair if the style
   sheet is a LaTeX package (``*.sty``).

.. _role directive:
   http://docutils.sourceforge.net/docs/ref/rst/directives.html#role

.. _text roles:
   http://docutils.sourceforge.net/docs/ref/rst/roles.html

.. _class directive:
   http://docutils.sourceforge.net/docs/ref/rst/directives.html#class


literal blocks
~~~~~~~~~~~~~~

The command line option ``--literal-env`` allows the specification of the
environment to use with literal blocks, e.g. ``--literal-env=verbatim`` or
``--literal-env=lstlisting``.

The environment is used for literal-blocks when possible\ [#]_.

Example:
  The ``lstlisting`` environment is highly configurable (as documented in
  listings.pdf_), for instance ::

    \renewcommand{\ttdefault}{txtt}
    \lstset{language=Python,
            morekeywords=[1]{yield}
    }
    \lstloadlanguages{Python}
    \lstset{
      basicstyle=\ttfamily,
      keywordstyle=\bfseries,
      commentstyle=\rmfamily\itshape,
      stringstyle=\slshape,
    }
    \lstset{showstringspaces=false}
    \lstset{columns=fullflexible,
         basewidth={0.5em,0.4em}}

.. [#] A literal-block element, when processed by a Docutils writer might
   have it's origin in a markup with "::" syntax or a ".. parsed-literal::"
   directive.

   A LaTeX verbatim environment is only usable if there is no other markup
   contained in the literal-block.

.. _listings.pdf:
    http://dante.ctan.org/CTAN/macros/latex/contrib/listings/listings.pdf

list of figures/tables
~~~~~~~~~~~~~~~~~~~~~~

Docutils does not support lists of figures or tables.

However, with LaTeX, they can be generated using `raw LaTeX`_ in the
document source:

* A list of figures with the LaTeX command ``postfixes``,
* a list of tables by ``\listoftables``.

Example:
  ::

    .. raw:: latex

       \listoffigures



How to configure the ...
------------------------

document class
~~~~~~~~~~~~~~

The LaTeX document class can be set using the
``--documentclass=DOCUMENTCLASS`` option.
It cannot be changed in a style sheet.

Default:
  article

Some possibilities:
  report, book, scrarticle, scrreport, scrbook, ...

paper size
~~~~~~~~~~

Paper geometry can be changed using ``--documentoptions`` or
``\geometry{OPTIONLIST}`` LaTeX commands in a style sheet.

Default:
  a4paper

Some possibilities:

* a4paper, b3paper, letterpaper, executivepaper, legalpaper
* landscape, portrait, twoside.

and lots of other options for setting margins (see the `geometry manual`_).

Example:
  LaTeX command::

    \geometry{a5paper,landscape}

  command line argument::

    --documentoptions=a5paper,landscape

.. _geometry manual:
   http://dante.ctan.org/CTAN/macros/latex/contrib/geometry/geometry.pdf


line spacing
~~~~~~~~~~~~

Set with package `setspace`, providing the ``\singlespacing``,
``\onehalfspacing``, and ``\doublespacing`` commands, or (for small
adjustments) with the LaTeX command ``\linespread``

Examples:
  Get document wide double spacing::

    \usepackage{setspace}
    \doublespacing

  Increase line spacing by five percent for better readability::

    \linespread{1.05}


paragraph indent
~~~~~~~~~~~~~~~~

Default (in most document classes):
  indent the first line in a paragraph unless it is the first line of a
  chapter, section, subsection, or subsubsection.

Example:
  To set paragraph indentation to zero but add a vertical space between
  load the `parskip` package with the command line argument::

    --stylesheet=parskip

  or in your style sheet with::

    \usepackage{parskip}


text font
~~~~~~~~~

Unfortunately, LaTeX cannot use the fonts of the operating system directly
[#]_ but needs specially installed fonts with additional supporting files.
The `LaTeX Font Catalogue`_ provides information and examples for a wide
range of fonts available for use with LaTeX.

Default:
  Computer Modern (CM)

Alternative fonts can be selected by

a) specifying the corresponding LaTeX package or
b) by changing the font-default macros.

* Packages can be specified as arguments to the ``--stylesheet`` option or
  in a custom style sheet.
* Packages can be combined.
* Passing options to a package is only possible in the style sheet.

Examples:
  * Use `LaTeX Modern`, a Type 1 variant of CM.

    LaTeX code::

      \usepackage{lmodern}

    Command line argument::

      --stylesheet=lmodern

  * The ubiquitous "Times/Helvetica/Courier"
    combination is achieved by::

      \usepackage{mathptmx}            % Times for serif and math
      \usepackage[scaled=.90]{helvet}  % downscaled Helvetica for sans serif
      \usepackage{courier}             % Courier for teletype (mono-space)

  * Changing a font without using a package (the macros are ``\rmdefault``,
    ``sfdefault`` and ``ttdefault``)::

      \renewcommand{\ttdefault}{txtt}


When generating PDF-files from LaTeX, the files can become smaller if
standard Postscript fonts are used.

The following table lists the font packages for standard Postscript fonts
(see `Using common Postscript fonts with LaTeX`_ for details):


============ ============ ============= ============= ============
Package      Roman        Sans Serif    Typewriter    Math
============ ============ ============= ============= ============
(none)       CM Roman     CM Sans Serif CM Typewriter CM Math

mathpazo     Palatino                                 Palatino

mathptmx     Times                                    Times

helvet                    Helvetica

avant                     Avant Garde

courier                                 Courier

chancery     Zapf
             Chancery

bookman      Bookman      Avant Garde   Courier

newcent      New Century  Avant Garde   Courier
             Schoolbook

charter      Charter

utopia       Utopia
============ ============ ============= ============= ============

Extended versions of the standard Postscript fonts including accented chars,
Greek and Cyrillic are available with the `TeX Gyre`_ bundle which is part
of, e.g., `TeX Live`_.

.. [#] XeTeX_ can, but is not (yet) supported by Docutils

.. _XeTeX: http://scripts.sil.org/xetex
.. _LaTeX Font Catalogue:
   http://www.tug.dk/FontCatalogue/
.. _TeX Gyre: http://www.gust.org.pl/projects/e-foundry/tex-gyre
.. _Using common PostScript fonts with LaTeX:
   http://dante.ctan.org/CTAN/macros/latex/required/psnfss/psnfss2e.pdf
.. _TeX Live: http://tug.org/texlive/

text encoding
~~~~~~~~~~~~~

Default:
  The generated LaTeX documents are in the input encoding.

Example:
  Use latin1 text encoding for the LaTeX source::

    --output-encoding=latin1

* If the source document is in utf-8 encoding (or
  ``--output-encoding=utf-8`` is set), LaTeX needs Unicode support (the
  `ucs` package). If this package is not available, specify a different
  output-encoding, e.g. ``latin1``.

* If LaTeX issues a Warning about unloaded/unknown characters adding ::

    \PreloadUnicodePage{n}

  (where *n* is the Unicode page-number) to the style sheet might help.

  .. _LaTeX Unicode: http://www.unruh.de/DniQ/latex/unicode/

* Unicode box drawing characters:

  - generate LaTeX code with ``--output-encoding=utf-8:strict``.

  - In the latex file, edit the preamble to load "ucs" with "postscript"
    option and also load the pstricks package::

        \usepackage{shortvrb}
      - \usepackage{ucs}
      + \usepackage[postscript]{ucs}
      + \usepackage{pstricks}
        \usepackage[utf8x]{inputenc}

  - Convert to PDF with ``latex``, ``dvips``, and ``ps2pdf``.


font encoding
~~~~~~~~~~~~~

The `LaTeX font encoding`_ can be selected with option ``--font-encoding``.

Example:
  ::

    --font-encoding=LGR,T1

  inserts ``\usepackage[LGR,T1]{fontenc}`` (for characters in the Unicode
  blocks Latin, Latin-1 Supplement, and Greek).

Default: "" (empty string)
  Do not use the fontenc package. LaTeX will default to 'OT1'.

The recommended setting for Latin based scripts is "T1" together with a
T1-encoded "Type 1" (vector) font, for example `Latin Modern`_::

    --font-encoding=T1 --stylesheet=lmodern

.. _LaTeX font encoding:
   http://dante.ctan.org/CTAN/macros/latex/doc/encguide.pdf

.. _Latin Modern:
   http://dante.ctan.org/CTAN/help/Catalogue/entries/lm.html

hyphenation
~~~~~~~~~~~

The amount of hyphenation is influenced by ``\hyphenpenalty``, setting it to
10000 almost prevents hyphenation. As this produces lines with more space
between words one should increase Latex's ``\tolerance`` for this.

Example:
  ::

    \hyphenpenalty=5000
    \tolerance=1000


size of a pixel (length unit ``px``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The length unit ``px`` stands for `pixel` and its value has varying
definitions:

  :pdftex:   defines 1px = 1bp = 1/72 in, i.e. 72 DPI (dots per inch)
  :CSS:      defines 1 px = 1/96 in, i.e. 92 DPI
  :browsers: use the actual screen resolution (or what they think it is)
             (usually between 72 DPI and 100 DPI).

It is possible to configure the conversion factor of ``px`` in a style sheet
by changing the value of the `pxdimen` register, e.g.::

       \pdfpxdimen=1in % 1 DPI
       \divide\pdfpxdimen by 92 % 92 DPI


Error ``illegal unit px``:
  The unit ``px`` is not defined in "pure" LaTeX, but introduced by the
  `pdfTeX` converter on 2005-02-04. `pdfTeX` is used in all modern LaTeX
  distributions (since ca. 2006) also for conversion into DVI.

  If you convert the LaTeX source with a legacy program, you might get the
  error ``illegal unit px``.

  If updating LaTeX is not an option, just remove the ``px`` from the length
  specification. HTML/CSS will default to ``px`` while the `latexe2` writer
  will add the fallback unit ``bp``.


title page
~~~~~~~~~~

Currently the title page only shows the title and subtitle, date and author
are shown in the `docinfo` table. To change the title-page layout one must
redefine the ``\maketitle`` command in the stylesheet

Example
 ::

  \makeatletter
  \renewcommand{\maketitle}{
    \begin{titlepage}
      \begin{center}
      \textsf{TITLE \@title} \\
      Date: \today
      \end{center}
    \end{titlepage}
  }
  \makeatother

The macro ``\@title`` contains the title.


section numbering
~~~~~~~~~~~~~~~~~

The options ``--section-numbering`` and ``--use-latex-toc``, both
influence section numbering.

* If ``--use-latex-toc`` is specified the latex-writer generates
  LaTeX output, so that LaTeX generates a table of contents and
  generates section numbers. Usually one does not want to have
  section numbers generated by Docutils in this case, therefore
  ``--no-section-numbering`` should be specified.

  The advantage is that LaTeX does put page numbers into the
  table of contents, but the section depth is limited by the
  used LaTeX document class, usually to four levels.

* If section numbering and LaTeX table of contents is used LaTeX and
  Docutils will number sections. To switch off displaying of Latex's
  numbers one has to add following lines to the style sheet ::

    % no section number display
    \makeatletter
    \def\@seccntformat#1{}
    \makeatother
    % no numbers in toc
    \renewcommand{\numberline}[1]{}

  This enables to have the same section numbers as in other Docutils
  writers and page numbers in the table of contents.

page numbering
~~~~~~~~~~~~~~

Example:
  Number pages by chapter

  This can be accomplished with ::

    \usepackage{chappg}

  From the documentation

    Basic operation of the package is to redefine ``\thepage`` to be
    ``\thechapter-\arabic{page}``, and to cause the page number to be reset
    (to 1) at the start of each chapter.  So the pages of chapter 3 will
    be numbered 3-1, 3-2, ..., and the pages of appendix B will be
    numbered B-1, B-2, ...

  See documentation for details and other possibilities.

Changes
=======

The Docutils HISTORY_ lists all changes during the history of docutils.
Changes since the last release (0.5) are summarized in the RELEASE-NOTES_
and explained in detail in docutils-05-compat_


Compatibility Style Sheet
-------------------------

docutils-05-compat.sty_ is a style sheet that provides some backwards
compatibility (it is the LaTeX source version of docutils-05-compat_). 


.. _HISTORY: ../../HISTORY.html
.. _RELEASE-NOTES: ../../RELEASE-NOTES.html
.. _docutils-05-compat: docutils-05-compat.sty.html
.. _docutils-05-compat.sty:
   ../../docutils/writers/latex2e/docutils-05-compat.sty


Problems
========

Open to be fixed or open to discussion.

See also the discussion and proposals in the `latex-variants`_ sandbox
project.

.. _latex-variants:
   http://docutils.sourceforge.net/sandbox/latex-variants/README.html

Lists
-----

Definitions in definition lists start on the same line as the term. Putting
``\leavevmode`` after the term results in a new newline if the definition
starts with a bullet list or similar.

footnotes and citations
-----------------------

Initially both were implemented using figures, because hyperlinking back
and forth seemed to be impossible. Later images were put into figures.

This results in footnotes images and figures possibly being mixed at page
foot.

* Use LaTeX footnotes and citations for printing or more complex layout.
* Footnotes and citations done with figures might excell in hyperlink
  support.

If ``use-latex-citations`` is used a bibliography is inserted right at
the end of the document. *This should be customizable*.

If ``use-latex-citations`` is used adjacent citation references (separated
only by a single space or a newline) are combined to a single citation
group, i.e. ``[cite1]_ [cite2]_`` results in ``\cite{cite1,cite2}``.

Tables
------

:Tablewidth: reST-documents line length is assumed to be 80 characters. The
             tablewidth is set relative to this value. If someone produces
             documents with line length of 132 this will fail.

             Table width is tried to fit in page even if it is wider than
             the assumed linewidth, still assumed linewidth is a hook.

* In tools.txt the option tables right column, there should be some more
  spacing between the description and the next paragraph "Default:".

  Paragraph separation in tables is hairy.
  see http://www.tex.ac.uk/cgi-bin/texfaq2html?label=struttab

  - The strut solution did not work.
  - setting extrarowheight added ad top of row not between paragraphs in
    a cell. ALTHOUGH i set it to 2pt because, text is too close to the topline.
  - baselineskip/stretch does not help.
* Should there be two hlines after table head and on table end ?
* Table: multicol cells are always {l}.
* The contents of a rowspan cell do not influence table height.
  (Maybe if we put a tabular inside ?)
* Table heads and footer for longtable (firstpage lastpage ..).
* Table cells with multirow and multicolumn
* literal-blocks in table cells:

  - If verbatim or flushleft is used one gets vertical space above and below.
  - This is bad for the topmost paragraph in a cell, therefore the writer
    uses raggedright.
  - Ragged right fails on followup paragraphs as the vertical space would be
    missing.
* Use tabularx column type ``X`` and let latex decide width.
* csv-tables do not have a colwidth.


Notes
~~~~~

* table-style booktabs: booktabs.sty 1.00 does not work with longtable.
* If default table-style is not booktabs, but the document contains a table
  with class booktabs, one has to add the latex package booktabs. That means
  put the line ::

    \usepackage{booktabs}

  into your latex-style.

Wrapping Figures
----------------
Wrapping text around figures is currently not supported.
(Requires the `wrapfig`_ package.)

.. _wrapfig: http://dante.ctan.org/CTAN/help/Catalogue/entries/wrapfig.html


Miscellaneous
-------------

* Selection of LaTeX fontsize configurable (needs an option).
* Assumed reST linelength for table width setting configurable.
* literal-block indentation configurable.
* recognize LaTeX and replace by ``\LaTeX`` (or not?).
* Sidebar handling.
* Pdfbookmark level 4 (and greater) does not work (might be settable but OTOH).
* center subsection{Abstract} gives a LaTeX error here.
  ``! LaTeX Error: Something's wrong--perhaps a missing \item.``
  Committed a HACK: centering by hfill.
* Document errors are also too silent.
* Use optionlist for docinfo, the table does only work for single page.
* Consider peter funk's hooks for TeXpert:

  * Define his own document preamble (including the choice to
    choose his own documentclass.  That would make the ``--documentclass``
    option superfluous).  I suggest to call this option ``--preamble``
  * Use two additional hooks to put additional stuff just behind the
    ``\begin{document}`` and just before the ``\end{document}`` macros.
    Typical uses would be ``\tableofcontents``, ``\listoffigures`` and
    ``\appendix``, ``\makeindex``, ``\makeglossary`` and some such
    for larger documents.

* The intentional problematic error in docs/user/rst/demo.txt is not
  referring anywhere.
* Footnotes are not all on the same page (as in
  docs/user/rst/demo.txt) and do not link back and forth.
* No link to system errors.
* Hyperlinks are not hyphenated; this leads to bad spacing. See
  docs/user/rst/demo.txt 2.14 directives.
* Meta keywords into PDF ?
* Pagestyle headings does not work, when sections are starred.
* For additional docinfo items: the field_body is inserted as text, i.e. no
  markup is done.
* Multiple author entries in docinfo (same thing as in html).

* keep literal-blocks together on a page, avoid pagebreaks.

  failed experiments up to now: samepage, minipage, pagebreak 1 to 4 before
  the block.

* Enable the choice between ``utf8`` (standard `fontenc`) and ``utf8x``
  (`ucs`) text encoding.
