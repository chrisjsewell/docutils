<?xml version="1.0" encoding="UTF-8"?>

<!--
  =========================================================
                                                           
  (c) 2004, RenderX                                        
                                                           
  Author: Alexander Peshkov <peshkov@renderx.com>          
                                                           
  Permission is granted to use this document, copy and     
  modify free of charge, provided that every derived work  
  bear a reference to the present document.                
                                                           
  This document contains a computer program written in     
  XSL Transformations Language. It is published with no    
  warranty of any kind about its usability, as a mere      
  example of XSL technology. RenderX shall not be          
  considered liable for any damage or loss of data caused  
  by use of this program.                                  
                                                           
  =========================================================
-->
<grammar xmlns="http://relaxng.org/ns/structure/1.0">
  <include href="basic_properties.rng"/>

  <!--
    ****************************************************************************************
    Properties used by top-level elements
    ****************************************************************************************
    ===============================================================
    Root element can bear inheritable properties, passed further to 
    fo:flows/fo:static-contents. Inheritable properties from fo:layout-master-set 
    are banned in this version of schema.
    ===============================================================
  -->
  <define name="root.attlist">
    <optional>
      <ref name="media-usage.attr"/>
    </optional>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Document meta information - RenderX extension
    ===============================================================
  -->
  <define name="meta-info.attlist">
    <empty/>
  </define>
  <define name="meta-field.attlist">
    <ref name="name.attr"/>
    <ref name="value.attr"/>
  </define>
  <!--
    ===============================================================
    Color profile declarations
    ===============================================================
  -->
  <define name="declarations.attlist">
    <empty/>
  </define>
  <define name="color-profile.attlist">
    <ref name="src.attr"/>
    <ref name="color-profile-name.attr"/>
    <optional>
      <ref name="rendering-intent.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Bookmarks - RenderX extension
    ===============================================================
  -->
  <define name="outline.attlist">
    <empty/>
  </define>
  <define name="bookmark.attlist">
    <choice>
      <ref name="internal-destination.attr"/>
      <ref name="external-destination.attr"/>
    </choice>
    <optional>
      <ref name="collapse-subtree.attr"/>
    </optional>
  </define>
  <define name="bookmark-label.attlist">
    <empty/>
  </define>
  <!--
    ===============================================================
    Layout-master-set contains a set of page-masters. Neither of
    its descendants generates any area, so no inherited elements
    can be specified on it or on its children.
    ===============================================================
  -->
  <define name="layout-master-set.attlist">
    <empty/>
  </define>
  <!--
    ===============================================================
    Page sequence master
    ===============================================================
  -->
  <define name="page-sequence-master.attlist">
    <ref name="master-name.attr"/>
  </define>
  <!--
    ===============================================================
    Sequence specifiers.
    ===============================================================
  -->
  <define name="single-page-master-reference.attlist">
    <ref name="master-reference.attr"/>
  </define>
  <define name="repeatable-page-master-reference.attlist">
    <ref name="master-reference.attr"/>
    <optional>
      <ref name="maximum-repeats.attr"/>
    </optional>
  </define>
  <define name="repeatable-page-master-alternatives.attlist">
    <optional>
      <ref name="maximum-repeats.attr"/>
    </optional>
  </define>
  <define name="conditional-page-master-reference.attlist">
    <ref name="master-reference.attr"/>
    <optional>
      <ref name="page-position.attr"/>
    </optional>
    <optional>
      <ref name="odd-or-even.attr"/>
    </optional>
    <optional>
      <ref name="blank-or-not-blank.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Simple page master defines a page layout. It does not
    explicitly generate any content. Most of its properties are
    local except for writing-mode and reference-orientation that
    are inherited by the underlying region-* objects.
    ===============================================================
    NOTE. We could think about a common background/padding/border
    for every page instance generated by the page master. For such
    a scope, we may add borders/padding/background to its features.
    However, in the current version this is ruled out explicitly by the XSL specs.
  -->
  <define name="simple-page-master.attlist">
    <ref name="margin-properties-CSS"/>
    <ref name="master-name.attr"/>
    <optional>
      <ref name="page-height.attr"/>
    </optional>
    <optional>
      <ref name="page-width.attr"/>
    </optional>
    <optional>
      <ref name="reference-orientation.attr"/>
    </optional>
    <optional>
      <ref name="size.attr"/>
    </optional>
    <optional>
      <ref name="writing-mode.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Region elements by themselves do not generate any content.
    Reference-orientation and writing-mode may be inherited from
    the page master; all other features are local.
    ===============================================================
  -->
  <define name="region-properties">
    <ref name="border-padding-background-properties"/>
    <ref name="area-properties"/>
    <optional>
      <ref name="region-name.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Body region: middle of the page. Unlike side regions, this one
    may have multiple columns.
    ===============================================================  
    NOTE: We have restricted margin properties to be margin-only,
    allowing no spaces. This is done because no clear semantics
    can be ascribed to single components of a space vector.
  -->
  <define name="region-body.attlist">
    <ref name="region-properties"/>
    <ref name="margin-properties-CSS"/>
    <optional>
      <ref name="column-count.attr"/>
    </optional>
    <optional>
      <ref name="column-gap.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Side regions: page edges. These regions have extent and
    precedence that is used to arbitrate corner conflicts. Side
    regions are viewed as frames, and may not have margins.
    ===============================================================
    NOTE: Extent made obligatory: its default value of 0.0pt does not
    make much sense.
  -->
  <define name="region-before.attlist">
    <ref name="region-properties"/>
    <ref name="extent.attr"/>
    <optional>
      <ref name="precedence.attr"/>
    </optional>
  </define>
  <define name="region-after.attlist">
    <ref name="region-properties"/>
    <ref name="extent.attr"/>
    <optional>
      <ref name="precedence.attr"/>
    </optional>
  </define>
  <define name="region-start.attlist">
    <ref name="region-properties"/>
    <ref name="extent.attr"/>
  </define>
  <define name="region-end.attlist">
    <ref name="region-properties"/>
    <ref name="extent.attr"/>
  </define>
  <!--
    ===============================================================
    Page sequence. 
    ===============================================================
  -->
  <define name="page-sequence.attlist">
    <optional>
      <ref name="format.attr"/>
    </optional>
    <optional>
      <ref name="letter-value.attr"/>
    </optional>
    <optional>
      <ref name="grouping-separator.attr"/>
    </optional>
    <optional>
      <ref name="grouping-size.attr"/>
    </optional>
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <optional>
      <ref name="initial-page-number.attr"/>
    </optional>
    <optional>
      <ref name="force-page-count.attr"/>
    </optional>
    <ref name="master-reference.attr"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Title
    ===============================================================
    MEMO: Why 'id' attribute is not allowed here?
    MEMO: Does it makes sence to add relative-position here? 
    According to Section 7.12.1. "relative-position" it is allowed everywhere except fo:block-container
    Should we allow all inline properties here??
  -->
  <define name="title.attlist">
    <ref name="accessibility-properties"/>
    <ref name="aural-properties-unheritable"/>
    <ref name="border-padding-background-properties"/>
    <ref name="margin-properties-inline"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Flows. 'flow-name' feature defines linkage of the flow to a region in the page master.
    ===============================================================
  -->
  <define name="flow-properties">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="flow-name.attr"/>
    <ref name="inheritable-properties"/>
  </define>
  <define name="flow.attlist">
    <ref name="flow-properties"/>
  </define>
  <define name="static-content.attlist">
    <ref name="flow-properties"/>
  </define>
  <!--
    ===============================================================
    An extension element, rx:flow-section.
    Acts like a top-level block with multiple columns.
    ===============================================================
  -->
  <define name="flow-section.attlist">
    <optional>
      <ref name="column-count.attr"/>
    </optional>
    <optional>
      <ref name="column-gap.attr"/>
    </optional>
    <ref name="border-padding-background-properties"/>
    <ref name="margin-properties-block"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ****************************************************************************************
    Properties used by content-bearing elements
    ****************************************************************************************
  -->
  <!--
    ===============================================================
    Properties of block formatting objects.
    ===============================================================
    ===============================================================
    Besides properties used to format the block itself, it also conveys
    formatting information to its inline-level children.
    ===============================================================
  -->
  <define name="block.attlist">
    <ref name="block-properties"/>
    <ref name="character-properties-unheritable"/>
    <optional>
      <ref name="text-altitude.attr"/>
    </optional>
    <optional>
      <ref name="text-depth.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Block container
    ===============================================================
  -->
  <!--
    MEMO: We are forced to create separate element 'absolute-container' in order 
    to satisfy XSL FO spec requirements. 
  -->
  <define name="absolute-container.attlist">
    <ref name="absolute-position-properties"/>
    <ref name="area-properties-unheritable"/>
    <ref name="box-size-properties"/>
    <ref name="common-block-properties"/>
    <optional>
      <ref name="z-index.attr"/>
    </optional>
  </define>
  <!--
    'Usual' container element
    MEMO: XSLFO spec prohibits use of 'relative-position' for fo:block-container,
    but we believe that it should be allowed for non-absolutely positioned containers.
  -->
  <define name="block-container.attlist">
    <ref name="area-properties-unheritable"/>
    <ref name="box-size-properties"/>
    <ref name="block-properties"/>
    <optional>
      <ref name="container-position.attr"/>
    </optional>
    <optional>
      <ref name="z-index.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Properties of inline formatting objects.
    ===============================================================
    ===============================================================
    Unicode bidi-override
    ===============================================================
    MEMO: This element is 'half-inline' accroding to spec, since it's exhibits the same 
    bahavior and used in the same context but yet cannot carry some of inline-level
    properties such as margins and border.
    We use the same set of properties as for inline here (except for unicode-bidi and
    width properties) since we believe that this is a typical inline element.
    Moreover fo:bidi-override is redundant from semantic point of view since it do not 
    carry any additional information compared to regular fo:inline - just add
    'unicode-bidi' to fo:inline and you do not need fo:bidi-override anymore.
  -->
  <define name="bidi-override.attlist">
    <ref name="inline-properties"/>
    <optional>
      <ref name="unicode-bidi.attr"/>
    </optional>
  </define>
  <!--
    MEMO: 'Folint' believes that direction property is required for fo:bidi-override,
    but this is against the spec since this property can be inherited.
  -->
  <!--
    ===============================================================
    Single character
    ===============================================================
  -->
  <define name="character.attlist">
    <ref name="character.attr"/>
    <optional>
      <ref name="suppress-at-line-break.attr"/>
    </optional>
    <optional>
      <ref name="treat-as-word-space.attr"/>
    </optional>
    <ref name="common-inline-properties"/>
  </define>
  <!--
    ===============================================================
    Initial property set specifies properties for one or more lines
    ===============================================================
    MEMO: Spec is contradictory here. It states that use of this object is equivalent to
    the fo:wrapper around the first line. At the same time spec allows on this element
    such properties as 'Common Border, Padding, and Background Properties' 
    - fo:wrapper can't have border/padding/etc and can bear inheritable properties only.
    We believe that this element should be treated as inline and thus should have
    appropriate properties set.
  -->
  <define name="initial-property-set.attlist">
    <ref name="common-inline-properties"/>
  </define>
  <!--
    ===============================================================
    External graphic
    ===============================================================
  -->
  <define name="external-graphic.attlist">
    <ref name="graphic-properties"/>
    <optional>
      <ref name="src.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    In-stream graphic
    ===============================================================
  -->
  <define name="instream-foreign-object.attlist">
    <ref name="graphic-properties"/>
  </define>
  <!--
    ===============================================================
    Inline
    ===============================================================
  -->
  <define name="inline.attlist">
    <ref name="height-properties"/>
    <ref name="inline-properties"/>
  </define>
  <!--
    ===============================================================
    Inline container
    ===============================================================
    FIXME! We believe that this element should not bear not-inheritable properties,
    which applies to text since it can't have text children.
    Therefor we do not use 'common-inline-properties' set.
  -->
  <define name="inline-container.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="aural-properties-unheritable"/>
    <ref name="area-alignment-properties"/>
    <ref name="border-padding-background-properties"/>
    <ref name="keeps-properties-atomic"/>
    <ref name="margin-properties-inline"/>
    <ref name="relative-position-properties"/>
    <ref name="area-properties-unheritable"/>
    <ref name="box-size-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Leader
    ===============================================================
  -->
  <define name="leader.attlist">
    <ref name="inline-properties"/>
  </define>
  <!--
    MEMO: Note that 'inline-properties' includes block-level inheritable properties.
    But it's OK in our content-model since it allows block-level descendants wrapped
    into fo:inline-container.
    At the same time block-level inheritable properties includes leader properties,
    since they are inheritable... 
  -->
  <!--
    ===============================================================
    Page Number
    ===============================================================
  -->
  <define name="page-number.attlist">
    <ref name="common-inline-properties"/>
    <optional>
      <ref name="wrap-option.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Page number citation
    ===============================================================
  -->
  <define name="page-number-citation.attlist">
    <ref name="common-inline-properties"/>
    <optional>
      <ref name="wrap-option.attr"/>
    </optional>
    <ref name="ref-id.attr"/>
  </define>
  <!--
    ===============================================================
    Atomic elements for index ranges markup
    ===============================================================
  -->
  <define name="begin-index-range.attlist">
    <ref name="id.attr"/>
    <ref name="rx-key.attr"/>
  </define>
  <define name="end-index-range.attlist">
    <ref name="ref-id.attr"/>
  </define>
  <!--
    ===============================================================
    Page number list - index entry
    ===============================================================
  -->
  <define name="page-index.attlist">
    <ref name="common-inline-properties"/>
    <optional>
      <ref name="wrap-option.attr"/>
    </optional>
    <optional>
      <ref name="list-separator.attr"/>
    </optional>
    <optional>
      <ref name="ref-key.attr"/>
    </optional>
  </define>
  <!--
    MEMO: There is no 'ref-key' attribute on page-index now, but it is allowed for 
    backward compatibility.
    MEMO: Actually it makes sense to exclude id/rx:key fom the set of availabe properties 
    for 'index-item', however we prefer no to do it just to avoid creation of yet another content
    model (attribute set) for thid inline element.
  -->
  <define name="index-item.attlist">
    <ref name="common-inline-properties"/>
    <optional>
      <ref name="wrap-option.attr"/>
    </optional>
    <ref name="ref-key.attr"/>
    <optional>
      <ref name="link-back.attr"/>
    </optional>
    <optional>
      <ref name="range-separator.attr"/>
    </optional>
    <optional>
      <ref name="merge-subsequent-page-numbers.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Properties of table formatting objects.
    ===============================================================
    ===============================================================
    Table & Caption.
    ===============================================================
  -->
  <define name="table-and-caption.attlist">
    <ref name="common-block-properties"/>
    <optional>
      <ref name="clear.attr"/>
    </optional>
    <ref name="relative-position-properties"/>
    <ref name="keeps-and-breaks-properties-atomic"/>
  </define>
  <!--
    MEMO: Spec do not allows margins on fo:table-caption that is against common sence 
    since this is a typical container.
    We do allow margins (they are included in common-block-properties).
    'Folint' does the same.
  -->
  <define name="table-caption.attlist">
    <optional>
      <ref name="clear.attr"/>
    </optional>
    <ref name="common-block-properties"/>
    <ref name="relative-position-properties"/>
    <ref name="box-size-properties"/>
  </define>
  <define name="table.attlist">
    <optional>
      <ref name="clear.attr"/>
    </optional>
    <ref name="common-block-properties"/>
    <ref name="box-size-properties"/>
    <ref name="keeps-and-breaks-properties-atomic"/>
    <ref name="table-properties-unheritable"/>
  </define>
  <!--
    ===============================================================
    Table column specifies common properties to ascribe to all
    cells in a column *or a group of columns*. Note that, if both
    'number-columns-repeated' and 'number-columns-spanned' exceed
    1, the column counter is increased by 'number-columns-spanned'.
    it means that you only set properties for columns:
    'column-number'
    'column-number' + 'number-columns-spanned'
    'column-number' + 2 * 'number-columns-spanned'
    and so on, leaving default properties for intermediate columns.
    ===============================================================
  -->
  <define name="table-column.attlist">
    <optional>
      <ref name="column-number.attr"/>
    </optional>
    <optional>
      <ref name="column-width.attr"/>
    </optional>
    <optional>
      <ref name="number-columns-repeated.attr"/>
    </optional>
    <optional>
      <ref name="number-columns-spanned.attr"/>
    </optional>
    <ref name="background-properties"/>
    <!--
      MEMO: Border properties applies to this formatting object only if the value of border-collapse
      for the table is "collapse" or "collapse-with-precedence" 
    -->
    <ref name="border-properties"/>
    <ref name="border-precedence-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Table header, table footer, and table body.
    ===============================================================
  -->
  <define name="row-group.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="aural-properties-unheritable"/>
    <ref name="background-properties"/>
    <!--
      MEMO: Border properties applies to this formatting object only if the value of border-collapse
      for the table is "collapse" or "collapse-with-precedence" 
    -->
    <ref name="border-properties"/>
    <ref name="border-precedence-properties"/>
    <ref name="relative-position-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <define name="table-header.attlist">
    <ref name="row-group.attlist"/>
  </define>
  <define name="table-footer.attlist">
    <ref name="row-group.attlist"/>
  </define>
  <!--
    MEMO: Spec do not list "Keep" properties almong applicable to fo:table-body that is a clear
    case of  errata.
  -->
  <define name="table-body.attlist">
    <ref name="row-group.attlist"/>
    <ref name="keeps-and-breaks-properties-atomic"/>
  </define>
  <!--
    ===============================================================
    Table row.
    ===============================================================
    MEMO: Should we create separate collection of properties in 'properties_groups.rnc'
    based on row-group.attlist?
  -->
  <define name="table-row.attlist">
    <ref name="row-group.attlist"/>
    <ref name="height-properties"/>
    <ref name="keeps-and-breaks-properties-atomic"/>
  </define>
  <!--
    ===============================================================
    Table cell.
    ===============================================================
    MEMO: Spec do not allows margins on fo:table-cell but 'Folint' does.
    We excluded margins from this element and therefor don't use 'common-block-properties'
    MEMO: Spec do not list "Keep" properties almong applicable to fo:table-cell that is a clear
    case of  errata.
  -->
  <define name="table-cell.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <optional>
      <ref name="column-number.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="aural-properties-unheritable"/>
    <ref name="border-padding-background-properties"/>
    <ref name="border-precedence-properties"/>
    <ref name="box-size-properties"/>
    <optional>
      <ref name="ends-row.attr"/>
    </optional>
    <ref name="keeps-and-breaks-properties-atomic"/>
    <optional>
      <ref name="number-columns-spanned.attr"/>
    </optional>
    <optional>
      <ref name="number-rows-spanned.attr"/>
    </optional>
    <optional>
      <ref name="starts-row.attr"/>
    </optional>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Properties of list formatting objects.
    ===============================================================  
    ===============================================================
    List block.
    ===============================================================
  -->
  <define name="list-block.attlist">
    <optional>
      <ref name="clear.attr"/>
    </optional>
    <ref name="common-block-properties"/>
    <ref name="keeps-and-breaks-properties-atomic"/>
    <ref name="relative-position-properties"/>
  </define>
  <!--
    ===============================================================
    List item.
    ===============================================================
  -->
  <define name="list-item.attlist">
    <ref name="common-block-properties"/>
    <ref name="keeps-and-breaks-properties-atomic"/>
    <ref name="relative-position-properties"/>
  </define>
  <!--
    ===============================================================
    List item label and list item body
    ===============================================================
  -->
  <define name="list-item-label.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <define name="list-item-body.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Floats and footnotes.
    ===============================================================
    MEMO: Outlines can't have id and therefor can't have rx:key properties so we are strict here.
    'Folint' is loose here - it allows use of these properties.
    MEMO: We are forced to create two types of floats: side-floats and before-floats.
  -->
  <define name="side-float.attlist">
    <optional>
      <ref name="side-float.attr"/>
    </optional>
    <optional>
      <ref name="clear.attr"/>
    </optional>
    <ref name="inheritable-properties"/>
  </define>
  <!-- NOTE: before-float can't bear 'clear' property -->
  <define name="before-float.attlist">
    <optional>
      <ref name="before-float.attr"/>
    </optional>
    <ref name="inheritable-properties"/>
  </define>
  <define name="footnote.attlist">
    <ref name="accessibility-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <define name="footnote-body.attlist">
    <ref name="accessibility-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Simple link.
    ===============================================================
  -->
  <define name="basic-link.attlist">
    <ref name="inline-properties"/>
    <optional>
      <ref name="external-destination.attr"/>
    </optional>
    <optional>
      <ref name="internal-destination.attr"/>
    </optional>
    <optional>
      <ref name="indicate-destination.attr"/>
    </optional>
    <optional>
      <ref name="show-destination.attr"/>
    </optional>
    <optional>
      <ref name="destination-placement-offset.attr"/>
    </optional>
    <optional>
      <ref name="target-processing-context.attr"/>
    </optional>
    <optional>
      <ref name="target-presentation-context.attr"/>
    </optional>
    <optional>
      <ref name="target-stylesheet.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Wrappers.
    ===============================================================
  -->
  <define name="wrapper.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Marker. This element may embrace any content but cannot pass
    properties to its children; so, it may not have features other
    than marker-class-name.
    ===============================================================
    MEMO: We are more strict here making marker-class-name attribute a mandatory,
    but marker with no marker-class-name is meaningless.
  -->
  <define name="marker.attlist">
    <ref name="marker-class-name.attr"/>
  </define>
  <!--
    ===============================================================
    Marker retrieval.
    ===============================================================
    FIXME! We are more strict here making retrieve-class-name attribute a mandatory, 
    but marker with no retrieve-class-name is meaningless.
  -->
  <define name="retrieve-marker.attlist">
    <ref name="retrieve-class-name.attr"/>
    <optional>
      <ref name="retrieve-position.attr"/>
    </optional>
    <optional>
      <ref name="retrieve-boundary.attr"/>
    </optional>
    <!--
      MEMO: Is it OK to allow inheritable properties here? There are no explicit arguments
      against it in the spec.
    -->
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Multistate stuff.
    ===============================================================
    ===============================================================
    Switch. 
    ===============================================================
    MEMO: Should we have Aural Properties here as well?
  -->
  <define name="multi-switch.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <optional>
      <ref name="auto-restore.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Single case.
    ===============================================================
  -->
  <define name="multi-case.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <optional>
      <ref name="starting-state.attr"/>
    </optional>
    <optional>
      <ref name="case-name.attr"/>
    </optional>
    <optional>
      <ref name="case-title.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Toggle. 
    ===============================================================
    MEMO: Should we have here inline-level properties only?
  -->
  <define name="multi-toggle.attlist">
    <optional>
      <ref name="switch-to.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Multi-properties.
    ===============================================================
    Should we allow here any possible properties applicable to the objects inside of the flow?
  -->
  <define name="multi-properties.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================
    Multi property set.
    ===============================================================
    Should we allow here any possible properties applicable to the objects inside of the flow?
  -->
  <define name="multi-property-set.attlist">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="active-state.attr"/>
    <ref name="inheritable-properties"/>
  </define>
  <!--
    ===============================================================  
    Properties grouping. Groups used by different elements classes
    ===============================================================
  -->
  <!--
    ===============================================================
    Entity definitions for common groups of properties
    This grouping reflects properties co occurrence, rather than
    property semantics. It does not correspond to grouping in the
    spec.
    ===============================================================
  -->
  <!-- Accessibility Properties -->
  <define name="accessibility-properties">
    <optional>
      <ref name="source-document.attr"/>
    </optional>
    <optional>
      <ref name="role.attr"/>
    </optional>
  </define>
  <!--
    MEMO: XSLFO is selfcontradictory:
    Those properties allowed on all inline elements excep to for fo:character, fo:bidi-override and fo:inline-conteiner
    At the same time spec says about those properties:
    XSL> It is used by all formatting objects that can be contained in fo:flow or fo:static-content (all formatting
    XSL> objects that can be directly created from an XML source element).
    Thus they must be present on fo:character, fo:bidi-override, fo:inline-conteiner as well
    (there are more elements missing these properties)
    Note also, that comment in the round brackets seems to be meaningless.
  -->
  <!--
    Relative Position Properties
    'position' shorthand property also makes part of this group
  -->
  <define name="relative-position-properties">
    <optional>
      <ref name="relative-position.attr"/>
    </optional>
    <optional>
      <ref name="relative-position-shorthand.attr"/>
    </optional>
  </define>
  <!-- Absolute Position Properties -->
  <define name="absolute-position-properties">
    <ref name="absolute-position.attr"/>
    <optional>
      <ref name="absolute-position-shorthand.attr"/>
    </optional>
    <optional>
      <ref name="top.attr"/>
    </optional>
    <optional>
      <ref name="right.attr"/>
    </optional>
    <optional>
      <ref name="bottom.attr"/>
    </optional>
    <optional>
      <ref name="left.attr"/>
    </optional>
  </define>
  <!--
    Aural Properties
    'cue' and 'pause' shorthand properties are also included
    MEMO: XSLFO is selfcontradictory here in the same way
    it is for  Accessibility Properties - Aural properties allowed everywhere
    but yet not specified on some elements, e.g. fo:block-container or fo:inline-container.
    We believe this is an omission and therefor those properties are available  everywhere.
  -->
  <define name="aural-properties-inheritable">
    <optional>
      <ref name="azimuth.attr"/>
    </optional>
    <optional>
      <ref name="elevation.attr"/>
    </optional>
    <optional>
      <ref name="pitch.attr"/>
    </optional>
    <optional>
      <ref name="pitch-range.attr"/>
    </optional>
    <optional>
      <ref name="play-during.attr"/>
    </optional>
    <optional>
      <ref name="richness.attr"/>
    </optional>
    <optional>
      <ref name="speak.attr"/>
    </optional>
    <optional>
      <ref name="speak-header.attr"/>
    </optional>
    <optional>
      <ref name="speak-numeral.attr"/>
    </optional>
    <optional>
      <ref name="speak-punctuation.attr"/>
    </optional>
    <optional>
      <ref name="speech-rate.attr"/>
    </optional>
    <optional>
      <ref name="stress.attr"/>
    </optional>
    <optional>
      <ref name="voice-family.attr"/>
    </optional>
    <optional>
      <ref name="volume.attr"/>
    </optional>
  </define>
  <define name="aural-properties-unheritable">
    <optional>
      <ref name="cue.attr"/>
    </optional>
    <optional>
      <ref name="cue-after.attr"/>
    </optional>
    <optional>
      <ref name="cue-before.attr"/>
    </optional>
    <optional>
      <ref name="pause.attr"/>
    </optional>
    <optional>
      <ref name="pause-after.attr"/>
    </optional>
    <optional>
      <ref name="pause-before.attr"/>
    </optional>
  </define>
  <define name="aural-properties">
    <ref name="aural-properties-inheritable"/>
    <ref name="aural-properties-unheritable"/>
  </define>
  <!--
    Common Border, Padding, and Background Properties
    Related shorthand properties are also included
  -->
  <define name="border-properties">
    <optional>
      <ref name="border.attr"/>
    </optional>
    <optional>
      <ref name="border-after-color.attr"/>
    </optional>
    <optional>
      <ref name="border-after-style.attr"/>
    </optional>
    <optional>
      <ref name="border-after-width.attr"/>
    </optional>
    <optional>
      <ref name="border-after-width.length.attr"/>
    </optional>
    <optional>
      <ref name="border-after-width.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="border-before-color.attr"/>
    </optional>
    <optional>
      <ref name="border-before-style.attr"/>
    </optional>
    <optional>
      <ref name="border-before-width.attr"/>
    </optional>
    <optional>
      <ref name="border-before-width.length.attr"/>
    </optional>
    <optional>
      <ref name="border-before-width.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="border-bottom.attr"/>
    </optional>
    <optional>
      <ref name="border-bottom-color.attr"/>
    </optional>
    <optional>
      <ref name="border-bottom-style.attr"/>
    </optional>
    <optional>
      <ref name="border-bottom-width.attr"/>
    </optional>
    <optional>
      <ref name="border-bottom-width.length.attr"/>
    </optional>
    <optional>
      <ref name="border-bottom-width.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="border-color.attr"/>
    </optional>
    <optional>
      <ref name="border-end-color.attr"/>
    </optional>
    <optional>
      <ref name="border-end-style.attr"/>
    </optional>
    <optional>
      <ref name="border-end-width.attr"/>
    </optional>
    <optional>
      <ref name="border-end-width.length.attr"/>
    </optional>
    <optional>
      <ref name="border-end-width.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="border-left.attr"/>
    </optional>
    <optional>
      <ref name="border-left-color.attr"/>
    </optional>
    <optional>
      <ref name="border-left-style.attr"/>
    </optional>
    <optional>
      <ref name="border-left-width.attr"/>
    </optional>
    <optional>
      <ref name="border-left-width.length.attr"/>
    </optional>
    <optional>
      <ref name="border-left-width.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="border-right.attr"/>
    </optional>
    <optional>
      <ref name="border-right-color.attr"/>
    </optional>
    <optional>
      <ref name="border-right-style.attr"/>
    </optional>
    <optional>
      <ref name="border-right-width.attr"/>
    </optional>
    <optional>
      <ref name="border-right-width.length.attr"/>
    </optional>
    <optional>
      <ref name="border-right-width.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="border-start-color.attr"/>
    </optional>
    <optional>
      <ref name="border-start-style.attr"/>
    </optional>
    <optional>
      <ref name="border-start-width.attr"/>
    </optional>
    <optional>
      <ref name="border-start-width.length.attr"/>
    </optional>
    <optional>
      <ref name="border-start-width.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="border-style.attr"/>
    </optional>
    <optional>
      <ref name="border-top.attr"/>
    </optional>
    <optional>
      <ref name="border-top-color.attr"/>
    </optional>
    <optional>
      <ref name="border-top-style.attr"/>
    </optional>
    <optional>
      <ref name="border-top-width.attr"/>
    </optional>
    <optional>
      <ref name="border-top-width.length.attr"/>
    </optional>
    <optional>
      <ref name="border-top-width.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="border-width.attr"/>
    </optional>
  </define>
  <define name="padding-properties">
    <optional>
      <ref name="padding.attr"/>
    </optional>
    <optional>
      <ref name="padding-after.attr"/>
    </optional>
    <optional>
      <ref name="padding-after.length.attr"/>
    </optional>
    <optional>
      <ref name="padding-after.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="padding-before.attr"/>
    </optional>
    <optional>
      <ref name="padding-before.length.attr"/>
    </optional>
    <optional>
      <ref name="padding-before.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="padding-bottom.attr"/>
    </optional>
    <optional>
      <ref name="padding-bottom.length.attr"/>
    </optional>
    <optional>
      <ref name="padding-bottom.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="padding-end.attr"/>
    </optional>
    <optional>
      <ref name="padding-end.length.attr"/>
    </optional>
    <optional>
      <ref name="padding-end.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="padding-left.attr"/>
    </optional>
    <optional>
      <ref name="padding-left.length.attr"/>
    </optional>
    <optional>
      <ref name="padding-left.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="padding-right.attr"/>
    </optional>
    <optional>
      <ref name="padding-right.length.attr"/>
    </optional>
    <optional>
      <ref name="padding-right.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="padding-start.attr"/>
    </optional>
    <optional>
      <ref name="padding-start.length.attr"/>
    </optional>
    <optional>
      <ref name="padding-start.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="padding-top.attr"/>
    </optional>
    <optional>
      <ref name="padding-top.length.attr"/>
    </optional>
    <optional>
      <ref name="padding-top.conditionality.attr"/>
    </optional>
  </define>
  <define name="background-properties">
    <optional>
      <ref name="background.attr"/>
    </optional>
    <optional>
      <ref name="background-attachment.attr"/>
    </optional>
    <optional>
      <ref name="background-color.attr"/>
    </optional>
    <optional>
      <ref name="background-image.attr"/>
    </optional>
    <optional>
      <ref name="background-position.attr"/>
    </optional>
    <optional>
      <ref name="background-position-vertical.attr"/>
    </optional>
    <optional>
      <ref name="background-position-horizontal.attr"/>
    </optional>
    <optional>
      <ref name="background-repeat.attr"/>
    </optional>
    <optional>
      <ref name="rx-background-content-type.attr"/>
    </optional>
    <optional>
      <ref name="rx-background-content-height.attr"/>
    </optional>
    <optional>
      <ref name="rx-background-content-width.attr"/>
    </optional>
    <optional>
      <ref name="rx-background-scaling.attr"/>
    </optional>
  </define>
  <define name="border-padding-background-properties">
    <ref name="border-properties"/>
    <ref name="padding-properties"/>
    <ref name="background-properties"/>
  </define>
  <!-- Border Precedence Properties for tables -->
  <define name="border-precedence-properties">
    <optional>
      <ref name="border-after-precedence.attr"/>
    </optional>
    <optional>
      <ref name="border-before-precedence.attr"/>
    </optional>
    <optional>
      <ref name="border-end-precedence.attr"/>
    </optional>
    <optional>
      <ref name="border-start-precedence.attr"/>
    </optional>
  </define>
  <!-- Box Size Properties -->
  <define name="height-properties">
    <optional>
      <ref name="height.attr"/>
    </optional>
    <optional>
      <ref name="min-height.attr"/>
    </optional>
    <optional>
      <ref name="max-height.attr"/>
    </optional>
    <optional>
      <ref name="block-progression-dimension.attr"/>
    </optional>
    <optional>
      <ref name="block-progression-dimension.minimum.attr"/>
    </optional>
    <optional>
      <ref name="block-progression-dimension.optimum.attr"/>
    </optional>
    <optional>
      <ref name="block-progression-dimension.maximum.attr"/>
    </optional>
  </define>
  <define name="width-properties">
    <optional>
      <ref name="width.attr"/>
    </optional>
    <optional>
      <ref name="min-width.attr"/>
    </optional>
    <optional>
      <ref name="max-width.attr"/>
    </optional>
    <optional>
      <ref name="inline-progression-dimension.attr"/>
    </optional>
    <optional>
      <ref name="inline-progression-dimension.minimum.attr"/>
    </optional>
    <optional>
      <ref name="inline-progression-dimension.optimum.attr"/>
    </optional>
    <optional>
      <ref name="inline-progression-dimension.maximum.attr"/>
    </optional>
  </define>
  <define name="box-size-properties">
    <ref name="height-properties"/>
    <ref name="width-properties"/>
  </define>
  <!-- Common Area Properties -->
  <define name="area-properties-inheritable">
    <optional>
      <ref name="display-align.attr"/>
    </optional>
    <optional>
      <ref name="reference-orientation.attr"/>
    </optional>
    <optional>
      <ref name="writing-mode.attr"/>
    </optional>
  </define>
  <define name="area-properties-unheritable">
    <optional>
      <ref name="clip.attr"/>
    </optional>
    <optional>
      <ref name="overflow.attr"/>
    </optional>
  </define>
  <define name="area-properties">
    <ref name="area-properties-inheritable"/>
    <ref name="area-properties-unheritable"/>
  </define>
  <!--
    Common Font Properties
    'font' shorthand property is also included
  -->
  <define name="font-properties">
    <optional>
      <ref name="font.attr"/>
    </optional>
    <optional>
      <ref name="font-selection-strategy.attr"/>
    </optional>
    <optional>
      <ref name="font-family.attr"/>
    </optional>
    <optional>
      <ref name="font-size.attr"/>
    </optional>
    <optional>
      <ref name="font-size-adjust.attr"/>
    </optional>
    <optional>
      <ref name="font-stretch.attr"/>
    </optional>
    <optional>
      <ref name="font-style.attr"/>
    </optional>
    <optional>
      <ref name="font-variant.attr"/>
    </optional>
    <optional>
      <ref name="font-weight.attr"/>
    </optional>
  </define>
  <!--
    Common Hyphenation Properties - Inline
    'xml:lang' shorthand property is also included
  -->
  <define name="hyphenation-properties-inline">
    <optional>
      <ref name="country.attr"/>
    </optional>
    <optional>
      <ref name="language.attr"/>
    </optional>
    <optional>
      <ref name="script.attr"/>
    </optional>
    <optional>
      <attribute name="xml:lang"/>
    </optional>
    <optional>
      <ref name="hyphenate.attr"/>
    </optional>
    <optional>
      <ref name="hyphenation-character.attr"/>
    </optional>
    <optional>
      <ref name="hyphenation-push-character-count.attr"/>
    </optional>
    <optional>
      <ref name="hyphenation-remain-character-count.attr"/>
    </optional>
  </define>
  <!-- Common Hyphenation Properties - Block -->
  <define name="hyphenation-properties-block">
    <optional>
      <ref name="hyphenation-keep.attr"/>
    </optional>
    <optional>
      <ref name="hyphenation-ladder-count.attr"/>
    </optional>
  </define>
  <define name="hyphenation-properties">
    <ref name="hyphenation-properties-inline"/>
    <ref name="hyphenation-properties-block"/>
  </define>
  <!--
    Common CSS Margin Properties
    'margin' shorthand property is also included
  -->
  <define name="margin-properties-CSS">
    <optional>
      <ref name="margin.attr"/>
    </optional>
    <optional>
      <ref name="margin-bottom.attr"/>
    </optional>
    <optional>
      <ref name="margin-left.attr"/>
    </optional>
    <optional>
      <ref name="margin-right.attr"/>
    </optional>
    <optional>
      <ref name="margin-top.attr"/>
    </optional>
  </define>
  <!-- Common Margin Properties - Block -->
  <define name="margin-properties-inheritable">
    <optional>
      <ref name="start-indent.attr"/>
    </optional>
    <optional>
      <ref name="end-indent.attr"/>
    </optional>
  </define>
  <define name="margin-properties-block">
    <ref name="margin-properties-CSS"/>
    <optional>
      <ref name="space-after.attr"/>
    </optional>
    <optional>
      <ref name="space-after.minimum.attr"/>
    </optional>
    <optional>
      <ref name="space-after.optimum.attr"/>
    </optional>
    <optional>
      <ref name="space-after.maximum.attr"/>
    </optional>
    <optional>
      <ref name="space-after.precedence.attr"/>
    </optional>
    <optional>
      <ref name="space-after.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="space-before.attr"/>
    </optional>
    <optional>
      <ref name="space-before.minimum.attr"/>
    </optional>
    <optional>
      <ref name="space-before.optimum.attr"/>
    </optional>
    <optional>
      <ref name="space-before.maximum.attr"/>
    </optional>
    <optional>
      <ref name="space-before.precedence.attr"/>
    </optional>
    <optional>
      <ref name="space-before.conditionality.attr"/>
    </optional>
  </define>
  <!-- Common Margin Properties - Inline -->
  <define name="margin-properties-inline">
    <ref name="margin-properties-CSS"/>
    <optional>
      <ref name="space-start.attr"/>
    </optional>
    <optional>
      <ref name="space-start.minimum.attr"/>
    </optional>
    <optional>
      <ref name="space-start.optimum.attr"/>
    </optional>
    <optional>
      <ref name="space-start.maximum.attr"/>
    </optional>
    <optional>
      <ref name="space-start.precedence.attr"/>
    </optional>
    <optional>
      <ref name="space-start.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="space-end.attr"/>
    </optional>
    <optional>
      <ref name="space-end.minimum.attr"/>
    </optional>
    <optional>
      <ref name="space-end.optimum.attr"/>
    </optional>
    <optional>
      <ref name="space-end.maximum.attr"/>
    </optional>
    <optional>
      <ref name="space-end.precedence.attr"/>
    </optional>
    <optional>
      <ref name="space-end.conditionality.attr"/>
    </optional>
  </define>
  <!--
    Area Alignment Properties
    'vertical-align' shorthand is added
    'relative-align' - excluded
  -->
  <define name="area-alignment-properties">
    <optional>
      <ref name="alignment-adjust.attr"/>
    </optional>
    <optional>
      <ref name="alignment-baseline.attr"/>
    </optional>
    <optional>
      <ref name="baseline-shift.attr"/>
    </optional>
    <optional>
      <ref name="dominant-baseline.attr"/>
    </optional>
    <optional>
      <ref name="vertical-align.attr"/>
    </optional>
  </define>
  <!-- Line Height Properties -->
  <define name="line-height-properties">
    <optional>
      <ref name="line-height.attr"/>
    </optional>
    <optional>
      <ref name="line-height.minimum.attr"/>
    </optional>
    <optional>
      <ref name="line-height.optimum.attr"/>
    </optional>
    <optional>
      <ref name="line-height.maximum.attr"/>
    </optional>
    <optional>
      <ref name="line-height.precedence.attr"/>
    </optional>
    <optional>
      <ref name="line-height.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="line-height-shift-adjustment.attr"/>
    </optional>
  </define>
  <!-- Line Related Properties -->
  <define name="line-related-properties">
    <optional>
      <ref name="text-align.attr"/>
    </optional>
    <optional>
      <ref name="text-align-last.attr"/>
    </optional>
    <optional>
      <ref name="text-indent.attr"/>
    </optional>
    <optional>
      <ref name="last-line-end-indent.attr"/>
    </optional>
    <optional>
      <ref name="line-stacking-strategy.attr"/>
    </optional>
    <optional>
      <ref name="linefeed-treatment.attr"/>
    </optional>
    <optional>
      <ref name="white-space.attr"/>
    </optional>
    <optional>
      <ref name="white-space-treatment.attr"/>
    </optional>
    <optional>
      <ref name="white-space-collapse.attr"/>
    </optional>
    <optional>
      <ref name="wrap-option.attr"/>
    </optional>
    <optional>
      <ref name="direction.attr"/>
    </optional>
  </define>
  <!-- Character Properties -->
  <define name="character-properties-inheritable">
    <optional>
      <ref name="letter-spacing.attr"/>
    </optional>
    <optional>
      <ref name="letter-spacing.minimum.attr"/>
    </optional>
    <optional>
      <ref name="letter-spacing.optimum.attr"/>
    </optional>
    <optional>
      <ref name="letter-spacing.maximum.attr"/>
    </optional>
    <optional>
      <ref name="letter-spacing.precedence.attr"/>
    </optional>
    <optional>
      <ref name="letter-spacing.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="word-spacing.attr"/>
    </optional>
    <optional>
      <ref name="word-spacing.minimum.attr"/>
    </optional>
    <optional>
      <ref name="word-spacing.optimum.attr"/>
    </optional>
    <optional>
      <ref name="word-spacing.maximum.attr"/>
    </optional>
    <optional>
      <ref name="word-spacing.precedence.attr"/>
    </optional>
    <optional>
      <ref name="word-spacing.conditionality.attr"/>
    </optional>
    <optional>
      <ref name="glyph-orientation-horizontal.attr"/>
    </optional>
    <optional>
      <ref name="glyph-orientation-vertical.attr"/>
    </optional>
    <optional>
      <ref name="score-spaces.attr"/>
    </optional>
    <optional>
      <ref name="text-transform.attr"/>
    </optional>
  </define>
  <define name="character-properties-unheritable">
    <optional>
      <!--
        MEMO: There is a problem with these two properties in XSL FO spec.
        They are assumed to be allowed everywhere but somehow on of them
        missing on fo:inline, another on fo:leader and both absent on fo:bidi-override.
        They are not present on fo:block also.
        We suppose that those omissions are erratic. and allow them on all elements that can cotain text.
        It makes sence to allow text-decoration on the graphical inlines also.
      -->
      <ref name="text-decoration.attr"/>
    </optional>
    <optional>
      <ref name="text-shadow.attr"/>
    </optional>
  </define>
  <!--
    NOTE: Those properties apllies to char elements but they are already included into 'inheritable-properties' set
    font-properties,
    line-height-properties
  -->
  <define name="character-properties">
    <ref name="character-properties-inheritable"/>
    <ref name="character-properties-unheritable"/>
  </define>
  <!--
    Common Keeps and Breaks Properties - Atomic objects
    Keeps only
  -->
  <define name="keeps-properties-atomic">
    <optional>
      <ref name="keep-with-next.attr"/>
    </optional>
    <optional>
      <ref name="keep-with-next.within-line.attr"/>
    </optional>
    <optional>
      <ref name="keep-with-next.within-column.attr"/>
    </optional>
    <optional>
      <ref name="keep-with-next.within-page.attr"/>
    </optional>
    <optional>
      <ref name="keep-with-previous.attr"/>
    </optional>
    <optional>
      <ref name="keep-with-previous.within-line.attr"/>
    </optional>
    <optional>
      <ref name="keep-with-previous.within-column.attr"/>
    </optional>
    <optional>
      <ref name="keep-with-previous.within-page.attr"/>
    </optional>
  </define>
  <!--
    Common Keeps and Breaks Properties - Atomic objects
    Keeps and Breaks
    'page-break-*' shorthand properties are also included
  -->
  <define name="keeps-and-breaks-properties-atomic">
    <ref name="keeps-properties-atomic"/>
    <optional>
      <ref name="break-after.attr"/>
    </optional>
    <optional>
      <ref name="break-before.attr"/>
    </optional>
    <optional>
      <ref name="page-break-after.attr"/>
    </optional>
    <optional>
      <ref name="page-break-before.attr"/>
    </optional>
  </define>
  <!--
    Common Keeps and Breaks Properties - Inline
    'page-break-inside' shorthand property is also included
  -->
  <define name="keeps-and-breaks-properties-inline-inheritable">
    <optional>
      <ref name="keep-together.attr"/>
    </optional>
    <optional>
      <ref name="keep-together.within-line.attr"/>
    </optional>
    <optional>
      <ref name="keep-together.within-column.attr"/>
    </optional>
    <optional>
      <ref name="keep-together.within-page.attr"/>
    </optional>
    <optional>
      <ref name="page-break-inside.attr"/>
    </optional>
  </define>
  <!-- MEMO: Do we really need separate block and inline groups here -->
  <!-- Common Keeps and Breaks Properties - Block -->
  <define name="keeps-and-breaks-properties-block-inheritable">
    <optional>
      <ref name="orphans.attr"/>
    </optional>
    <optional>
      <ref name="widows.attr"/>
    </optional>
  </define>
  <!-- Leader and Rule Properties -->
  <define name="leader-properties">
    <optional>
      <ref name="leader-alignment.attr"/>
    </optional>
    <optional>
      <ref name="leader-pattern.attr"/>
    </optional>
    <optional>
      <ref name="leader-pattern-width.attr"/>
    </optional>
    <optional>
      <ref name="leader-length.attr"/>
    </optional>
    <optional>
      <ref name="leader-length.minimum.attr"/>
    </optional>
    <optional>
      <ref name="leader-length.optimum.attr"/>
    </optional>
    <optional>
      <ref name="leader-length.maximum.attr"/>
    </optional>
    <optional>
      <ref name="rule-style.attr"/>
    </optional>
    <optional>
      <ref name="rule-thickness.attr"/>
    </optional>
  </define>
  <!--
    Table Properties
    'border-spacing' shorthand property is also included
    'inherit' property added to table-omit-...er-at-break
  -->
  <define name="table-properties-inheritable">
    <optional>
      <ref name="border-collapse.attr"/>
    </optional>
    <optional>
      <ref name="border-spacing.attr"/>
    </optional>
    <optional>
      <ref name="border-separation.attr"/>
    </optional>
    <optional>
      <ref name="border-separation.inline-progression-direction.attr"/>
    </optional>
    <optional>
      <ref name="border-separation.block-progression-direction.attr"/>
    </optional>
    <optional>
      <ref name="caption-side.attr"/>
    </optional>
    <optional>
      <ref name="empty-cells.attr"/>
    </optional>
  </define>
  <define name="table-properties-unheritable">
    <optional>
      <ref name="table-layout.attr"/>
    </optional>
    <optional>
      <ref name="table-omit-header-at-break.attr"/>
    </optional>
    <optional>
      <ref name="table-omit-footer-at-break.attr"/>
    </optional>
    <optional>
      <ref name="rx-table-omit-initial-header.attr"/>
    </optional>
  </define>
  <define name="table-properties">
    <ref name="table-properties-inheritable"/>
    <ref name="table-properties-unheritable"/>
  </define>
  <!-- List Properties -->
  <define name="list-properties">
    <optional>
      <ref name="provisional-distance-between-starts.attr"/>
    </optional>
    <optional>
      <ref name="provisional-label-separation.attr"/>
    </optional>
  </define>
  <!--
    Visibility Properties
    NOTE: 'visibility' is inheritable, but 'z-index' is not.
  -->
  <define name="visibility-properties">
    <optional>
      <ref name="visibility.attr"/>
    </optional>
    <optional>
      <ref name="z-index.attr"/>
    </optional>
  </define>
  <!--
    ===============================================================
    Set of 'explicitly' inheritable properties. This includes attributes
    marked as inheritable in the spec only!
    We define two sets of inheritable properties:
    1. Basic properties applicable to inline-level elements with character-only content
    2. Full set of inheritable properties 
    ===============================================================
  -->
  <define name="inheritable-properties-inline">
    <ref name="aural-properties-inheritable"/>
    <optional>
      <ref name="color.attr"/>
    </optional>
    <ref name="character-properties-inheritable"/>
    <ref name="font-properties"/>
    <ref name="hyphenation-properties-inline"/>
    <ref name="line-height-properties"/>
    <optional>
      <ref name="visibility.attr"/>
    </optional>
  </define>
  <define name="inheritable-properties-block">
    <ref name="table-properties-inheritable"/>
    <ref name="area-properties-inheritable"/>
    <ref name="hyphenation-properties-block"/>
    <ref name="margin-properties-inheritable"/>
    <optional>
      <ref name="intrusion-displace.attr"/>
    </optional>
    <!-- 'intrusion-displace' applies to: fo:block, fo:block-container, fo:table-and-caption, fo:table, fo:table-caption, fo:list-block, fo:list-item. -->
    <ref name="keeps-and-breaks-properties-inline-inheritable"/>
    <ref name="keeps-and-breaks-properties-block-inheritable"/>
    <ref name="leader-properties"/>
    <!-- MEMO: Should we move this one to inheritable-properties-inline? -->
    <ref name="line-related-properties"/>
    <ref name="list-properties"/>
    <optional>
      <ref name="relative-align.attr"/>
    </optional>
  </define>
  <!-- NOTE: Property 'relative-align' applies to fo:list-item and fo:table-cell only. -->
  <define name="inheritable-properties">
    <ref name="inheritable-properties-inline"/>
    <ref name="inheritable-properties-block"/>
  </define>
  <!--
    ===============================================================
    Common property subsets.
    ===============================================================
    Common block properties (those properties applies to any type of block-container as well
  -->
  <define name="common-block-properties">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="aural-properties-unheritable"/>
    <ref name="border-padding-background-properties"/>
    <ref name="margin-properties-block"/>
    <ref name="inheritable-properties"/>
  </define>
  <!-- Properties for fo:block and fo:block-container -->
  <define name="block-properties">
    <ref name="common-block-properties"/>
    <optional>
      <ref name="clear.attr"/>
    </optional>
    <optional>
      <ref name="span.attr"/>
    </optional>
    <ref name="keeps-and-breaks-properties-atomic"/>
    <ref name="relative-position-properties"/>
  </define>
  <!--
    Common inline properties
    MEMO: Spec says that text-altitude/text-depth applicable only to
    fo:block, fo:character, fo:leader, fo:page-number, fo:page-number-citation
    We believe this is an omission and they must be allowed on all elements
    that can have text children.
  -->
  <define name="common-inline-properties">
    <optional>
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="aural-properties-unheritable"/>
    <ref name="area-alignment-properties"/>
    <ref name="border-padding-background-properties"/>
    <ref name="character-properties-unheritable"/>
    <ref name="keeps-properties-atomic"/>
    <ref name="margin-properties-inline"/>
    <ref name="relative-position-properties"/>
    <optional>
      <ref name="text-altitude.attr"/>
    </optional>
    <optional>
      <ref name="text-depth.attr"/>
    </optional>
    <ref name="inheritable-properties-inline"/>
  </define>
  <!-- Properties for nonempty inline elements -->
  <define name="inline-properties">
    <ref name="common-inline-properties"/>
    <ref name="inheritable-properties-block"/>
  </define>
  <!--
    Properties for graphical inline elements
    NOTE: src attribute exclueded since it's not applicable to fo:instream-foreign-object
  -->
  <define name="graphic-properties">
    <optional>
      <!--
        MEMO: We can replace part of the definition here with 'common-inline-properties' set
        - it will be formaly rightfil since the only difference made by text-shadow,   text-altitude,
         text-depth  and inheritable-properties-inline and both of them are allowed here.
        At the same time those properties do not make any sense being specified on those
        elements since they will be never applied.
      -->
      <ref name="id.attr"/>
    </optional>
    <optional>
      <ref name="rx-key.attr"/>
    </optional>
    <ref name="accessibility-properties"/>
    <ref name="aural-properties"/>
    <ref name="area-properties-unheritable"/>
    <ref name="border-padding-background-properties"/>
    <ref name="margin-properties-inline"/>
    <ref name="relative-position-properties"/>
    <ref name="area-alignment-properties"/>
    <ref name="box-size-properties"/>
    <ref name="keeps-properties-atomic"/>
    <ref name="line-height-properties"/>
    <optional>
      <ref name="display-align.attr"/>
    </optional>
    <optional>
      <ref name="content-type.attr"/>
    </optional>
    <optional>
      <ref name="content-height.attr"/>
    </optional>
    <optional>
      <ref name="content-width.attr"/>
    </optional>
    <optional>
      <ref name="scaling.attr"/>
    </optional>
    <optional>
      <ref name="scaling-method.attr"/>
    </optional>
    <optional>
      <ref name="text-align.attr"/>
    </optional>
    <optional>
      <ref name="text-decoration.attr"/>
    </optional>
  </define>


  <!--
    ===============================================================   
    Common properties content models used by several attributes
    ===============================================================   
  -->
  <define name="border-style.attr-content">
    <choice>
      <value>none</value>
      <value>hidden</value>
      <value>dotted</value>
      <value>dashed</value>
      <value>solid</value>
      <value>double</value>
      <value>groove</value>
      <value>ridge</value>
      <value>inset</value>
      <value>outset</value>
      <value>inherit</value>
    </choice>
  </define>
  <define name="orientation.attr-content">
    <choice>
      <value>0</value>
      <value>90</value>
      <value>180</value>
      <value>270</value>
      <value>-90</value>
      <value>-180</value>
      <value>-270</value>
      <value>0deg</value>
      <value>90deg</value>
      <value>180deg</value>
      <value>270deg</value>
      <value>-90deg</value>
      <value>-180deg</value>
      <value>-270deg</value>
      <value>inherit</value>
    </choice>
  </define>
  <define name="keep.attr-content">
    <choice>
      <value>auto</value>
      <value>always</value>
      <ref name="integer.datatype"/>
    </choice>
  </define>
  <!--
    ===============================================================   
    Definitions of all the attributes (properties) used in XSL FO
    includeing those from RX extensions
    (definitions of attributes bearing 'rx' namespace named as rx-...,
    but sorted according to the actual attribute name)
    ===============================================================
  -->
  <define name="absolute-position.attr">
    <attribute name="absolute-position">
      <choice>
        <value>absolute</value>
        <value>fixed</value>
      </choice>
    </attribute>
  </define>
  <!-- MEMO: We forced to separate this property from actual 'absolute-position' -->
  <define name="container-position.attr">
    <attribute name="absolute-position">
      <choice>
        <value>auto</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="active-state.attr">
    <attribute name="active-state">
      <choice>
        <value>link</value>
        <value>visited</value>
        <value>active</value>
        <value>hover</value>
        <value>focus</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="alignment-adjust.attr">
    <attribute name="alignment-adjust">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="alignment-baseline.attr">
    <attribute name="alignment-baseline">
      <choice>
        <value>auto</value>
        <value>baseline</value>
        <value>before-edge</value>
        <value>text-before-edge</value>
        <value>middle</value>
        <value>central</value>
        <value>after-edge</value>
        <value>text-after-edge</value>
        <value>top</value>
        <value>text-top</value>
        <value>bottom</value>
        <value>text-bottom</value>
        <value>ideographic</value>
        <value>alphabetic</value>
        <value>hanging</value>
        <value>mathematical</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="auto-restore.attr">
    <attribute name="auto-restore">
      <choice>
        <value>true</value>
        <value>false</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="azimuth.attr">
    <attribute name="azimuth">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="background.attr">
    <attribute name="background">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="background-attachment.attr">
    <attribute name="background-attachment">
      <choice>
        <value>scroll</value>
        <value>fixed</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="background-color.attr">
    <attribute name="background-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="background-image.attr">
    <attribute name="background-image">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="background-position.attr">
    <attribute name="background-position">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="background-position-horizontal.attr">
    <attribute name="background-position-horizontal">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="background-position-vertical.attr">
    <attribute name="background-position-vertical">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="background-repeat.attr">
    <attribute name="background-repeat">
      <choice>
        <value>repeat</value>
        <value>repeat-x</value>
        <value>repeat-y</value>
        <value>no-repeat</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <!-- RenderX extension attributes -->
  <define name="rx-background-content-type.attr">
    <attribute name="rx:background-content-type">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="rx-background-content-height.attr">
    <attribute name="rx:background-content-height">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="rx-background-content-width.attr">
    <attribute name="rx:background-content-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="rx-background-scaling.attr">
    <attribute name="rx:background-scaling">
      <choice>
        <value>uniform</value>
        <value>non-uniform</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="baseline-shift.attr">
    <attribute name="baseline-shift">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="blank-or-not-blank.attr">
    <attribute name="blank-or-not-blank">
      <choice>
        <value>blank</value>
        <value>not-blank</value>
        <value>any</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="block-progression-dimension.attr">
    <attribute name="block-progression-dimension">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="block-progression-dimension.maximum.attr">
    <attribute name="block-progression-dimension.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="block-progression-dimension.minimum.attr">
    <attribute name="block-progression-dimension.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="block-progression-dimension.optimum.attr">
    <attribute name="block-progression-dimension.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border.attr">
    <attribute name="border">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-after-color.attr">
    <attribute name="border-after-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-after-precedence.attr">
    <attribute name="border-after-precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-after-style.attr">
    <attribute name="border-after-style">
      <choice>
        <ref name="border-style.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-after-width.attr">
    <attribute name="border-after-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-after-width.conditionality.attr">
    <attribute name="border-after-width.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-after-width.length.attr">
    <attribute name="border-after-width.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-before-color.attr">
    <attribute name="border-before-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-before-precedence.attr">
    <attribute name="border-before-precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-before-style.attr">
    <attribute name="border-before-style">
      <choice>
        <ref name="border-style.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-before-width.attr">
    <attribute name="border-before-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-before-width.conditionality.attr">
    <attribute name="border-before-width.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-before-width.length.attr">
    <attribute name="border-before-width.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-bottom.attr">
    <attribute name="border-bottom">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-bottom-color.attr">
    <attribute name="border-bottom-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-bottom-style.attr">
    <attribute name="border-bottom-style">
      <choice>
        <ref name="border-style.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-bottom-width.attr">
    <attribute name="border-bottom-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-bottom-width.conditionality.attr">
    <attribute name="border-bottom-width.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-bottom-width.length.attr">
    <attribute name="border-bottom-width.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-collapse.attr">
    <attribute name="border-collapse">
      <choice>
        <value>collapse</value>
        <value>collapse-with-precedence</value>
        <value>separate</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-color.attr">
    <attribute name="border-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-end-color.attr">
    <attribute name="border-end-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-end-precedence.attr">
    <attribute name="border-end-precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-end-style.attr">
    <attribute name="border-end-style">
      <choice>
        <ref name="border-style.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-end-width.attr">
    <attribute name="border-end-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-end-width.conditionality.attr">
    <attribute name="border-end-width.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-end-width.length.attr">
    <attribute name="border-end-width.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-left.attr">
    <attribute name="border-left">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-left-color.attr">
    <attribute name="border-left-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-left-style.attr">
    <attribute name="border-left-style">
      <choice>
        <ref name="border-style.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-left-width.attr">
    <attribute name="border-left-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-left-width.conditionality.attr">
    <attribute name="border-left-width.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-left-width.length.attr">
    <attribute name="border-left-width.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-right.attr">
    <attribute name="border-right">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-right-color.attr">
    <attribute name="border-right-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-right-style.attr">
    <attribute name="border-right-style">
      <choice>
        <ref name="border-style.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-right-width.attr">
    <attribute name="border-right-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-right-width.conditionality.attr">
    <attribute name="border-right-width.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-right-width.length.attr">
    <attribute name="border-right-width.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-separation.attr">
    <attribute name="border-separation">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-separation.block-progression-direction.attr">
    <attribute name="border-separation.block-progression-direction">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-separation.inline-progression-direction.attr">
    <attribute name="border-separation.inline-progression-direction">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-spacing.attr">
    <attribute name="border-spacing">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-start-color.attr">
    <attribute name="border-start-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-start-precedence.attr">
    <attribute name="border-start-precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-start-style.attr">
    <attribute name="border-start-style">
      <choice>
        <ref name="border-style.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-start-width.attr">
    <attribute name="border-start-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-start-width.conditionality.attr">
    <attribute name="border-start-width.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-start-width.length.attr">
    <attribute name="border-start-width.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-style.attr">
    <attribute name="border-style">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-top.attr">
    <attribute name="border-top">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-top-color.attr">
    <attribute name="border-top-color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-top-style.attr">
    <attribute name="border-top-style">
      <choice>
        <ref name="border-style.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-top-width.attr">
    <attribute name="border-top-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-top-width.conditionality.attr">
    <attribute name="border-top-width.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-top-width.length.attr">
    <attribute name="border-top-width.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="border-width.attr">
    <attribute name="border-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="bottom.attr">
    <attribute name="bottom">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="break-after.attr">
    <attribute name="break-after">
      <choice>
        <value>auto</value>
        <value>column</value>
        <value>page</value>
        <value>even-page</value>
        <value>odd-page</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="break-before.attr">
    <attribute name="break-before">
      <choice>
        <value>auto</value>
        <value>column</value>
        <value>page</value>
        <value>even-page</value>
        <value>odd-page</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="caption-side.attr">
    <attribute name="caption-side">
      <choice>
        <value>before</value>
        <value>after</value>
        <value>start</value>
        <value>end</value>
        <value>top</value>
        <value>bottom</value>
        <value>left</value>
        <value>right</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="case-name.attr">
    <attribute name="case-name">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="case-title.attr">
    <attribute name="case-title">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="character.attr">
    <attribute name="character"/>
  </define>
  <define name="clear.attr">
    <attribute name="clear">
      <choice>
        <value>start</value>
        <value>end</value>
        <value>left</value>
        <value>right</value>
        <value>both</value>
        <value>none</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="clip.attr">
    <attribute name="clip">
      <choice>
        <ref name="shape.datatype"/>
        <value>auto</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="collapse-subtree.attr">
    <attribute name="collapse-subtree">
      <choice>
        <value>true</value>
        <value>false</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="color.attr">
    <attribute name="color">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="color-profile-name.attr">
    <attribute name="color-profile-name"/>
  </define>
  <define name="column-count.attr">
    <attribute name="column-count">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="column-gap.attr">
    <attribute name="column-gap">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="column-number.attr">
    <attribute name="column-number">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="column-width.attr">
    <attribute name="column-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="content-height.attr">
    <attribute name="content-height">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="content-type.attr">
    <attribute name="content-type">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="content-width.attr">
    <attribute name="content-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="country.attr">
    <attribute name="country">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="cue.attr">
    <attribute name="cue">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="cue-after.attr">
    <attribute name="cue-after">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="cue-before.attr">
    <attribute name="cue-before">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="destination-placement-offset.attr">
    <attribute name="destination-placement-offset">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="direction.attr">
    <attribute name="direction">
      <choice>
        <value>ltr</value>
        <value>rtl</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="display-align.attr">
    <attribute name="display-align">
      <choice>
        <value>auto</value>
        <value>before</value>
        <value>center</value>
        <value>after</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="dominant-baseline.attr">
    <attribute name="dominant-baseline">
      <choice>
        <value>auto</value>
        <value>use-script</value>
        <value>no-change</value>
        <value>reset-size</value>
        <value>ideographic</value>
        <value>alphabetic</value>
        <value>hanging</value>
        <value>mathematical</value>
        <value>central</value>
        <value>middle</value>
        <value>text-after-edge</value>
        <value>text-before-edge</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="elevation.attr">
    <attribute name="elevation">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="empty-cells.attr">
    <attribute name="empty-cells">
      <choice>
        <value>show</value>
        <value>hide</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="end-indent.attr">
    <attribute name="end-indent">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="ends-row.attr">
    <attribute name="ends-row">
      <choice>
        <value>true</value>
        <value>false</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="extent.attr">
    <attribute name="extent">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="external-destination.attr">
    <attribute name="external-destination">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <!--
    MEMO: We have separated this property into the two (for side and before floats)
    MEMO: Float values "inside" and "outside" are RenderX extensions.
  -->
  <define name="before-float.attr">
    <attribute name="float">
      <value>before</value>
    </attribute>
  </define>
  <define name="side-float.attr">
    <attribute name="float">
      <choice>
        <value>start</value>
        <value>end</value>
        <value>left</value>
        <value>right</value>
        <value>none</value>
        <value>inside</value>
        <value>outside</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="flow-name.attr">
    <attribute name="flow-name"/>
  </define>
  <define name="font.attr">
    <attribute name="font">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="font-family.attr">
    <attribute name="font-family">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="font-selection-strategy.attr">
    <attribute name="font-selection-strategy">
      <choice>
        <value>auto</value>
        <value>character-by-character</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="font-size.attr">
    <attribute name="font-size">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="font-size-adjust.attr">
    <attribute name="font-size-adjust">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="font-stretch.attr">
    <attribute name="font-stretch">
      <choice>
        <value>normal</value>
        <value>wider</value>
        <value>narrower</value>
        <value>ultra-condensed</value>
        <value>extra-condensed</value>
        <value>condensed</value>
        <value>semi-condensed</value>
        <value>semi-expanded</value>
        <value>expanded</value>
        <value>extra-expanded</value>
        <value>ultra-expanded</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="font-style.attr">
    <attribute name="font-style">
      <choice>
        <value>normal</value>
        <value>italic</value>
        <value>oblique</value>
        <value>backslant</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="font-variant.attr">
    <attribute name="font-variant">
      <choice>
        <value>normal</value>
        <value>small-caps</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="font-weight.attr">
    <attribute name="font-weight">
      <choice>
        <value>normal</value>
        <value>bold</value>
        <value>bolder</value>
        <value>lighter</value>
        <value>inherit</value>
        <value>100</value>
        <value>200</value>
        <value>300</value>
        <value>400</value>
        <value>500</value>
        <value>600</value>
        <value>700</value>
        <value>800</value>
        <value>900</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="force-page-count.attr">
    <attribute name="force-page-count">
      <choice>
        <value>auto</value>
        <value>even</value>
        <value>odd</value>
        <value>end-on-even</value>
        <value>end-on-odd</value>
        <value>no-force</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="format.attr">
    <attribute name="format"/>
  </define>
  <define name="glyph-orientation-horizontal.attr">
    <attribute name="glyph-orientation-horizontal">
      <choice>
        <ref name="orientation.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="glyph-orientation-vertical.attr">
    <attribute name="glyph-orientation-vertical">
      <choice>
        <ref name="orientation.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="grouping-separator.attr">
    <attribute name="grouping-separator"/>
  </define>
  <define name="grouping-size.attr">
    <attribute name="grouping-size">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="height.attr">
    <attribute name="height">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="hyphenate.attr">
    <attribute name="hyphenate">
      <choice>
        <value>false</value>
        <value>true</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="hyphenation-character.attr">
    <attribute name="hyphenation-character"/>
  </define>
  <define name="hyphenation-keep.attr">
    <attribute name="hyphenation-keep">
      <choice>
        <value>auto</value>
        <value>column</value>
        <value>page</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="hyphenation-ladder-count.attr">
    <attribute name="hyphenation-ladder-count">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="hyphenation-push-character-count.attr">
    <attribute name="hyphenation-push-character-count">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="hyphenation-remain-character-count.attr">
    <attribute name="hyphenation-remain-character-count">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="id.attr">
    <attribute name="id"/>
  </define>
  <define name="indicate-destination.attr">
    <attribute name="indicate-destination">
      <choice>
        <value>true</value>
        <value>false</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="initial-page-number.attr">
    <attribute name="initial-page-number">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="inline-progression-dimension.attr">
    <attribute name="inline-progression-dimension">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="inline-progression-dimension.maximum.attr">
    <attribute name="inline-progression-dimension.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="inline-progression-dimension.minimum.attr">
    <attribute name="inline-progression-dimension.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="inline-progression-dimension.optimum.attr">
    <attribute name="inline-progression-dimension.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="internal-destination.attr">
    <attribute name="internal-destination"/>
  </define>
  <define name="intrusion-displace.attr">
    <attribute name="intrusion-displace">
      <choice>
        <value>auto</value>
        <value>none</value>
        <value>line</value>
        <value>indent</value>
        <value>block</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-together.attr">
    <attribute name="keep-together">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-together.within-column.attr">
    <attribute name="keep-together.within-column">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-together.within-line.attr">
    <attribute name="keep-together.within-line">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-together.within-page.attr">
    <attribute name="keep-together.within-page">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-with-next.attr">
    <attribute name="keep-with-next">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-with-next.within-column.attr">
    <attribute name="keep-with-next.within-column">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-with-next.within-line.attr">
    <attribute name="keep-with-next.within-line">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-with-next.within-page.attr">
    <attribute name="keep-with-next.within-page">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-with-previous.attr">
    <attribute name="keep-with-previous">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-with-previous.within-column.attr">
    <attribute name="keep-with-previous.within-column">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-with-previous.within-line.attr">
    <attribute name="keep-with-previous.within-line">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="keep-with-previous.within-page.attr">
    <attribute name="keep-with-previous.within-page">
      <choice>
        <ref name="keep.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <!-- RenderX extension attribute -->
  <define name="rx-key.attr">
    <attribute name="rx:key"/>
  </define>
  <define name="language.attr">
    <attribute name="language">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="last-line-end-indent.attr">
    <attribute name="last-line-end-indent">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="leader-alignment.attr">
    <attribute name="leader-alignment">
      <choice>
        <value>none</value>
        <value>reference-area</value>
        <value>page</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="leader-length.attr">
    <attribute name="leader-length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="leader-length.maximum.attr">
    <attribute name="leader-length.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="leader-length.minimum.attr">
    <attribute name="leader-length.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="leader-length.optimum.attr">
    <attribute name="leader-length.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="leader-pattern.attr">
    <attribute name="leader-pattern">
      <choice>
        <value>space</value>
        <value>rule</value>
        <value>dots</value>
        <value>use-content</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="leader-pattern-width.attr">
    <attribute name="leader-pattern-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="left.attr">
    <attribute name="left">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="letter-spacing.attr">
    <attribute name="letter-spacing">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="letter-spacing.conditionality.attr">
    <attribute name="letter-spacing.conditionality">
      <choice>
        <value>retain</value>
        <value>discard</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="letter-spacing.maximum.attr">
    <attribute name="letter-spacing.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="letter-spacing.minimum.attr">
    <attribute name="letter-spacing.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="letter-spacing.optimum.attr">
    <attribute name="letter-spacing.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="letter-spacing.precedence.attr">
    <attribute name="letter-spacing.precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="letter-value.attr">
    <attribute name="letter-value">
      <choice>
        <value>auto</value>
        <value>alphabetic</value>
        <value>traditional</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="line-height.attr">
    <attribute name="line-height">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="line-height-shift-adjustment.attr">
    <attribute name="line-height-shift-adjustment">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="line-height.conditionality.attr">
    <attribute name="line-height.conditionality">
      <choice>
        <value>retain</value>
        <value>discard</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="line-height.maximum.attr">
    <attribute name="line-height.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="line-height.minimum.attr">
    <attribute name="line-height.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="line-height.optimum.attr">
    <attribute name="line-height.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="line-height.precedence.attr">
    <attribute name="line-height.precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="line-stacking-strategy.attr">
    <attribute name="line-stacking-strategy">
      <choice>
        <value>line-height</value>
        <value>font-height</value>
        <value>max-height</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="linefeed-treatment.attr">
    <attribute name="linefeed-treatment">
      <choice>
        <value>ignore</value>
        <value>preserve</value>
        <value>treat-as-space</value>
        <value>treat-as-zero-width-space</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="link-back.attr">
    <attribute name="link-back">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="list-separator.attr">
    <attribute name="list-separator"/>
  </define>
  <define name="margin.attr">
    <attribute name="margin">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="margin-bottom.attr">
    <attribute name="margin-bottom">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="margin-left.attr">
    <attribute name="margin-left">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="margin-right.attr">
    <attribute name="margin-right">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="margin-top.attr">
    <attribute name="margin-top">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="marker-class-name.attr">
    <attribute name="marker-class-name"/>
  </define>
  <define name="master-name.attr">
    <attribute name="master-name"/>
  </define>
  <define name="master-reference.attr">
    <attribute name="master-reference"/>
  </define>
  <define name="max-height.attr">
    <attribute name="max-height">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="max-width.attr">
    <attribute name="max-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="maximum-repeats.attr">
    <attribute name="maximum-repeats">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="media-usage.attr">
    <attribute name="media-usage">
      <choice>
        <value>auto</value>
        <value>paginate</value>
        <value>bounded-in-one-dimension</value>
        <value>unbounded</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="merge-subsequent-page-numbers.attr">
    <attribute name="merge-subsequent-page-numbers">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="min-height.attr">
    <attribute name="min-height">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="min-width.attr">
    <attribute name="min-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <!-- NOTE: It's RenderX extension attribute (belongs to rx:meta-field). It enumerates values currently available in XEP -->
  <define name="name.attr">
    <attribute name="name">
      <choice>
        <value>author</value>
        <value>title</value>
        <value>subject</value>
        <value>keywords</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="number-columns-repeated.attr">
    <attribute name="number-columns-repeated">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="number-columns-spanned.attr">
    <attribute name="number-columns-spanned">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="number-rows-spanned.attr">
    <attribute name="number-rows-spanned">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="odd-or-even.attr">
    <attribute name="odd-or-even">
      <choice>
        <value>odd</value>
        <value>even</value>
        <value>any</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="rx-table-omit-initial-header.attr">
    <attribute name="rx:table-omit-initial-header">
      <choice>
        <value>true</value>
        <value>false</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="orphans.attr">
    <attribute name="orphans">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="overflow.attr">
    <attribute name="overflow">
      <choice>
        <value>visible</value>
        <value>hidden</value>
        <value>scroll</value>
        <value>auto</value>
        <value>error-if-overflow</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding.attr">
    <attribute name="padding">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-after.attr">
    <attribute name="padding-after">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-after.conditionality.attr">
    <attribute name="padding-after.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-after.length.attr">
    <attribute name="padding-after.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-before.attr">
    <attribute name="padding-before">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-before.conditionality.attr">
    <attribute name="padding-before.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-before.length.attr">
    <attribute name="padding-before.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-bottom.attr">
    <attribute name="padding-bottom">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-bottom.conditionality.attr">
    <attribute name="padding-bottom.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-bottom.length.attr">
    <attribute name="padding-bottom.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-end.attr">
    <attribute name="padding-end">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-end.conditionality.attr">
    <attribute name="padding-end.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-end.length.attr">
    <attribute name="padding-end.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-left.attr">
    <attribute name="padding-left">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-left.conditionality.attr">
    <attribute name="padding-left.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-left.length.attr">
    <attribute name="padding-left.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-right.attr">
    <attribute name="padding-right">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-right.conditionality.attr">
    <attribute name="padding-right.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-right.length.attr">
    <attribute name="padding-right.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-start.attr">
    <attribute name="padding-start">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-start.conditionality.attr">
    <attribute name="padding-start.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-start.length.attr">
    <attribute name="padding-start.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-top.attr">
    <attribute name="padding-top">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-top.conditionality.attr">
    <attribute name="padding-top.conditionality">
      <choice>
        <value>discard</value>
        <value>retain</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="padding-top.length.attr">
    <attribute name="padding-top.length">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="page-break-after.attr">
    <attribute name="page-break-after">
      <choice>
        <value>auto</value>
        <value>always</value>
        <value>avoid</value>
        <value>left</value>
        <value>right</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="page-break-before.attr">
    <attribute name="page-break-before">
      <choice>
        <value>auto</value>
        <value>always</value>
        <value>avoid</value>
        <value>left</value>
        <value>right</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="page-break-inside.attr">
    <attribute name="page-break-inside">
      <choice>
        <value>avoid</value>
        <value>auto</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="page-height.attr">
    <attribute name="page-height">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="page-position.attr">
    <attribute name="page-position">
      <choice>
        <value>first</value>
        <value>last</value>
        <value>rest</value>
        <value>any</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="page-width.attr">
    <attribute name="page-width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="pause.attr">
    <attribute name="pause">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="pause-after.attr">
    <attribute name="pause-after">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="pause-before.attr">
    <attribute name="pause-before">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="pitch.attr">
    <attribute name="pitch">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="pitch-range.attr">
    <attribute name="pitch-range">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="play-during.attr">
    <attribute name="play-during">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <!-- MEMO: We forced to devide this shorthand since we have separate absolute-container element -->
  <define name="absolute-position-shorthand.attr">
    <attribute name="position">
      <choice>
        <value>absolute</value>
        <value>fixed</value>
      </choice>
    </attribute>
  </define>
  <define name="relative-position-shorthand.attr">
    <attribute name="position">
      <choice>
        <value>static</value>
        <value>relative</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="precedence.attr">
    <attribute name="precedence">
      <choice>
        <value>true</value>
        <value>false</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="provisional-distance-between-starts.attr">
    <attribute name="provisional-distance-between-starts">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="provisional-label-separation.attr">
    <attribute name="provisional-label-separation">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="range-separator.attr">
    <attribute name="range-separator"/>
  </define>
  <define name="ref-id.attr">
    <attribute name="ref-id"/>
  </define>
  <define name="ref-key.attr">
    <attribute name="ref-key"/>
  </define>
  <define name="reference-orientation.attr">
    <attribute name="reference-orientation">
      <choice>
        <ref name="orientation.attr-content"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="region-name.attr">
    <attribute name="region-name"/>
  </define>
  <define name="relative-align.attr">
    <attribute name="relative-align">
      <choice>
        <value>before</value>
        <value>baseline</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="relative-position.attr">
    <attribute name="relative-position">
      <choice>
        <value>auto</value>
        <value>static</value>
        <value>relative</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="rendering-intent.attr">
    <optional>
      <attribute name="rendering-intent">
        <choice>
          <value>auto</value>
          <value>perceptual</value>
          <value>relative-colorimetric</value>
          <value>saturation</value>
          <value>absolute-colorimetric</value>
          <value>inherit</value>
          <ref name="expr.datatype"/>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="retrieve-boundary.attr">
    <attribute name="retrieve-boundary">
      <choice>
        <value>page</value>
        <value>page-sequence</value>
        <value>document</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="retrieve-class-name.attr">
    <attribute name="retrieve-class-name"/>
  </define>
  <define name="retrieve-position.attr">
    <attribute name="retrieve-position">
      <choice>
        <value>first-starting-within-page</value>
        <value>first-including-carryover</value>
        <value>last-starting-within-page</value>
        <value>last-ending-within-page</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="richness.attr">
    <attribute name="richness">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="right.attr">
    <attribute name="right">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="role.attr">
    <attribute name="role"/>
  </define>
  <define name="rule-style.attr">
    <attribute name="rule-style">
      <choice>
        <value>none</value>
        <value>dotted</value>
        <value>dashed</value>
        <value>solid</value>
        <value>double</value>
        <value>groove</value>
        <value>ridge</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="rule-thickness.attr">
    <attribute name="rule-thickness">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="scaling.attr">
    <attribute name="scaling">
      <choice>
        <value>uniform</value>
        <value>non-uniform</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="scaling-method.attr">
    <attribute name="scaling-method">
      <choice>
        <value>auto</value>
        <value>integer-pixels</value>
        <value>resample-any-method</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="score-spaces.attr">
    <attribute name="score-spaces">
      <choice>
        <value>true</value>
        <value>false</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="script.attr">
    <attribute name="script">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="show-destination.attr">
    <attribute name="show-destination">
      <choice>
        <value>replace</value>
        <value>new</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="size.attr">
    <attribute name="size">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="source-document.attr">
    <attribute name="source-document"/>
  </define>
  <define name="space-after.attr">
    <attribute name="space-after">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-after.conditionality.attr">
    <attribute name="space-after.conditionality">
      <choice>
        <value>retain</value>
        <value>discard</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-after.maximum.attr">
    <attribute name="space-after.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-after.minimum.attr">
    <attribute name="space-after.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-after.optimum.attr">
    <attribute name="space-after.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-after.precedence.attr">
    <attribute name="space-after.precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-before.attr">
    <attribute name="space-before">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-before.conditionality.attr">
    <attribute name="space-before.conditionality">
      <choice>
        <value>retain</value>
        <value>discard</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-before.maximum.attr">
    <attribute name="space-before.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-before.minimum.attr">
    <attribute name="space-before.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-before.optimum.attr">
    <attribute name="space-before.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-before.precedence.attr">
    <attribute name="space-before.precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-end.attr">
    <attribute name="space-end">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-end.conditionality.attr">
    <attribute name="space-end.conditionality">
      <choice>
        <value>retain</value>
        <value>discard</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-end.maximum.attr">
    <attribute name="space-end.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-end.minimum.attr">
    <attribute name="space-end.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-end.optimum.attr">
    <attribute name="space-end.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-end.precedence.attr">
    <attribute name="space-end.precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-start.attr">
    <attribute name="space-start">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-start.conditionality.attr">
    <attribute name="space-start.conditionality">
      <choice>
        <value>retain</value>
        <value>discard</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-start.maximum.attr">
    <attribute name="space-start.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-start.minimum.attr">
    <attribute name="space-start.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-start.optimum.attr">
    <attribute name="space-start.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="space-start.precedence.attr">
    <attribute name="space-start.precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="span.attr">
    <attribute name="span">
      <choice>
        <value>none</value>
        <value>all</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="speak.attr">
    <attribute name="speak">
      <choice>
        <value>normal</value>
        <value>none</value>
        <value>spell-out</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="speak-header.attr">
    <attribute name="speak-header">
      <choice>
        <value>once</value>
        <value>always</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="speak-numeral.attr">
    <attribute name="speak-numeral">
      <choice>
        <value>digits</value>
        <value>continuous</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="speak-punctuation.attr">
    <attribute name="speak-punctuation">
      <choice>
        <value>code</value>
        <value>none</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="speech-rate.attr">
    <attribute name="speech-rate">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="src.attr">
    <attribute name="src">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="start-indent.attr">
    <attribute name="start-indent">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="starting-state.attr">
    <attribute name="starting-state">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="starts-row.attr">
    <attribute name="starts-row">
      <choice>
        <value>true</value>
        <value>false</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="stress.attr">
    <attribute name="stress">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="suppress-at-line-break.attr">
    <attribute name="suppress-at-line-break">
      <choice>
        <value>auto</value>
        <value>suppress</value>
        <value>retain</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="switch-to.attr">
    <attribute name="switch-to">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="table-layout.attr">
    <attribute name="table-layout">
      <choice>
        <value>auto</value>
        <value>fixed</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="table-omit-footer-at-break.attr">
    <attribute name="table-omit-footer-at-break">
      <choice>
        <value>true</value>
        <value>false</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="table-omit-header-at-break.attr">
    <attribute name="table-omit-header-at-break">
      <choice>
        <value>true</value>
        <value>false</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="target-presentation-context.attr">
    <attribute name="target-presentation-context"/>
  </define>
  <define name="target-processing-context.attr">
    <attribute name="target-processing-context"/>
  </define>
  <define name="target-stylesheet.attr">
    <attribute name="target-stylesheet"/>
  </define>
  <!-- MEMO: <string> values are temporarily excluded from text-align and text-align-last -->
  <define name="text-align.attr">
    <attribute name="text-align">
      <choice>
        <value>start</value>
        <value>center</value>
        <value>end</value>
        <value>justify</value>
        <value>inside</value>
        <value>outside</value>
        <value>left</value>
        <value>right</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="text-align-last.attr">
    <attribute name="text-align-last">
      <choice>
        <value>relative</value>
        <value>start</value>
        <value>center</value>
        <value>end</value>
        <value>justify</value>
        <value>inside</value>
        <value>outside</value>
        <value>left</value>
        <value>right</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="text-altitude.attr">
    <attribute name="text-altitude">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="text-decoration.attr">
    <attribute name="text-decoration">
      <choice>
        <data type="NMTOKENS"/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="text-depth.attr">
    <attribute name="text-depth">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="text-indent.attr">
    <attribute name="text-indent">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="text-shadow.attr">
    <attribute name="text-shadow">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="text-transform.attr">
    <attribute name="text-transform">
      <choice>
        <value>capitalize</value>
        <value>uppercase</value>
        <value>lowercase</value>
        <value>none</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="top.attr">
    <attribute name="top">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="treat-as-word-space.attr">
    <attribute name="treat-as-word-space">
      <choice>
        <value>auto</value>
        <value>true</value>
        <value>false</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="unicode-bidi.attr">
    <attribute name="unicode-bidi">
      <choice>
        <value>normal</value>
        <value>embed</value>
        <value>bidi-override</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="value.attr">
    <attribute name="value"/>
  </define>
  <define name="vertical-align.attr">
    <attribute name="vertical-align">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="visibility.attr">
    <attribute name="visibility">
      <choice>
        <value>visible</value>
        <value>hidden</value>
        <value>collapse</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="voice-family.attr">
    <attribute name="voice-family">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="volume.attr">
    <attribute name="volume">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="white-space.attr">
    <attribute name="white-space">
      <choice>
        <value>normal</value>
        <value>pre</value>
        <value>nowrap</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="white-space-collapse.attr">
    <attribute name="white-space-collapse">
      <choice>
        <value>false</value>
        <value>true</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="white-space-treatment.attr">
    <attribute name="white-space-treatment">
      <choice>
        <value>ignore</value>
        <value>preserve</value>
        <value>ignore-if-before-linefeed</value>
        <value>ignore-if-after-linefeed</value>
        <value>ignore-if-surrounding-linefeed</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="widows.attr">
    <attribute name="widows">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="width.attr">
    <attribute name="width">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="word-spacing.attr">
    <attribute name="word-spacing">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="word-spacing.conditionality.attr">
    <attribute name="word-spacing.conditionality">
      <choice>
        <value>retain</value>
        <value>discard</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="word-spacing.maximum.attr">
    <attribute name="word-spacing.maximum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="word-spacing.minimum.attr">
    <attribute name="word-spacing.minimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="word-spacing.optimum.attr">
    <attribute name="word-spacing.optimum">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="word-spacing.precedence.attr">
    <attribute name="word-spacing.precedence">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="wrap-option.attr">
    <attribute name="wrap-option">
      <choice>
        <value>no-wrap</value>
        <value>wrap</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="writing-mode.attr">
    <attribute name="writing-mode">
      <choice>
        <value>lr-tb</value>
        <value>rl-tb</value>
        <value>tb-rl</value>
        <value>lr</value>
        <value>rl</value>
        <value>tb</value>
        <value>inherit</value>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>
  <define name="z-index.attr">
    <attribute name="z-index">
      <choice>
        <text/>
        <ref name="expr.datatype"/>
      </choice>
    </attribute>
  </define>

</grammar>
